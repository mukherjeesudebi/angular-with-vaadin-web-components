{"ast":null,"code":"/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport { useShadow } from '@polymer/polymer/lib/utils/settings.js';\n\n// Contains all connected resizables that do not have a parent.\nvar ORPHANS = new Set();\n\n/**\n * `IronResizableBehavior` is a behavior that can be used in Polymer elements to\n * coordinate the flow of resize events between \"resizers\" (elements that\n *control the size or hidden state of their children) and \"resizables\" (elements\n *that need to be notified when they are resized or un-hidden by their parents\n *in order to take action on their new measurements).\n *\n * Elements that perform measurement should add the `IronResizableBehavior`\n *behavior to their element definition and listen for the `iron-resize` event on\n *themselves. This event will be fired when they become showing after having\n *been hidden, when they are resized explicitly by another resizable, or when\n *the window has been resized.\n *\n * Note, the `iron-resize` event is non-bubbling.\n *\n * @polymerBehavior\n * @demo demo/index.html\n **/\nexport const IronResizableBehavior = {\n  properties: {\n    /**\n     * The closest ancestor element that implements `IronResizableBehavior`.\n     */\n    _parentResizable: {\n      type: Object,\n      observer: '_parentResizableChanged'\n    },\n    /**\n     * True if this element is currently notifying its descendant elements of\n     * resize.\n     */\n    _notifyingDescendant: {\n      type: Boolean,\n      value: false\n    }\n  },\n  listeners: {\n    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'\n  },\n  created: function () {\n    // We don't really need property effects on these, and also we want them\n    // to be created before the `_parentResizable` observer fires:\n    this._interestedResizables = [];\n    this._boundNotifyResize = this.notifyResize.bind(this);\n    this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);\n  },\n  attached: function () {\n    this._requestResizeNotifications();\n  },\n  detached: function () {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    } else {\n      ORPHANS.delete(this);\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n    this._parentResizable = null;\n  },\n  /**\n   * Can be called to manually notify a resizable and its descendant\n   * resizables of a resize change.\n   */\n  notifyResize: function () {\n    if (!this.isAttached) {\n      return;\n    }\n    this._interestedResizables.forEach(function (resizable) {\n      if (this.resizerShouldNotify(resizable)) {\n        this._notifyDescendant(resizable);\n      }\n    }, this);\n    this._fireResize();\n  },\n  /**\n   * Used to assign the closest resizable ancestor to this resizable\n   * if the ancestor detects a request for notifications.\n   */\n  assignParentResizable: function (parentResizable) {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    }\n    this._parentResizable = parentResizable;\n    if (parentResizable && parentResizable._interestedResizables.indexOf(this) === -1) {\n      parentResizable._interestedResizables.push(this);\n      parentResizable._subscribeIronResize(this);\n    }\n  },\n  /**\n   * Used to remove a resizable descendant from the list of descendants\n   * that should be notified of a resize change.\n   */\n  stopResizeNotificationsFor: function (target) {\n    var index = this._interestedResizables.indexOf(target);\n    if (index > -1) {\n      this._interestedResizables.splice(index, 1);\n      this._unsubscribeIronResize(target);\n    }\n  },\n  /**\n   * Subscribe this element to listen to iron-resize events on the given target.\n   *\n   * Preferred over target.listen because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _subscribeIronResize: function (target) {\n    target.addEventListener('iron-resize', this._boundOnDescendantIronResize);\n  },\n  /**\n   * Unsubscribe this element from listening to to iron-resize events on the\n   * given target.\n   *\n   * Preferred over target.unlisten because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _unsubscribeIronResize: function (target) {\n    target.removeEventListener('iron-resize', this._boundOnDescendantIronResize);\n  },\n  /**\n   * This method can be overridden to filter nested elements that should or\n   * should not be notified by the current element. Return true if an element\n   * should be notified, or false if it should not be notified.\n   *\n   * @param {HTMLElement} element A candidate descendant element that\n   * implements `IronResizableBehavior`.\n   * @return {boolean} True if the `element` should be notified of resize.\n   */\n  resizerShouldNotify: function (element) {\n    return true;\n  },\n  _onDescendantIronResize: function (event) {\n    if (this._notifyingDescendant) {\n      event.stopPropagation();\n      return;\n    }\n\n    // no need to use this during shadow dom because of event retargeting\n    if (!useShadow) {\n      this._fireResize();\n    }\n  },\n  _fireResize: function () {\n    this.fire('iron-resize', null, {\n      node: this,\n      bubbles: false\n    });\n  },\n  _onIronRequestResizeNotifications: function (event) {\n    var target = /** @type {!EventTarget} */dom(event).rootTarget;\n    if (target === this) {\n      return;\n    }\n    target.assignParentResizable(this);\n    this._notifyDescendant(target);\n    event.stopPropagation();\n  },\n  _parentResizableChanged: function (parentResizable) {\n    if (parentResizable) {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n  },\n  _notifyDescendant: function (descendant) {\n    // NOTE(cdata): In IE10, attached is fired on children first, so it's\n    // important not to notify them if the parent is not attached yet (or\n    // else they will get redundantly notified when the parent attaches).\n    if (!this.isAttached) {\n      return;\n    }\n    this._notifyingDescendant = true;\n    descendant.notifyResize();\n    this._notifyingDescendant = false;\n  },\n  _requestResizeNotifications: function () {\n    if (!this.isAttached) {\n      return;\n    }\n    if (document.readyState === 'loading') {\n      var _requestResizeNotifications = this._requestResizeNotifications.bind(this);\n      document.addEventListener('readystatechange', function readystatechanged() {\n        document.removeEventListener('readystatechange', readystatechanged);\n        _requestResizeNotifications();\n      });\n    } else {\n      this._findParent();\n      if (!this._parentResizable) {\n        // If this resizable is an orphan, tell other orphans to try to find\n        // their parent again, in case it's this resizable.\n        ORPHANS.forEach(function (orphan) {\n          if (orphan !== this) {\n            orphan._findParent();\n          }\n        }, this);\n        window.addEventListener('resize', this._boundNotifyResize);\n        this.notifyResize();\n      } else {\n        // If this resizable has a parent, tell other child resizables of\n        // that parent to try finding their parent again, in case it's this\n        // resizable.\n        this._parentResizable._interestedResizables.forEach(function (resizable) {\n          if (resizable !== this) {\n            resizable._findParent();\n          }\n        }, this);\n      }\n    }\n  },\n  _findParent: function () {\n    this.assignParentResizable(null);\n    this.fire('iron-request-resize-notifications', null, {\n      node: this,\n      bubbles: true,\n      cancelable: true\n    });\n    if (!this._parentResizable) {\n      ORPHANS.add(this);\n    } else {\n      ORPHANS.delete(this);\n    }\n  }\n};","map":{"version":3,"names":["dom","useShadow","ORPHANS","Set","IronResizableBehavior","properties","_parentResizable","type","Object","observer","_notifyingDescendant","Boolean","value","listeners","created","_interestedResizables","_boundNotifyResize","notifyResize","bind","_boundOnDescendantIronResize","_onDescendantIronResize","attached","_requestResizeNotifications","detached","stopResizeNotificationsFor","delete","window","removeEventListener","isAttached","forEach","resizable","resizerShouldNotify","_notifyDescendant","_fireResize","assignParentResizable","parentResizable","indexOf","push","_subscribeIronResize","target","index","splice","_unsubscribeIronResize","addEventListener","element","event","stopPropagation","fire","node","bubbles","_onIronRequestResizeNotifications","rootTarget","_parentResizableChanged","descendant","document","readyState","readystatechanged","_findParent","orphan","cancelable","add"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@polymer/iron-resizable-behavior/iron-resizable-behavior.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {useShadow} from '@polymer/polymer/lib/utils/settings.js';\n\n// Contains all connected resizables that do not have a parent.\nvar ORPHANS = new Set();\n\n/**\n * `IronResizableBehavior` is a behavior that can be used in Polymer elements to\n * coordinate the flow of resize events between \"resizers\" (elements that\n *control the size or hidden state of their children) and \"resizables\" (elements\n *that need to be notified when they are resized or un-hidden by their parents\n *in order to take action on their new measurements).\n *\n * Elements that perform measurement should add the `IronResizableBehavior`\n *behavior to their element definition and listen for the `iron-resize` event on\n *themselves. This event will be fired when they become showing after having\n *been hidden, when they are resized explicitly by another resizable, or when\n *the window has been resized.\n *\n * Note, the `iron-resize` event is non-bubbling.\n *\n * @polymerBehavior\n * @demo demo/index.html\n **/\nexport const IronResizableBehavior = {\n  properties: {\n    /**\n     * The closest ancestor element that implements `IronResizableBehavior`.\n     */\n    _parentResizable: {\n      type: Object,\n      observer: '_parentResizableChanged',\n    },\n\n    /**\n     * True if this element is currently notifying its descendant elements of\n     * resize.\n     */\n    _notifyingDescendant: {\n      type: Boolean,\n      value: false,\n    }\n  },\n\n  listeners: {\n    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'\n  },\n\n  created: function() {\n    // We don't really need property effects on these, and also we want them\n    // to be created before the `_parentResizable` observer fires:\n    this._interestedResizables = [];\n    this._boundNotifyResize = this.notifyResize.bind(this);\n    this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);\n  },\n\n  attached: function() {\n    this._requestResizeNotifications();\n  },\n\n  detached: function() {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    } else {\n      ORPHANS.delete(this);\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n\n    this._parentResizable = null;\n  },\n\n  /**\n   * Can be called to manually notify a resizable and its descendant\n   * resizables of a resize change.\n   */\n  notifyResize: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._interestedResizables.forEach(function(resizable) {\n      if (this.resizerShouldNotify(resizable)) {\n        this._notifyDescendant(resizable);\n      }\n    }, this);\n\n    this._fireResize();\n  },\n\n  /**\n   * Used to assign the closest resizable ancestor to this resizable\n   * if the ancestor detects a request for notifications.\n   */\n  assignParentResizable: function(parentResizable) {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    }\n\n    this._parentResizable = parentResizable;\n\n    if (parentResizable &&\n        parentResizable._interestedResizables.indexOf(this) === -1) {\n      parentResizable._interestedResizables.push(this);\n      parentResizable._subscribeIronResize(this);\n    }\n  },\n\n  /**\n   * Used to remove a resizable descendant from the list of descendants\n   * that should be notified of a resize change.\n   */\n  stopResizeNotificationsFor: function(target) {\n    var index = this._interestedResizables.indexOf(target);\n\n    if (index > -1) {\n      this._interestedResizables.splice(index, 1);\n      this._unsubscribeIronResize(target);\n    }\n  },\n\n  /**\n   * Subscribe this element to listen to iron-resize events on the given target.\n   *\n   * Preferred over target.listen because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _subscribeIronResize: function(target) {\n    target.addEventListener('iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * Unsubscribe this element from listening to to iron-resize events on the\n   * given target.\n   *\n   * Preferred over target.unlisten because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _unsubscribeIronResize: function(target) {\n    target.removeEventListener(\n        'iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * This method can be overridden to filter nested elements that should or\n   * should not be notified by the current element. Return true if an element\n   * should be notified, or false if it should not be notified.\n   *\n   * @param {HTMLElement} element A candidate descendant element that\n   * implements `IronResizableBehavior`.\n   * @return {boolean} True if the `element` should be notified of resize.\n   */\n  resizerShouldNotify: function(element) {\n    return true;\n  },\n\n  _onDescendantIronResize: function(event) {\n    if (this._notifyingDescendant) {\n      event.stopPropagation();\n      return;\n    }\n\n    // no need to use this during shadow dom because of event retargeting\n    if (!useShadow) {\n      this._fireResize();\n    }\n  },\n\n  _fireResize: function() {\n    this.fire('iron-resize', null, {node: this, bubbles: false});\n  },\n\n  _onIronRequestResizeNotifications: function(event) {\n    var target = /** @type {!EventTarget} */ (dom(event).rootTarget);\n    if (target === this) {\n      return;\n    }\n\n    target.assignParentResizable(this);\n    this._notifyDescendant(target);\n\n    event.stopPropagation();\n  },\n\n  _parentResizableChanged: function(parentResizable) {\n    if (parentResizable) {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n  },\n\n  _notifyDescendant: function(descendant) {\n    // NOTE(cdata): In IE10, attached is fired on children first, so it's\n    // important not to notify them if the parent is not attached yet (or\n    // else they will get redundantly notified when the parent attaches).\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._notifyingDescendant = true;\n    descendant.notifyResize();\n    this._notifyingDescendant = false;\n  },\n\n  _requestResizeNotifications: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (document.readyState === 'loading') {\n      var _requestResizeNotifications =\n          this._requestResizeNotifications.bind(this);\n      document.addEventListener(\n          'readystatechange', function readystatechanged() {\n            document.removeEventListener('readystatechange', readystatechanged);\n            _requestResizeNotifications();\n          });\n    } else {\n      this._findParent();\n\n      if (!this._parentResizable) {\n        // If this resizable is an orphan, tell other orphans to try to find\n        // their parent again, in case it's this resizable.\n        ORPHANS.forEach(function(orphan) {\n          if (orphan !== this) {\n            orphan._findParent();\n          }\n        }, this);\n\n        window.addEventListener('resize', this._boundNotifyResize);\n        this.notifyResize();\n      } else {\n        // If this resizable has a parent, tell other child resizables of\n        // that parent to try finding their parent again, in case it's this\n        // resizable.\n        this._parentResizable._interestedResizables\n            .forEach(function(resizable) {\n              if (resizable !== this) {\n                resizable._findParent();\n              }\n            }, this);\n      }\n    }\n  },\n\n  _findParent: function() {\n    this.assignParentResizable(null);\n    this.fire(\n        'iron-request-resize-notifications',\n        null,\n        {node: this, bubbles: true, cancelable: true});\n\n    if (!this._parentResizable) {\n      ORPHANS.add(this);\n    } else {\n      ORPHANS.delete(this);\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}