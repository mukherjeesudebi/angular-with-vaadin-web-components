{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { getDeepActiveElement } from './focus-utils.js';\n\n/**\n * A controller for saving a focused node and restoring focus to it later.\n */\nexport class FocusRestorationController {\n  /**\n   * Saves the given node as a target for restoring focus to\n   * when `restoreFocus()` is called. If no node is provided,\n   * the currently focused node in the DOM is saved as a target.\n   *\n   * @param {Node | null | undefined} focusNode\n   */\n  saveFocus(focusNode) {\n    this.focusNode = focusNode || getDeepActiveElement();\n  }\n\n  /**\n   * Restores focus to the target node that was saved previously with `saveFocus()`.\n   */\n  restoreFocus() {\n    const focusNode = this.focusNode;\n    if (!focusNode) {\n      return;\n    }\n    if (getDeepActiveElement() === document.body) {\n      // In Firefox and Safari, focusing the node synchronously\n      // doesn't work as expected when the overlay is closing on outside click.\n      // These browsers force focus to move to the body element and retain it\n      // there until the next event loop iteration.\n      setTimeout(() => focusNode.focus());\n    } else {\n      focusNode.focus();\n    }\n    this.focusNode = null;\n  }\n}","map":{"version":3,"names":["getDeepActiveElement","FocusRestorationController","saveFocus","focusNode","restoreFocus","document","body","setTimeout","focus"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/a11y-base/src/focus-restoration-controller.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { getDeepActiveElement } from './focus-utils.js';\n\n/**\n * A controller for saving a focused node and restoring focus to it later.\n */\nexport class FocusRestorationController {\n  /**\n   * Saves the given node as a target for restoring focus to\n   * when `restoreFocus()` is called. If no node is provided,\n   * the currently focused node in the DOM is saved as a target.\n   *\n   * @param {Node | null | undefined} focusNode\n   */\n  saveFocus(focusNode) {\n    this.focusNode = focusNode || getDeepActiveElement();\n  }\n\n  /**\n   * Restores focus to the target node that was saved previously with `saveFocus()`.\n   */\n  restoreFocus() {\n    const focusNode = this.focusNode;\n    if (!focusNode) {\n      return;\n    }\n\n    if (getDeepActiveElement() === document.body) {\n      // In Firefox and Safari, focusing the node synchronously\n      // doesn't work as expected when the overlay is closing on outside click.\n      // These browsers force focus to move to the body element and retain it\n      // there until the next event loop iteration.\n      setTimeout(() => focusNode.focus());\n    } else {\n      focusNode.focus();\n    }\n\n    this.focusNode = null;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAoB,QAAQ,kBAAkB;;AAEvD;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,CAAC;EACtC;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,SAASA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS,IAAIH,oBAAoB,CAAC,CAAC;EACtD;;EAEA;AACF;AACA;EACEI,YAAYA,CAAA,EAAG;IACb,MAAMD,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,IAAI,CAACA,SAAS,EAAE;MACd;IACF;IAEA,IAAIH,oBAAoB,CAAC,CAAC,KAAKK,QAAQ,CAACC,IAAI,EAAE;MAC5C;MACA;MACA;MACA;MACAC,UAAU,CAAC,MAAMJ,SAAS,CAACK,KAAK,CAAC,CAAC,CAAC;IACrC,CAAC,MAAM;MACLL,SAAS,CAACK,KAAK,CAAC,CAAC;IACnB;IAEA,IAAI,CAACL,SAAS,GAAG,IAAI;EACvB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}