{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\n\n/**\n * A controller to manage the label element.\n */\nexport class LabelController extends SlotChildObserveController {\n  constructor(host) {\n    super(host, 'label', 'label');\n  }\n\n  /**\n   * Set label based on corresponding host property.\n   *\n   * @param {string} label\n   */\n  setLabel(label) {\n    this.label = label;\n\n    // Restore the default label, if needed.\n    const labelNode = this.getSlotChild();\n    if (!labelNode) {\n      this.restoreDefaultNode();\n    }\n\n    // When default label is used, update it.\n    if (this.node === this.defaultNode) {\n      this.updateDefaultNode(this.node);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to restore and observe the default label element.\n   *\n   * @protected\n   * @override\n   */\n  restoreDefaultNode() {\n    const {\n      label\n    } = this;\n\n    // Restore the default label.\n    if (label && label.trim() !== '') {\n      const labelNode = this.attachDefaultNode();\n\n      // Observe the default label.\n      this.observeNode(labelNode);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to update the default label element text content.\n   *\n   * @param {Node | undefined} node\n   * @protected\n   * @override\n   */\n  updateDefaultNode(node) {\n    if (node) {\n      node.textContent = this.label;\n    }\n\n    // Notify the host after update.\n    super.updateDefaultNode(node);\n  }\n\n  /**\n   * Override to observe the newly added custom node.\n   *\n   * @param {Node} node\n   * @protected\n   * @override\n   */\n  initCustomNode(node) {\n    // Notify the host about adding a custom node.\n    super.initCustomNode(node);\n    this.observeNode(node);\n  }\n}","map":{"version":3,"names":["SlotChildObserveController","LabelController","constructor","host","setLabel","label","labelNode","getSlotChild","restoreDefaultNode","node","defaultNode","updateDefaultNode","trim","attachDefaultNode","observeNode","textContent","initCustomNode"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/field-base/src/label-controller.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\n\n/**\n * A controller to manage the label element.\n */\nexport class LabelController extends SlotChildObserveController {\n  constructor(host) {\n    super(host, 'label', 'label');\n  }\n\n  /**\n   * Set label based on corresponding host property.\n   *\n   * @param {string} label\n   */\n  setLabel(label) {\n    this.label = label;\n\n    // Restore the default label, if needed.\n    const labelNode = this.getSlotChild();\n    if (!labelNode) {\n      this.restoreDefaultNode();\n    }\n\n    // When default label is used, update it.\n    if (this.node === this.defaultNode) {\n      this.updateDefaultNode(this.node);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to restore and observe the default label element.\n   *\n   * @protected\n   * @override\n   */\n  restoreDefaultNode() {\n    const { label } = this;\n\n    // Restore the default label.\n    if (label && label.trim() !== '') {\n      const labelNode = this.attachDefaultNode();\n\n      // Observe the default label.\n      this.observeNode(labelNode);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to update the default label element text content.\n   *\n   * @param {Node | undefined} node\n   * @protected\n   * @override\n   */\n  updateDefaultNode(node) {\n    if (node) {\n      node.textContent = this.label;\n    }\n\n    // Notify the host after update.\n    super.updateDefaultNode(node);\n  }\n\n  /**\n   * Override to observe the newly added custom node.\n   *\n   * @param {Node} node\n   * @protected\n   * @override\n   */\n  initCustomNode(node) {\n    // Notify the host about adding a custom node.\n    super.initCustomNode(node);\n\n    this.observeNode(node);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,0BAA0B,QAAQ,6DAA6D;;AAExG;AACA;AACA;AACA,OAAO,MAAMC,eAAe,SAASD,0BAA0B,CAAC;EAC9DE,WAAWA,CAACC,IAAI,EAAE;IAChB,KAAK,CAACA,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;EACEC,QAAQA,CAACC,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;;IAElB;IACA,MAAMC,SAAS,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IACrC,IAAI,CAACD,SAAS,EAAE;MACd,IAAI,CAACE,kBAAkB,CAAC,CAAC;IAC3B;;IAEA;IACA,IAAI,IAAI,CAACC,IAAI,KAAK,IAAI,CAACC,WAAW,EAAE;MAClC,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACF,IAAI,CAAC;IACnC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACED,kBAAkBA,CAAA,EAAG;IACnB,MAAM;MAAEH;IAAM,CAAC,GAAG,IAAI;;IAEtB;IACA,IAAIA,KAAK,IAAIA,KAAK,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAChC,MAAMN,SAAS,GAAG,IAAI,CAACO,iBAAiB,CAAC,CAAC;;MAE1C;MACA,IAAI,CAACC,WAAW,CAACR,SAAS,CAAC;IAC7B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,iBAAiBA,CAACF,IAAI,EAAE;IACtB,IAAIA,IAAI,EAAE;MACRA,IAAI,CAACM,WAAW,GAAG,IAAI,CAACV,KAAK;IAC/B;;IAEA;IACA,KAAK,CAACM,iBAAiB,CAACF,IAAI,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,cAAcA,CAACP,IAAI,EAAE;IACnB;IACA,KAAK,CAACO,cAAc,CAACP,IAAI,CAAC;IAE1B,IAAI,CAACK,WAAW,CAACL,IAAI,CAAC;EACxB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}