{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DisabledMixin } from './disabled-mixin.js';\n\n/**\n * A mixin to toggle the `tabindex` attribute.\n *\n * The attribute is set to -1 whenever the user disables the element\n * and restored with the last known value once the element is enabled.\n *\n * @polymerMixin\n * @mixes DisabledMixin\n */\nexport const TabindexMixin = superclass => class TabindexMixinClass extends DisabledMixin(superclass) {\n  static get properties() {\n    return {\n      /**\n       * Indicates whether the element can be focused and where it participates in sequential keyboard navigation.\n       *\n       * @protected\n       */\n      tabindex: {\n        type: Number,\n        reflectToAttribute: true,\n        observer: '_tabindexChanged'\n      },\n      /**\n       * Stores the last known tabindex since the element has been disabled.\n       *\n       * @protected\n       */\n      _lastTabIndex: {\n        type: Number\n      }\n    };\n  }\n\n  /**\n   * When the element gets disabled, the observer saves the last known tabindex\n   * and makes the element not focusable by setting tabindex to -1.\n   * As soon as the element gets enabled, the observer restores the last known tabindex\n   * so that the element can be focusable again.\n   *\n   * @protected\n   * @override\n   */\n  _disabledChanged(disabled, oldDisabled) {\n    super._disabledChanged(disabled, oldDisabled);\n    if (disabled) {\n      if (this.tabindex !== undefined) {\n        this._lastTabIndex = this.tabindex;\n      }\n      this.tabindex = -1;\n    } else if (oldDisabled) {\n      this.tabindex = this._lastTabIndex;\n    }\n  }\n\n  /**\n   * When the user has changed tabindex while the element is disabled,\n   * the observer reverts tabindex to -1 and rather saves the new tabindex value to apply it later.\n   * The new value will be applied as soon as the element becomes enabled.\n   *\n   * @protected\n   */\n  _tabindexChanged(tabindex) {\n    if (this.disabled && tabindex !== -1) {\n      this._lastTabIndex = tabindex;\n      this.tabindex = -1;\n    }\n  }\n};","map":{"version":3,"names":["DisabledMixin","TabindexMixin","superclass","TabindexMixinClass","properties","tabindex","type","Number","reflectToAttribute","observer","_lastTabIndex","_disabledChanged","disabled","oldDisabled","undefined","_tabindexChanged"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/a11y-base/src/tabindex-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DisabledMixin } from './disabled-mixin.js';\n\n/**\n * A mixin to toggle the `tabindex` attribute.\n *\n * The attribute is set to -1 whenever the user disables the element\n * and restored with the last known value once the element is enabled.\n *\n * @polymerMixin\n * @mixes DisabledMixin\n */\nexport const TabindexMixin = (superclass) =>\n  class TabindexMixinClass extends DisabledMixin(superclass) {\n    static get properties() {\n      return {\n        /**\n         * Indicates whether the element can be focused and where it participates in sequential keyboard navigation.\n         *\n         * @protected\n         */\n        tabindex: {\n          type: Number,\n          reflectToAttribute: true,\n          observer: '_tabindexChanged',\n        },\n\n        /**\n         * Stores the last known tabindex since the element has been disabled.\n         *\n         * @protected\n         */\n        _lastTabIndex: {\n          type: Number,\n        },\n      };\n    }\n\n    /**\n     * When the element gets disabled, the observer saves the last known tabindex\n     * and makes the element not focusable by setting tabindex to -1.\n     * As soon as the element gets enabled, the observer restores the last known tabindex\n     * so that the element can be focusable again.\n     *\n     * @protected\n     * @override\n     */\n    _disabledChanged(disabled, oldDisabled) {\n      super._disabledChanged(disabled, oldDisabled);\n\n      if (disabled) {\n        if (this.tabindex !== undefined) {\n          this._lastTabIndex = this.tabindex;\n        }\n        this.tabindex = -1;\n      } else if (oldDisabled) {\n        this.tabindex = this._lastTabIndex;\n      }\n    }\n\n    /**\n     * When the user has changed tabindex while the element is disabled,\n     * the observer reverts tabindex to -1 and rather saves the new tabindex value to apply it later.\n     * The new value will be applied as soon as the element becomes enabled.\n     *\n     * @protected\n     */\n    _tabindexChanged(tabindex) {\n      if (this.disabled && tabindex !== -1) {\n        this._lastTabIndex = tabindex;\n        this.tabindex = -1;\n      }\n    }\n  };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,qBAAqB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAIC,UAAU,IACtC,MAAMC,kBAAkB,SAASH,aAAa,CAACE,UAAU,CAAC,CAAC;EACzD,WAAWE,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACR;AACA;AACA;AACA;MACQC,QAAQ,EAAE;QACRC,IAAI,EAAEC,MAAM;QACZC,kBAAkB,EAAE,IAAI;QACxBC,QAAQ,EAAE;MACZ,CAAC;MAED;AACR;AACA;AACA;AACA;MACQC,aAAa,EAAE;QACbJ,IAAI,EAAEC;MACR;IACF,CAAC;EACH;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,gBAAgBA,CAACC,QAAQ,EAAEC,WAAW,EAAE;IACtC,KAAK,CAACF,gBAAgB,CAACC,QAAQ,EAAEC,WAAW,CAAC;IAE7C,IAAID,QAAQ,EAAE;MACZ,IAAI,IAAI,CAACP,QAAQ,KAAKS,SAAS,EAAE;QAC/B,IAAI,CAACJ,aAAa,GAAG,IAAI,CAACL,QAAQ;MACpC;MACA,IAAI,CAACA,QAAQ,GAAG,CAAC,CAAC;IACpB,CAAC,MAAM,IAAIQ,WAAW,EAAE;MACtB,IAAI,CAACR,QAAQ,GAAG,IAAI,CAACK,aAAa;IACpC;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,gBAAgBA,CAACV,QAAQ,EAAE;IACzB,IAAI,IAAI,CAACO,QAAQ,IAAIP,QAAQ,KAAK,CAAC,CAAC,EAAE;MACpC,IAAI,CAACK,aAAa,GAAGL,QAAQ;MAC7B,IAAI,CAACA,QAAQ,GAAG,CAAC,CAAC;IACpB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}