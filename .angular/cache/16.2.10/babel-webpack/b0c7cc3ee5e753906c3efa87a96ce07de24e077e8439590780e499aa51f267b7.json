{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2022 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from './slot-controller.js';\n\n/**\n * A controller that manages the slotted tooltip element.\n */\nexport class TooltipController extends SlotController {\n  constructor(host) {\n    // Do not provide slot factory to create tooltip lazily.\n    super(host, 'tooltip');\n    this.setTarget(host);\n  }\n\n  /**\n   * Override to initialize the newly added custom tooltip.\n   *\n   * @param {Node} tooltipNode\n   * @protected\n   * @override\n   */\n  initCustomNode(tooltipNode) {\n    tooltipNode.target = this.target;\n    if (this.ariaTarget !== undefined) {\n      tooltipNode.ariaTarget = this.ariaTarget;\n    }\n    if (this.context !== undefined) {\n      tooltipNode.context = this.context;\n    }\n    if (this.manual !== undefined) {\n      tooltipNode.manual = this.manual;\n    }\n    if (this.opened !== undefined) {\n      tooltipNode.opened = this.opened;\n    }\n    if (this.position !== undefined) {\n      tooltipNode._position = this.position;\n    }\n    if (this.shouldShow !== undefined) {\n      tooltipNode.shouldShow = this.shouldShow;\n    }\n    this.__notifyChange();\n  }\n\n  /**\n   * Override to notify the host when the tooltip is removed.\n   *\n   * @param {Node} tooltipNode\n   * @protected\n   * @override\n   */\n  teardownNode() {\n    this.__notifyChange();\n  }\n\n  /**\n   * Set an HTML element for linking with the tooltip overlay\n   * via `aria-describedby` attribute used by screen readers.\n   * @param {HTMLElement} ariaTarget\n   */\n  setAriaTarget(ariaTarget) {\n    this.ariaTarget = ariaTarget;\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.ariaTarget = ariaTarget;\n    }\n  }\n\n  /**\n   * Set a context object to be used by generator.\n   * @param {object} context\n   */\n  setContext(context) {\n    this.context = context;\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.context = context;\n    }\n  }\n\n  /**\n   * Toggle manual state on the slotted tooltip.\n   * @param {boolean} manual\n   */\n  setManual(manual) {\n    this.manual = manual;\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.manual = manual;\n    }\n  }\n\n  /**\n   * Toggle opened state on the slotted tooltip.\n   * @param {boolean} opened\n   */\n  setOpened(opened) {\n    this.opened = opened;\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.opened = opened;\n    }\n  }\n\n  /**\n   * Set default position for the slotted tooltip.\n   * This can be overridden by setting the position\n   * using corresponding property or attribute.\n   * @param {string} position\n   */\n  setPosition(position) {\n    this.position = position;\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode._position = position;\n    }\n  }\n\n  /**\n   * Set function used to detect whether to show\n   * the tooltip based on a condition.\n   * @param {Function} shouldShow\n   */\n  setShouldShow(shouldShow) {\n    this.shouldShow = shouldShow;\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.shouldShow = shouldShow;\n    }\n  }\n\n  /**\n   * Set an HTML element to attach the tooltip to.\n   * @param {HTMLElement} target\n   */\n  setTarget(target) {\n    this.target = target;\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.target = target;\n    }\n  }\n\n  /** @private */\n  __notifyChange() {\n    this.dispatchEvent(new CustomEvent('tooltip-changed', {\n      detail: {\n        node: this.node\n      }\n    }));\n  }\n}","map":{"version":3,"names":["SlotController","TooltipController","constructor","host","setTarget","initCustomNode","tooltipNode","target","ariaTarget","undefined","context","manual","opened","position","_position","shouldShow","__notifyChange","teardownNode","setAriaTarget","node","setContext","setManual","setOpened","setPosition","setShouldShow","dispatchEvent","CustomEvent","detail"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/component-base/src/tooltip-controller.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2022 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from './slot-controller.js';\n\n/**\n * A controller that manages the slotted tooltip element.\n */\nexport class TooltipController extends SlotController {\n  constructor(host) {\n    // Do not provide slot factory to create tooltip lazily.\n    super(host, 'tooltip');\n\n    this.setTarget(host);\n  }\n\n  /**\n   * Override to initialize the newly added custom tooltip.\n   *\n   * @param {Node} tooltipNode\n   * @protected\n   * @override\n   */\n  initCustomNode(tooltipNode) {\n    tooltipNode.target = this.target;\n\n    if (this.ariaTarget !== undefined) {\n      tooltipNode.ariaTarget = this.ariaTarget;\n    }\n\n    if (this.context !== undefined) {\n      tooltipNode.context = this.context;\n    }\n\n    if (this.manual !== undefined) {\n      tooltipNode.manual = this.manual;\n    }\n\n    if (this.opened !== undefined) {\n      tooltipNode.opened = this.opened;\n    }\n\n    if (this.position !== undefined) {\n      tooltipNode._position = this.position;\n    }\n\n    if (this.shouldShow !== undefined) {\n      tooltipNode.shouldShow = this.shouldShow;\n    }\n\n    this.__notifyChange();\n  }\n\n  /**\n   * Override to notify the host when the tooltip is removed.\n   *\n   * @param {Node} tooltipNode\n   * @protected\n   * @override\n   */\n  teardownNode() {\n    this.__notifyChange();\n  }\n\n  /**\n   * Set an HTML element for linking with the tooltip overlay\n   * via `aria-describedby` attribute used by screen readers.\n   * @param {HTMLElement} ariaTarget\n   */\n  setAriaTarget(ariaTarget) {\n    this.ariaTarget = ariaTarget;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.ariaTarget = ariaTarget;\n    }\n  }\n\n  /**\n   * Set a context object to be used by generator.\n   * @param {object} context\n   */\n  setContext(context) {\n    this.context = context;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.context = context;\n    }\n  }\n\n  /**\n   * Toggle manual state on the slotted tooltip.\n   * @param {boolean} manual\n   */\n  setManual(manual) {\n    this.manual = manual;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.manual = manual;\n    }\n  }\n\n  /**\n   * Toggle opened state on the slotted tooltip.\n   * @param {boolean} opened\n   */\n  setOpened(opened) {\n    this.opened = opened;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.opened = opened;\n    }\n  }\n\n  /**\n   * Set default position for the slotted tooltip.\n   * This can be overridden by setting the position\n   * using corresponding property or attribute.\n   * @param {string} position\n   */\n  setPosition(position) {\n    this.position = position;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode._position = position;\n    }\n  }\n\n  /**\n   * Set function used to detect whether to show\n   * the tooltip based on a condition.\n   * @param {Function} shouldShow\n   */\n  setShouldShow(shouldShow) {\n    this.shouldShow = shouldShow;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.shouldShow = shouldShow;\n    }\n  }\n\n  /**\n   * Set an HTML element to attach the tooltip to.\n   * @param {HTMLElement} target\n   */\n  setTarget(target) {\n    this.target = target;\n\n    const tooltipNode = this.node;\n    if (tooltipNode) {\n      tooltipNode.target = target;\n    }\n  }\n\n  /** @private */\n  __notifyChange() {\n    this.dispatchEvent(new CustomEvent('tooltip-changed', { detail: { node: this.node } }));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}