{"ast":null,"code":"const DEV_MODE_CODE_REGEXP = /\\/\\*\\*\\s+vaadin-dev-mode:start([\\s\\S]*)vaadin-dev-mode:end\\s+\\*\\*\\//i;\nconst FlowClients = window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients;\nfunction isMinified() {\n  function test() {\n    /** vaadin-dev-mode:start\n    return false;\n    vaadin-dev-mode:end **/\n    return true;\n  }\n  return uncommentAndRun(test);\n}\nfunction isDevelopmentMode() {\n  try {\n    if (isForcedDevelopmentMode()) {\n      return true;\n    }\n    if (!isLocalhost()) {\n      return false;\n    }\n    if (FlowClients) {\n      return !isFlowProductionMode();\n    }\n    return !isMinified();\n  } catch (e) {\n    // Some error in this code, assume production so no further actions will be taken\n    return false;\n  }\n}\nfunction isForcedDevelopmentMode() {\n  return localStorage.getItem(\"vaadin.developmentmode.force\");\n}\nfunction isLocalhost() {\n  return [\"localhost\", \"127.0.0.1\"].indexOf(window.location.hostname) >= 0;\n}\nfunction isFlowProductionMode() {\n  if (FlowClients) {\n    const productionModeApps = Object.keys(FlowClients).map(key => FlowClients[key]).filter(client => client.productionMode);\n    if (productionModeApps.length > 0) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction uncommentAndRun(callback, args) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n  const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());\n  if (match) {\n    try {\n      // requires CSP: script-src 'unsafe-eval'\n      callback = new Function(match[1]);\n    } catch (e) {\n      // eat the exception\n      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e);\n    }\n  }\n  return callback(args);\n}\n\n// A guard against polymer-modulizer removing the window.Vaadin\n// initialization above.\nwindow['Vaadin'] = window['Vaadin'] || {};\n\n/**\n * Inspects the source code of the given `callback` function for\n * specially-marked _commented_ code. If such commented code is found in the\n * callback source, uncomments and runs that code instead of the callback\n * itself. Otherwise runs the callback as is.\n *\n * The optional arguments are passed into the callback / uncommented code,\n * the result is returned.\n *\n * See the `isMinified()` function source code in this file for an example.\n *\n */\nexport const runIfDevelopmentMode = function (callback, args) {\n  if (window.Vaadin.developmentMode) {\n    return uncommentAndRun(callback, args);\n  }\n};\nif (window.Vaadin.developmentMode === undefined) {\n  window.Vaadin.developmentMode = isDevelopmentMode();\n}","map":{"version":3,"names":["DEV_MODE_CODE_REGEXP","FlowClients","window","Vaadin","Flow","clients","isMinified","test","uncommentAndRun","isDevelopmentMode","isForcedDevelopmentMode","isLocalhost","isFlowProductionMode","e","localStorage","getItem","indexOf","location","hostname","productionModeApps","Object","keys","map","key","filter","client","productionMode","length","callback","args","match","exec","toString","Function","console","log","runIfDevelopmentMode","developmentMode","undefined"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/vaadin-development-mode-detector/vaadin-development-mode-detector.js"],"sourcesContent":["const DEV_MODE_CODE_REGEXP =\n  /\\/\\*\\*\\s+vaadin-dev-mode:start([\\s\\S]*)vaadin-dev-mode:end\\s+\\*\\*\\//i;\n\nconst FlowClients = window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients;\n\nfunction isMinified() {\n  function test() {\n    /** vaadin-dev-mode:start\n    return false;\n    vaadin-dev-mode:end **/\n    return true;\n  }\n  return uncommentAndRun(test);\n}\n\nfunction isDevelopmentMode() {\n  try {\n    if (isForcedDevelopmentMode()) {\n      return true;\n    }\n\n    if (!isLocalhost()) {\n      return false;\n    }\n\n    if (FlowClients) {\n      return !isFlowProductionMode();\n    }\n\n    return !isMinified();\n  } catch (e) {\n    // Some error in this code, assume production so no further actions will be taken\n    return false;\n  }\n}\n\nfunction isForcedDevelopmentMode() {\n  return localStorage.getItem(\"vaadin.developmentmode.force\");\n}\n\nfunction isLocalhost() {\n  return ([\"localhost\",\"127.0.0.1\"].indexOf(window.location.hostname) >= 0);\n}\n\nfunction isFlowProductionMode() {\n  if (FlowClients) {\n    const productionModeApps = Object.keys(FlowClients)\n      .map(key => FlowClients[key])\n      .filter(client => client.productionMode);\n    if (productionModeApps.length > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction uncommentAndRun(callback, args) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());\n  if (match) {\n    try {\n      // requires CSP: script-src 'unsafe-eval'\n      callback = new Function(match[1]);\n    } catch (e) {\n      // eat the exception\n      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e)\n    }\n  }\n\n  return callback(args);\n}\n\n// A guard against polymer-modulizer removing the window.Vaadin\n// initialization above.\nwindow['Vaadin'] = window['Vaadin'] || {};\n\n/**\n * Inspects the source code of the given `callback` function for\n * specially-marked _commented_ code. If such commented code is found in the\n * callback source, uncomments and runs that code instead of the callback\n * itself. Otherwise runs the callback as is.\n *\n * The optional arguments are passed into the callback / uncommented code,\n * the result is returned.\n *\n * See the `isMinified()` function source code in this file for an example.\n *\n */\nexport const runIfDevelopmentMode = function(callback, args) {\n  if (window.Vaadin.developmentMode) {\n    return uncommentAndRun(callback, args);\n  }\n};\n\nif (window.Vaadin.developmentMode === undefined) {\n  window.Vaadin.developmentMode = isDevelopmentMode();\n}\n"],"mappings":"AAAA,MAAMA,oBAAoB,GACxB,sEAAsE;AAExE,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACC,IAAI,IAAIF,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,OAAO;AAErF,SAASC,UAAUA,CAAA,EAAG;EACpB,SAASC,IAAIA,CAAA,EAAG;IACd;AACJ;AACA;IACI,OAAO,IAAI;EACb;EACA,OAAOC,eAAe,CAACD,IAAI,CAAC;AAC9B;AAEA,SAASE,iBAAiBA,CAAA,EAAG;EAC3B,IAAI;IACF,IAAIC,uBAAuB,CAAC,CAAC,EAAE;MAC7B,OAAO,IAAI;IACb;IAEA,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;MAClB,OAAO,KAAK;IACd;IAEA,IAAIV,WAAW,EAAE;MACf,OAAO,CAACW,oBAAoB,CAAC,CAAC;IAChC;IAEA,OAAO,CAACN,UAAU,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOO,CAAC,EAAE;IACV;IACA,OAAO,KAAK;EACd;AACF;AAEA,SAASH,uBAAuBA,CAAA,EAAG;EACjC,OAAOI,YAAY,CAACC,OAAO,CAAC,8BAA8B,CAAC;AAC7D;AAEA,SAASJ,WAAWA,CAAA,EAAG;EACrB,OAAQ,CAAC,WAAW,EAAC,WAAW,CAAC,CAACK,OAAO,CAACd,MAAM,CAACe,QAAQ,CAACC,QAAQ,CAAC,IAAI,CAAC;AAC1E;AAEA,SAASN,oBAAoBA,CAAA,EAAG;EAC9B,IAAIX,WAAW,EAAE;IACf,MAAMkB,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CAACpB,WAAW,CAAC,CAChDqB,GAAG,CAACC,GAAG,IAAItB,WAAW,CAACsB,GAAG,CAAC,CAAC,CAC5BC,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,cAAc,CAAC;IAC1C,IAAIP,kBAAkB,CAACQ,MAAM,GAAG,CAAC,EAAE;MACjC,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd;AAEA,SAASnB,eAAeA,CAACoB,QAAQ,EAAEC,IAAI,EAAE;EACvC,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;IAClC;EACF;EAEA,MAAME,KAAK,GAAG9B,oBAAoB,CAAC+B,IAAI,CAACH,QAAQ,CAACI,QAAQ,CAAC,CAAC,CAAC;EAC5D,IAAIF,KAAK,EAAE;IACT,IAAI;MACF;MACAF,QAAQ,GAAG,IAAIK,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOjB,CAAC,EAAE;MACV;MACAqB,OAAO,CAACC,GAAG,CAAC,4DAA4D,EAAEtB,CAAC,CAAC;IAC9E;EACF;EAEA,OAAOe,QAAQ,CAACC,IAAI,CAAC;AACvB;;AAEA;AACA;AACA3B,MAAM,CAAC,QAAQ,CAAC,GAAGA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkC,oBAAoB,GAAG,SAAAA,CAASR,QAAQ,EAAEC,IAAI,EAAE;EAC3D,IAAI3B,MAAM,CAACC,MAAM,CAACkC,eAAe,EAAE;IACjC,OAAO7B,eAAe,CAACoB,QAAQ,EAAEC,IAAI,CAAC;EACxC;AACF,CAAC;AAED,IAAI3B,MAAM,CAACC,MAAM,CAACkC,eAAe,KAAKC,SAAS,EAAE;EAC/CpC,MAAM,CAACC,MAAM,CAACkC,eAAe,GAAG5B,iBAAiB,CAAC,CAAC;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}