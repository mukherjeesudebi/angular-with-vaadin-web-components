{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { SlotStylesMixin } from '@vaadin/component-base/src/slot-styles-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { IconFontSizeMixin } from './vaadin-icon-font-size-mixin.js';\nimport { ensureSvgLiteral, renderSvg, unsafeSvgLiteral } from './vaadin-icon-svg.js';\nimport { Iconset } from './vaadin-iconset.js';\nconst srcCache = new Map();\n\n/**\n * `<vaadin-icon>` is a Web Component for displaying SVG icons.\n *\n * ### Icon property\n *\n * The `<vaadin-icon>` component is designed to be used as a drop-in replacement for `<iron-icon>`.\n * For example, you can use it with `vaadin-icons` like this:\n *\n * ```html\n * <vaadin-icon icon=\"vaadin:angle-down\"></vaadin-icon>\n * ```\n *\n * Alternatively, you can also pick one of the Lumo icons:\n *\n * ```html\n * <vaadin-icon icon=\"lumo:user\"></vaadin-icon>\n * ```\n *\n * ### Custom SVG icon\n *\n * Alternatively, instead of selecting an icon from an iconset by name, you can pass any custom `svg`\n * literal using the [`svg`](#/elements/vaadin-icon#property-svg) property. In this case you can also\n * define the size of the SVG `viewBox` using the [`size`](#/elements/vaadin-icon#property-size) property:\n *\n * ```js\n * import { html, svg } from 'lit';\n *\n * // in your component\n * render() {\n *   const svgIcon = svg`<path d=\"M13 4v2l-5 5-5-5v-2l5 5z\"></path>`;\n *   return html`\n *     <vaadin-icon\n *       .svg=\"${svgIcon}\"\n *       size=\"16\"\n *     ></vaadin-icon>\n *   `;\n * }\n * ```\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ControllerMixin\n * @mixes ThemableMixin\n * @mixes ElementMixin\n * @mixes SlotStylesMixin\n * @mixes IconFontSizeMixin\n */\nclass Icon extends ThemableMixin(ElementMixin(ControllerMixin(SlotStylesMixin(IconFontSizeMixin(PolymerElement))))) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          box-sizing: border-box;\n          vertical-align: middle;\n          width: 24px;\n          height: 24px;\n          fill: currentColor;\n          container-type: size;\n        }\n\n        :host::after,\n        :host::before {\n          line-height: 1;\n          font-size: 100cqh;\n          -webkit-font-smoothing: antialiased;\n          text-rendering: optimizeLegibility;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        svg {\n          display: block;\n          width: 100%;\n          height: 100%;\n        }\n\n        :host(:is([icon-class], [font-icon-content])) svg {\n          display: none;\n        }\n\n        :host([font-icon-content])::before {\n          content: attr(font-icon-content);\n        }\n      </style>\n      <svg\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        viewBox=\"[[__computeViewBox(size, __viewBox)]]\"\n        preserveAspectRatio=\"[[__computePAR(__defaultPAR, __preserveAspectRatio)]]\"\n        fill$=\"[[__fill]]\"\n        stroke$=\"[[__stroke]]\"\n        stroke-width$=\"[[__strokeWidth]]\"\n        stroke-linecap$=\"[[__strokeLinecap]]\"\n        stroke-linejoin$=\"[[__strokeLinejoin]]\"\n        aria-hidden=\"true\"\n      >\n        <g id=\"svg-group\"></g>\n        <g id=\"use-group\" visibility$=\"[[__computeVisibility(__useRef, svg)]]\">\n          <use href$=\"[[__useRef]]\" />\n        </g>\n      </svg>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n  static get is() {\n    return 'vaadin-icon';\n  }\n  static get properties() {\n    return {\n      /**\n       * The name of the icon to use. The name should be of the form:\n       * `iconset_name:icon_name`. When using `vaadin-icons` it is possible\n       * to omit the first part and only use `icon_name` as a value.\n       *\n       * Setting the `icon` property updates the `svg` and `size` based on the\n       * values provided by the corresponding `vaadin-iconset` element.\n       *\n       * See also [`name`](#/elements/vaadin-iconset#property-name) property of `vaadin-iconset`.\n       *\n       * @attr {string} icon\n       * @type {string}\n       */\n      icon: {\n        type: String,\n        reflectToAttribute: true,\n        observer: '__iconChanged'\n      },\n      /**\n       * The SVG icon wrapped in a Lit template literal.\n       */\n      svg: {\n        type: Object\n      },\n      /**\n       * The SVG source to be loaded as the icon. It can be:\n       * - an URL to a file containing the icon\n       * - an URL in the format \"/path/to/file.svg#objectID\", where the \"objectID\" refers to an ID attribute contained\n       *   inside the SVG referenced by the path. Note that the file needs to follow the same-origin policy.\n       * - a string in the format \"data:image/svg+xml,<svg>...</svg>\". You may need to use the \"encodeURIComponent\"\n       *   function for the SVG content passed\n       *\n       * @type {string}\n       */\n      src: {\n        type: String\n      },\n      /**\n       * The symbol identifier that references an ID of an element contained in the SVG element assigned to the\n       * `src` property\n       *\n       * @type {string}\n       */\n      symbol: {\n        type: String\n      },\n      /**\n       * Class names defining an icon font and/or a specific glyph inside an icon font.\n       *\n       * Example: \"fa-solid fa-user\"\n       *\n       * @attr {string} icon-class\n       * @type {string}\n       */\n      iconClass: {\n        type: String,\n        reflectToAttribute: true\n      },\n      /**\n       * A hexadecimal code point that specifies a glyph from an icon font.\n       *\n       * Example: \"e001\"\n       *\n       * @type {string}\n       */\n      char: {\n        type: String\n      },\n      /**\n       * A ligature name that specifies an icon from an icon font with support for ligatures.\n       *\n       * Example: \"home\".\n       *\n       * @type {string}\n       */\n      ligature: {\n        type: String\n      },\n      /**\n       * The font family to use for the font icon.\n       *\n       * @type {string}\n       */\n      fontFamily: {\n        type: String,\n        observer: '__fontFamilyChanged'\n      },\n      /**\n       * The size of an icon, used to set the `viewBox` attribute.\n       */\n      size: {\n        type: Number,\n        value: 24\n      },\n      /** @private */\n      __defaultPAR: {\n        type: String,\n        value: 'xMidYMid meet'\n      },\n      /** @private */\n      __preserveAspectRatio: String,\n      /** @private */\n      __useRef: Object,\n      /** @private */\n      __svgElement: String,\n      /** @private */\n      __viewBox: String,\n      /** @private */\n      __fill: String,\n      /** @private */\n      __stroke: String,\n      /** @private */\n      __strokeWidth: String,\n      /** @private */\n      __strokeLinecap: String,\n      /** @private */\n      __strokeLinejoin: String\n    };\n  }\n  static get observers() {\n    return ['__svgChanged(svg, __svgElement)', '__fontChanged(iconClass, char, ligature)', '__srcChanged(src, symbol)'];\n  }\n  static get observedAttributes() {\n    return [...super.observedAttributes, 'class'];\n  }\n  constructor() {\n    super();\n    this.__fetch = fetch.bind(window);\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [`\n        ${tag}[icon-class] {\n          display: inline-flex;\n          vertical-align: middle;\n          font-size: inherit;\n        }\n      `];\n  }\n\n  /** @private */\n  get __iconClasses() {\n    return this.iconClass ? this.iconClass.split(' ') : [];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.__svgElement = this.shadowRoot.querySelector('#svg-group');\n    this._tooltipController = new TooltipController(this);\n    this.addController(this._tooltipController);\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n    Iconset.attachedIcons.add(this);\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    Iconset.attachedIcons.delete(this);\n  }\n\n  /** @protected */\n  _applyIcon() {\n    const {\n      preserveAspectRatio,\n      svg,\n      size,\n      viewBox\n    } = Iconset.getIconSvg(this.icon);\n    if (viewBox) {\n      this.__viewBox = viewBox;\n    }\n    if (preserveAspectRatio) {\n      this.__preserveAspectRatio = preserveAspectRatio;\n    }\n    if (size && size !== this.size) {\n      this.size = size;\n    }\n    this.svg = svg;\n  }\n\n  /** @private */\n  __iconChanged(icon) {\n    if (icon) {\n      this._applyIcon();\n    } else {\n      this.svg = ensureSvgLiteral(null);\n    }\n  }\n\n  /** @private */\n  __srcChanged(src, symbol) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!src) {\n        _this.svg = null;\n        return;\n      }\n\n      // Need to add the \"icon\" attribute to avoid issues as described in\n      // https://github.com/vaadin/web-components/issues/6301\n      _this.icon = '';\n      if (!src.startsWith('data:') && (symbol || src.includes('#'))) {\n        const [path, iconId] = src.split('#');\n        _this.__useRef = `${path}#${symbol || iconId}`;\n      } else {\n        try {\n          if (!srcCache.has(src)) {\n            srcCache.set(src, _this.__fetch(src, {\n              mode: 'cors'\n            }).then(data => {\n              if (!data.ok) {\n                throw new Error('Error loading icon');\n              }\n              return data.text();\n            }));\n          }\n          const svgData = yield srcCache.get(src);\n          if (!Icon.__domParser) {\n            Icon.__domParser = new DOMParser();\n          }\n          const parsedResponse = Icon.__domParser.parseFromString(svgData, 'text/html');\n          const svgElement = parsedResponse.querySelector('svg');\n          if (!svgElement) {\n            throw new Error(`SVG element not found on path: ${src}`);\n          }\n          _this.svg = unsafeSvgLiteral(svgElement.innerHTML);\n          if (symbol) {\n            _this.__useRef = `#${symbol}`;\n          }\n          _this.__viewBox = svgElement.getAttribute('viewBox');\n          _this.__fill = svgElement.getAttribute('fill');\n          _this.__stroke = svgElement.getAttribute('stroke');\n          _this.__strokeWidth = svgElement.getAttribute('stroke-width');\n          _this.__strokeLinecap = svgElement.getAttribute('stroke-linecap');\n          _this.__strokeLinejoin = svgElement.getAttribute('stroke-linejoin');\n        } catch (e) {\n          console.error(e);\n          _this.svg = null;\n        }\n      }\n    })();\n  }\n\n  /** @private */\n  __svgChanged(svg, svgElement) {\n    if (!svgElement) {\n      return;\n    }\n    renderSvg(svg, svgElement);\n  }\n\n  /** @private */\n  __computePAR(defaultPAR, preserveAspectRatio) {\n    return preserveAspectRatio || defaultPAR;\n  }\n\n  /** @private */\n  __computeVisibility(__useRef) {\n    return __useRef ? 'visible' : 'hidden';\n  }\n\n  /** @private */\n  __computeViewBox(size, viewBox) {\n    return viewBox || `0 0 ${size} ${size}`;\n  }\n\n  /** @private */\n  __fontChanged(iconClass, char, ligature) {\n    this.classList.remove(...(this.__addedIconClasses || []));\n    if (iconClass) {\n      this.__addedIconClasses = [...this.__iconClasses];\n      this.classList.add(...this.__addedIconClasses);\n    }\n    if (char) {\n      this.setAttribute('font-icon-content', char.length > 1 ? String.fromCodePoint(parseInt(char, 16)) : char);\n    } else if (ligature) {\n      this.setAttribute('font-icon-content', ligature);\n    } else {\n      this.removeAttribute('font-icon-content');\n    }\n    if ((iconClass || char || ligature) && !this.icon) {\n      // The \"icon\" attribute needs to be set on the host also when using font icons\n      // to avoid issues such as https://github.com/vaadin/web-components/issues/6301\n      this.icon = '';\n    }\n  }\n\n  /** @protected */\n  attributeChangedCallback(name, oldValue, newValue) {\n    super.attributeChangedCallback(name, oldValue, newValue);\n\n    // Make sure class list always contains all the font class names\n    if (name === 'class' && this.__iconClasses.some(className => !this.classList.contains(className))) {\n      this.classList.add(...this.__iconClasses);\n    }\n  }\n\n  /** @private */\n  __fontFamilyChanged(fontFamily) {\n    this.style.fontFamily = `'${fontFamily}'`;\n  }\n}\ndefineCustomElement(Icon);\nexport { Icon };","map":{"version":3,"names":["html","PolymerElement","ControllerMixin","defineCustomElement","ElementMixin","SlotStylesMixin","TooltipController","ThemableMixin","IconFontSizeMixin","ensureSvgLiteral","renderSvg","unsafeSvgLiteral","Iconset","srcCache","Map","Icon","template","is","properties","icon","type","String","reflectToAttribute","observer","svg","Object","src","symbol","iconClass","char","ligature","fontFamily","size","Number","value","__defaultPAR","__preserveAspectRatio","__useRef","__svgElement","__viewBox","__fill","__stroke","__strokeWidth","__strokeLinecap","__strokeLinejoin","observers","observedAttributes","constructor","__fetch","fetch","bind","window","slotStyles","tag","localName","__iconClasses","split","ready","shadowRoot","querySelector","_tooltipController","addController","connectedCallback","attachedIcons","add","disconnectedCallback","delete","_applyIcon","preserveAspectRatio","viewBox","getIconSvg","__iconChanged","__srcChanged","_this","_asyncToGenerator","startsWith","includes","path","iconId","has","set","mode","then","data","ok","Error","text","svgData","get","__domParser","DOMParser","parsedResponse","parseFromString","svgElement","innerHTML","getAttribute","e","console","error","__svgChanged","__computePAR","defaultPAR","__computeVisibility","__computeViewBox","__fontChanged","classList","remove","__addedIconClasses","setAttribute","length","fromCodePoint","parseInt","removeAttribute","attributeChangedCallback","name","oldValue","newValue","some","className","contains","__fontFamilyChanged","style"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/icon/src/vaadin-icon.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { SlotStylesMixin } from '@vaadin/component-base/src/slot-styles-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { IconFontSizeMixin } from './vaadin-icon-font-size-mixin.js';\nimport { ensureSvgLiteral, renderSvg, unsafeSvgLiteral } from './vaadin-icon-svg.js';\nimport { Iconset } from './vaadin-iconset.js';\n\nconst srcCache = new Map();\n\n/**\n * `<vaadin-icon>` is a Web Component for displaying SVG icons.\n *\n * ### Icon property\n *\n * The `<vaadin-icon>` component is designed to be used as a drop-in replacement for `<iron-icon>`.\n * For example, you can use it with `vaadin-icons` like this:\n *\n * ```html\n * <vaadin-icon icon=\"vaadin:angle-down\"></vaadin-icon>\n * ```\n *\n * Alternatively, you can also pick one of the Lumo icons:\n *\n * ```html\n * <vaadin-icon icon=\"lumo:user\"></vaadin-icon>\n * ```\n *\n * ### Custom SVG icon\n *\n * Alternatively, instead of selecting an icon from an iconset by name, you can pass any custom `svg`\n * literal using the [`svg`](#/elements/vaadin-icon#property-svg) property. In this case you can also\n * define the size of the SVG `viewBox` using the [`size`](#/elements/vaadin-icon#property-size) property:\n *\n * ```js\n * import { html, svg } from 'lit';\n *\n * // in your component\n * render() {\n *   const svgIcon = svg`<path d=\"M13 4v2l-5 5-5-5v-2l5 5z\"></path>`;\n *   return html`\n *     <vaadin-icon\n *       .svg=\"${svgIcon}\"\n *       size=\"16\"\n *     ></vaadin-icon>\n *   `;\n * }\n * ```\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ControllerMixin\n * @mixes ThemableMixin\n * @mixes ElementMixin\n * @mixes SlotStylesMixin\n * @mixes IconFontSizeMixin\n */\nclass Icon extends ThemableMixin(ElementMixin(ControllerMixin(SlotStylesMixin(IconFontSizeMixin(PolymerElement))))) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          box-sizing: border-box;\n          vertical-align: middle;\n          width: 24px;\n          height: 24px;\n          fill: currentColor;\n          container-type: size;\n        }\n\n        :host::after,\n        :host::before {\n          line-height: 1;\n          font-size: 100cqh;\n          -webkit-font-smoothing: antialiased;\n          text-rendering: optimizeLegibility;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        svg {\n          display: block;\n          width: 100%;\n          height: 100%;\n        }\n\n        :host(:is([icon-class], [font-icon-content])) svg {\n          display: none;\n        }\n\n        :host([font-icon-content])::before {\n          content: attr(font-icon-content);\n        }\n      </style>\n      <svg\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        viewBox=\"[[__computeViewBox(size, __viewBox)]]\"\n        preserveAspectRatio=\"[[__computePAR(__defaultPAR, __preserveAspectRatio)]]\"\n        fill$=\"[[__fill]]\"\n        stroke$=\"[[__stroke]]\"\n        stroke-width$=\"[[__strokeWidth]]\"\n        stroke-linecap$=\"[[__strokeLinecap]]\"\n        stroke-linejoin$=\"[[__strokeLinejoin]]\"\n        aria-hidden=\"true\"\n      >\n        <g id=\"svg-group\"></g>\n        <g id=\"use-group\" visibility$=\"[[__computeVisibility(__useRef, svg)]]\">\n          <use href$=\"[[__useRef]]\" />\n        </g>\n      </svg>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-icon';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the icon to use. The name should be of the form:\n       * `iconset_name:icon_name`. When using `vaadin-icons` it is possible\n       * to omit the first part and only use `icon_name` as a value.\n       *\n       * Setting the `icon` property updates the `svg` and `size` based on the\n       * values provided by the corresponding `vaadin-iconset` element.\n       *\n       * See also [`name`](#/elements/vaadin-iconset#property-name) property of `vaadin-iconset`.\n       *\n       * @attr {string} icon\n       * @type {string}\n       */\n      icon: {\n        type: String,\n        reflectToAttribute: true,\n        observer: '__iconChanged',\n      },\n\n      /**\n       * The SVG icon wrapped in a Lit template literal.\n       */\n      svg: {\n        type: Object,\n      },\n\n      /**\n       * The SVG source to be loaded as the icon. It can be:\n       * - an URL to a file containing the icon\n       * - an URL in the format \"/path/to/file.svg#objectID\", where the \"objectID\" refers to an ID attribute contained\n       *   inside the SVG referenced by the path. Note that the file needs to follow the same-origin policy.\n       * - a string in the format \"data:image/svg+xml,<svg>...</svg>\". You may need to use the \"encodeURIComponent\"\n       *   function for the SVG content passed\n       *\n       * @type {string}\n       */\n      src: {\n        type: String,\n      },\n\n      /**\n       * The symbol identifier that references an ID of an element contained in the SVG element assigned to the\n       * `src` property\n       *\n       * @type {string}\n       */\n      symbol: {\n        type: String,\n      },\n\n      /**\n       * Class names defining an icon font and/or a specific glyph inside an icon font.\n       *\n       * Example: \"fa-solid fa-user\"\n       *\n       * @attr {string} icon-class\n       * @type {string}\n       */\n      iconClass: {\n        type: String,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * A hexadecimal code point that specifies a glyph from an icon font.\n       *\n       * Example: \"e001\"\n       *\n       * @type {string}\n       */\n      char: {\n        type: String,\n      },\n\n      /**\n       * A ligature name that specifies an icon from an icon font with support for ligatures.\n       *\n       * Example: \"home\".\n       *\n       * @type {string}\n       */\n      ligature: {\n        type: String,\n      },\n\n      /**\n       * The font family to use for the font icon.\n       *\n       * @type {string}\n       */\n      fontFamily: {\n        type: String,\n        observer: '__fontFamilyChanged',\n      },\n\n      /**\n       * The size of an icon, used to set the `viewBox` attribute.\n       */\n      size: {\n        type: Number,\n        value: 24,\n      },\n\n      /** @private */\n      __defaultPAR: {\n        type: String,\n        value: 'xMidYMid meet',\n      },\n\n      /** @private */\n      __preserveAspectRatio: String,\n\n      /** @private */\n      __useRef: Object,\n\n      /** @private */\n      __svgElement: String,\n\n      /** @private */\n      __viewBox: String,\n\n      /** @private */\n      __fill: String,\n\n      /** @private */\n      __stroke: String,\n\n      /** @private */\n      __strokeWidth: String,\n\n      /** @private */\n      __strokeLinecap: String,\n\n      /** @private */\n      __strokeLinejoin: String,\n    };\n  }\n\n  static get observers() {\n    return ['__svgChanged(svg, __svgElement)', '__fontChanged(iconClass, char, ligature)', '__srcChanged(src, symbol)'];\n  }\n\n  static get observedAttributes() {\n    return [...super.observedAttributes, 'class'];\n  }\n\n  constructor() {\n    super();\n\n    this.__fetch = fetch.bind(window);\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      `\n        ${tag}[icon-class] {\n          display: inline-flex;\n          vertical-align: middle;\n          font-size: inherit;\n        }\n      `,\n    ];\n  }\n\n  /** @private */\n  get __iconClasses() {\n    return this.iconClass ? this.iconClass.split(' ') : [];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.__svgElement = this.shadowRoot.querySelector('#svg-group');\n\n    this._tooltipController = new TooltipController(this);\n    this.addController(this._tooltipController);\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    Iconset.attachedIcons.add(this);\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    Iconset.attachedIcons.delete(this);\n  }\n\n  /** @protected */\n  _applyIcon() {\n    const { preserveAspectRatio, svg, size, viewBox } = Iconset.getIconSvg(this.icon);\n\n    if (viewBox) {\n      this.__viewBox = viewBox;\n    }\n\n    if (preserveAspectRatio) {\n      this.__preserveAspectRatio = preserveAspectRatio;\n    }\n\n    if (size && size !== this.size) {\n      this.size = size;\n    }\n\n    this.svg = svg;\n  }\n\n  /** @private */\n  __iconChanged(icon) {\n    if (icon) {\n      this._applyIcon();\n    } else {\n      this.svg = ensureSvgLiteral(null);\n    }\n  }\n\n  /** @private */\n  async __srcChanged(src, symbol) {\n    if (!src) {\n      this.svg = null;\n      return;\n    }\n\n    // Need to add the \"icon\" attribute to avoid issues as described in\n    // https://github.com/vaadin/web-components/issues/6301\n    this.icon = '';\n\n    if (!src.startsWith('data:') && (symbol || src.includes('#'))) {\n      const [path, iconId] = src.split('#');\n      this.__useRef = `${path}#${symbol || iconId}`;\n    } else {\n      try {\n        if (!srcCache.has(src)) {\n          srcCache.set(\n            src,\n            this.__fetch(src, { mode: 'cors' }).then((data) => {\n              if (!data.ok) {\n                throw new Error('Error loading icon');\n              }\n              return data.text();\n            }),\n          );\n        }\n        const svgData = await srcCache.get(src);\n\n        if (!Icon.__domParser) {\n          Icon.__domParser = new DOMParser();\n        }\n        const parsedResponse = Icon.__domParser.parseFromString(svgData, 'text/html');\n\n        const svgElement = parsedResponse.querySelector('svg');\n        if (!svgElement) {\n          throw new Error(`SVG element not found on path: ${src}`);\n        }\n\n        this.svg = unsafeSvgLiteral(svgElement.innerHTML);\n\n        if (symbol) {\n          this.__useRef = `#${symbol}`;\n        }\n\n        this.__viewBox = svgElement.getAttribute('viewBox');\n        this.__fill = svgElement.getAttribute('fill');\n        this.__stroke = svgElement.getAttribute('stroke');\n        this.__strokeWidth = svgElement.getAttribute('stroke-width');\n        this.__strokeLinecap = svgElement.getAttribute('stroke-linecap');\n        this.__strokeLinejoin = svgElement.getAttribute('stroke-linejoin');\n      } catch (e) {\n        console.error(e);\n        this.svg = null;\n      }\n    }\n  }\n\n  /** @private */\n  __svgChanged(svg, svgElement) {\n    if (!svgElement) {\n      return;\n    }\n\n    renderSvg(svg, svgElement);\n  }\n\n  /** @private */\n  __computePAR(defaultPAR, preserveAspectRatio) {\n    return preserveAspectRatio || defaultPAR;\n  }\n\n  /** @private */\n  __computeVisibility(__useRef) {\n    return __useRef ? 'visible' : 'hidden';\n  }\n\n  /** @private */\n  __computeViewBox(size, viewBox) {\n    return viewBox || `0 0 ${size} ${size}`;\n  }\n\n  /** @private */\n  __fontChanged(iconClass, char, ligature) {\n    this.classList.remove(...(this.__addedIconClasses || []));\n    if (iconClass) {\n      this.__addedIconClasses = [...this.__iconClasses];\n      this.classList.add(...this.__addedIconClasses);\n    }\n\n    if (char) {\n      this.setAttribute('font-icon-content', char.length > 1 ? String.fromCodePoint(parseInt(char, 16)) : char);\n    } else if (ligature) {\n      this.setAttribute('font-icon-content', ligature);\n    } else {\n      this.removeAttribute('font-icon-content');\n    }\n\n    if ((iconClass || char || ligature) && !this.icon) {\n      // The \"icon\" attribute needs to be set on the host also when using font icons\n      // to avoid issues such as https://github.com/vaadin/web-components/issues/6301\n      this.icon = '';\n    }\n  }\n\n  /** @protected */\n  attributeChangedCallback(name, oldValue, newValue) {\n    super.attributeChangedCallback(name, oldValue, newValue);\n\n    // Make sure class list always contains all the font class names\n    if (name === 'class' && this.__iconClasses.some((className) => !this.classList.contains(className))) {\n      this.classList.add(...this.__iconClasses);\n    }\n  }\n\n  /** @private */\n  __fontFamilyChanged(fontFamily) {\n    this.style.fontFamily = `'${fontFamily}'`;\n  }\n}\n\ndefineCustomElement(Icon);\n\nexport { Icon };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,EAAEC,cAAc,QAAQ,qCAAqC;AAC1E,SAASC,eAAe,QAAQ,gDAAgD;AAChF,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,SAASC,YAAY,QAAQ,6CAA6C;AAC1E,SAASC,eAAe,QAAQ,iDAAiD;AACjF,SAASC,iBAAiB,QAAQ,kDAAkD;AACpF,SAASC,aAAa,QAAQ,wDAAwD;AACtF,SAASC,iBAAiB,QAAQ,kCAAkC;AACpE,SAASC,gBAAgB,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,sBAAsB;AACpF,SAASC,OAAO,QAAQ,qBAAqB;AAE7C,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,SAASR,aAAa,CAACH,YAAY,CAACF,eAAe,CAACG,eAAe,CAACG,iBAAiB,CAACP,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClH,WAAWe,QAAQA,CAAA,EAAG;IACpB,OAAOhB,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACH;EAEA,WAAWiB,EAAEA,CAAA,EAAG;IACd,OAAO,aAAa;EACtB;EAEA,WAAWC,UAAUA,CAAA,EAAG;IACtB,OAAO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"},"metadata":{},"sourceType":"module","externalDependencies":[]}