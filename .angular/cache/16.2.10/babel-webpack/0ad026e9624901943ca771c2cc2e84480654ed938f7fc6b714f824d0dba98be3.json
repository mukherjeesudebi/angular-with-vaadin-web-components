{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ControlStateMixin } from '@vaadin/vaadin-control-state-mixin/vaadin-control-state-mixin.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n/**\n * `<vaadin-checkbox>` is a Web Component for customized checkboxes.\n *\n * ```html\n * <vaadin-checkbox>\n *   Make my profile visible\n * </vaadin-checkbox>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name         | Description\n * ------------------|----------------\n * `checkbox`        | The checkbox element\n * `label`           | The label content element\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * -------------|-------------|--------------\n * `active`     | Set when the checkbox is pressed down, either with mouse, touch or the keyboard. | `:host`\n * `disabled`   | Set when the checkbox is disabled. | `:host`\n * `focus-ring` | Set when the checkbox is focused using the keyboard. | `:host`\n * `focused`    | Set when the checkbox is focused. | `:host`\n * `indeterminate` | Set when the checkbox is in indeterminate mode. | `:host`\n * `checked` | Set when the checkbox is checked. | `:host`\n * `empty` | Set when there is no label provided. | `label`\n *\n * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)\n *\n * @memberof Vaadin\n * @mixes Vaadin.ElementMixin\n * @mixes Vaadin.ControlStateMixin\n * @mixes Vaadin.ThemableMixin\n * @mixes Polymer.GestureEventListeners\n * @demo demo/index.html\n */\nclass CheckboxElement extends ElementMixin(ControlStateMixin(ThemableMixin(GestureEventListeners(PolymerElement)))) {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        display: inline-flex;\n        align-items: baseline;\n        outline: none;\n      }\n\n      [part=\"checkbox\"] {\n        position: relative;\n        display: inline-block;\n        flex: none;\n      }\n\n      input[type=\"checkbox\"] {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        opacity: 0;\n        cursor: inherit;\n        margin: 0;\n      }\n\n      :host([disabled]) {\n        -webkit-tap-highlight-color: transparent;\n      }\n    </style>\n\n    <label>\n      <span part=\"checkbox\">\n        <input type=\"checkbox\" checked=\"{{checked::change}}\" disabled\\$=\"[[disabled]]\" indeterminate=\"{{indeterminate::change}}\" role=\"presentation\" tabindex=\"-1\">\n      </span>\n\n      <span part=\"label\">\n        <slot></slot>\n      </span>\n    </label>\n`;\n  }\n  static get is() {\n    return 'vaadin-checkbox';\n  }\n  static get version() {\n    return '2.2.10';\n  }\n  static get properties() {\n    return {\n      /**\n       * True if the checkbox is checked.\n       */\n      checked: {\n        type: Boolean,\n        value: false,\n        notify: true,\n        observer: '_checkedChanged',\n        reflectToAttribute: true\n      },\n      /**\n       * Indeterminate state of the checkbox when it's neither checked nor unchecked, but undetermined.\n       * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes\n       */\n      indeterminate: {\n        type: Boolean,\n        notify: true,\n        observer: '_indeterminateChanged',\n        reflectToAttribute: true,\n        value: false\n      },\n      /**\n       * The value given to the data submitted with the checkbox's name to the server when the control is inside a form.\n       */\n      value: {\n        type: String,\n        value: 'on'\n      },\n      _nativeCheckbox: {\n        type: Object\n      }\n    };\n  }\n  constructor() {\n    super();\n    /**\n     * @type {string}\n     * Name of the element.\n     */\n    this.name;\n  }\n  get name() {\n    return this.checked ? this._storedName : '';\n  }\n  set name(name) {\n    this._storedName = name;\n  }\n  ready() {\n    super.ready();\n    this.setAttribute('role', 'checkbox');\n    this._nativeCheckbox = this.shadowRoot.querySelector('input[type=\"checkbox\"]');\n    this.addEventListener('click', this._handleClick.bind(this));\n    this._addActiveListeners();\n    const attrName = this.getAttribute('name');\n    if (attrName) {\n      this.name = attrName;\n    }\n    this.shadowRoot.querySelector('[part~=\"label\"]').querySelector('slot').addEventListener('slotchange', this._updateLabelAttribute.bind(this));\n    this._updateLabelAttribute();\n  }\n  _updateLabelAttribute() {\n    const label = this.shadowRoot.querySelector('[part~=\"label\"]');\n    const assignedNodes = label.firstElementChild.assignedNodes();\n    if (this._isAssignedNodesEmpty(assignedNodes)) {\n      label.setAttribute('empty', '');\n    } else {\n      label.removeAttribute('empty');\n    }\n  }\n  _isAssignedNodesEmpty(nodes) {\n    // The assigned nodes considered to be empty if there is no slotted content or only one empty text node\n    return nodes.length === 0 || nodes.length == 1 && nodes[0].nodeType == Node.TEXT_NODE && nodes[0].textContent.trim() === '';\n  }\n  _checkedChanged(checked) {\n    if (this.indeterminate) {\n      this.setAttribute('aria-checked', 'mixed');\n    } else {\n      this.setAttribute('aria-checked', checked);\n    }\n  }\n  _indeterminateChanged(indeterminate) {\n    if (indeterminate) {\n      this.setAttribute('aria-checked', 'mixed');\n    } else {\n      this.setAttribute('aria-checked', this.checked);\n    }\n  }\n  _addActiveListeners() {\n    // DOWN\n    this._addEventListenerToNode(this, 'down', e => {\n      if (this.__interactionsAllowed(e)) {\n        this.setAttribute('active', '');\n      }\n    });\n\n    // UP\n    this._addEventListenerToNode(this, 'up', () => this.removeAttribute('active'));\n\n    // KEYDOWN\n    this.addEventListener('keydown', e => {\n      if (this.__interactionsAllowed(e) && e.keyCode === 32) {\n        e.preventDefault();\n        this.setAttribute('active', '');\n      }\n    });\n\n    // KEYUP\n    this.addEventListener('keyup', e => {\n      if (this.__interactionsAllowed(e) && e.keyCode === 32) {\n        e.preventDefault();\n        this._toggleChecked();\n        this.removeAttribute('active');\n        if (this.indeterminate) {\n          this.indeterminate = false;\n        }\n      }\n    });\n  }\n\n  /** @protected */\n  get focusElement() {\n    return this.shadowRoot.querySelector('input');\n  }\n\n  /**\n   * True if users' interactions (mouse or keyboard)\n   * should toggle the checkbox\n   */\n  __interactionsAllowed(e) {\n    if (this.disabled) {\n      return false;\n    }\n\n    // https://github.com/vaadin/vaadin-checkbox/issues/63\n    if (e.target.localName === 'a') {\n      return false;\n    }\n    return true;\n  }\n  _handleClick(e) {\n    if (this.__interactionsAllowed(e)) {\n      if (!this.indeterminate) {\n        if (e.composedPath()[0] !== this._nativeCheckbox) {\n          e.preventDefault();\n          this._toggleChecked();\n        }\n      } else {\n        /*\n         * Required for IE 11 and Edge.\n         * See issue here: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7344418/\n         */\n        this.indeterminate = false;\n        e.preventDefault();\n        this._toggleChecked();\n      }\n    }\n  }\n  _toggleChecked() {\n    this.checked = !this.checked;\n    this.dispatchEvent(new CustomEvent('change', {\n      composed: false,\n      bubbles: true\n    }));\n  }\n\n  /**\n   * Fired when the user commits a value change.\n   *\n   * @event change\n   */\n}\n\ncustomElements.define(CheckboxElement.is, CheckboxElement);\nexport { CheckboxElement };","map":{"version":3,"names":["PolymerElement","GestureEventListeners","ThemableMixin","ControlStateMixin","ElementMixin","html","CheckboxElement","template","is","version","properties","checked","type","Boolean","value","notify","observer","reflectToAttribute","indeterminate","String","_nativeCheckbox","Object","constructor","name","_storedName","ready","setAttribute","shadowRoot","querySelector","addEventListener","_handleClick","bind","_addActiveListeners","attrName","getAttribute","_updateLabelAttribute","label","assignedNodes","firstElementChild","_isAssignedNodesEmpty","removeAttribute","nodes","length","nodeType","Node","TEXT_NODE","textContent","trim","_checkedChanged","_indeterminateChanged","_addEventListenerToNode","e","__interactionsAllowed","keyCode","preventDefault","_toggleChecked","focusElement","disabled","target","localName","composedPath","dispatchEvent","CustomEvent","composed","bubbles","customElements","define"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/vaadin-checkbox/src/vaadin-checkbox.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ControlStateMixin } from '@vaadin/vaadin-control-state-mixin/vaadin-control-state-mixin.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n/**\n * `<vaadin-checkbox>` is a Web Component for customized checkboxes.\n *\n * ```html\n * <vaadin-checkbox>\n *   Make my profile visible\n * </vaadin-checkbox>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name         | Description\n * ------------------|----------------\n * `checkbox`        | The checkbox element\n * `label`           | The label content element\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * -------------|-------------|--------------\n * `active`     | Set when the checkbox is pressed down, either with mouse, touch or the keyboard. | `:host`\n * `disabled`   | Set when the checkbox is disabled. | `:host`\n * `focus-ring` | Set when the checkbox is focused using the keyboard. | `:host`\n * `focused`    | Set when the checkbox is focused. | `:host`\n * `indeterminate` | Set when the checkbox is in indeterminate mode. | `:host`\n * `checked` | Set when the checkbox is checked. | `:host`\n * `empty` | Set when there is no label provided. | `label`\n *\n * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)\n *\n * @memberof Vaadin\n * @mixes Vaadin.ElementMixin\n * @mixes Vaadin.ControlStateMixin\n * @mixes Vaadin.ThemableMixin\n * @mixes Polymer.GestureEventListeners\n * @demo demo/index.html\n */\nclass CheckboxElement extends\n  ElementMixin(\n    ControlStateMixin(\n      ThemableMixin(\n        GestureEventListeners(PolymerElement)))) {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        display: inline-flex;\n        align-items: baseline;\n        outline: none;\n      }\n\n      [part=\"checkbox\"] {\n        position: relative;\n        display: inline-block;\n        flex: none;\n      }\n\n      input[type=\"checkbox\"] {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        opacity: 0;\n        cursor: inherit;\n        margin: 0;\n      }\n\n      :host([disabled]) {\n        -webkit-tap-highlight-color: transparent;\n      }\n    </style>\n\n    <label>\n      <span part=\"checkbox\">\n        <input type=\"checkbox\" checked=\"{{checked::change}}\" disabled\\$=\"[[disabled]]\" indeterminate=\"{{indeterminate::change}}\" role=\"presentation\" tabindex=\"-1\">\n      </span>\n\n      <span part=\"label\">\n        <slot></slot>\n      </span>\n    </label>\n`;\n  }\n\n  static get is() {\n    return 'vaadin-checkbox';\n  }\n\n  static get version() {\n    return '2.2.10';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * True if the checkbox is checked.\n       */\n      checked: {\n        type: Boolean,\n        value: false,\n        notify: true,\n        observer: '_checkedChanged',\n        reflectToAttribute: true\n      },\n\n      /**\n       * Indeterminate state of the checkbox when it's neither checked nor unchecked, but undetermined.\n       * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes\n       */\n      indeterminate: {\n        type: Boolean,\n        notify: true,\n        observer: '_indeterminateChanged',\n        reflectToAttribute: true,\n        value: false\n      },\n\n      /**\n       * The value given to the data submitted with the checkbox's name to the server when the control is inside a form.\n       */\n      value: {\n        type: String,\n        value: 'on'\n      },\n\n      _nativeCheckbox: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    /**\n     * @type {string}\n     * Name of the element.\n     */\n    this.name;\n  }\n\n  get name() {\n    return this.checked ? this._storedName : '';\n  }\n\n  set name(name) {\n    this._storedName = name;\n  }\n\n  ready() {\n    super.ready();\n\n    this.setAttribute('role', 'checkbox');\n\n    this._nativeCheckbox = this.shadowRoot.querySelector('input[type=\"checkbox\"]');\n\n    this.addEventListener('click', this._handleClick.bind(this));\n\n    this._addActiveListeners();\n\n    const attrName = this.getAttribute('name');\n    if (attrName) {\n      this.name = attrName;\n    }\n\n    this.shadowRoot.querySelector('[part~=\"label\"]').querySelector('slot')\n      .addEventListener('slotchange', this._updateLabelAttribute.bind(this));\n\n    this._updateLabelAttribute();\n  }\n\n  _updateLabelAttribute() {\n    const label = this.shadowRoot.querySelector('[part~=\"label\"]');\n    const assignedNodes = label.firstElementChild.assignedNodes();\n    if (this._isAssignedNodesEmpty(assignedNodes)) {\n      label.setAttribute('empty', '');\n    } else {\n      label.removeAttribute('empty');\n    }\n  }\n\n  _isAssignedNodesEmpty(nodes) {\n    // The assigned nodes considered to be empty if there is no slotted content or only one empty text node\n    return nodes.length === 0 ||\n          (nodes.length == 1\n          && nodes[0].nodeType == Node.TEXT_NODE\n          && nodes[0].textContent.trim() === '');\n  }\n\n  _checkedChanged(checked) {\n    if (this.indeterminate) {\n      this.setAttribute('aria-checked', 'mixed');\n    } else {\n      this.setAttribute('aria-checked', checked);\n    }\n  }\n\n  _indeterminateChanged(indeterminate) {\n    if (indeterminate) {\n      this.setAttribute('aria-checked', 'mixed');\n    } else {\n      this.setAttribute('aria-checked', this.checked);\n    }\n  }\n\n  _addActiveListeners() {\n    // DOWN\n    this._addEventListenerToNode(this, 'down', (e) => {\n      if (this.__interactionsAllowed(e)) {\n        this.setAttribute('active', '');\n      }\n    });\n\n    // UP\n    this._addEventListenerToNode(this, 'up', () => this.removeAttribute('active'));\n\n    // KEYDOWN\n    this.addEventListener('keydown', e => {\n      if (this.__interactionsAllowed(e) && e.keyCode === 32) {\n        e.preventDefault();\n        this.setAttribute('active', '');\n      }\n    });\n\n    // KEYUP\n    this.addEventListener('keyup', e => {\n      if (this.__interactionsAllowed(e) && e.keyCode === 32) {\n        e.preventDefault();\n        this._toggleChecked();\n        this.removeAttribute('active');\n\n        if (this.indeterminate) {\n          this.indeterminate = false;\n        }\n      }\n    });\n  }\n\n  /** @protected */\n  get focusElement() {\n    return this.shadowRoot.querySelector('input');\n  }\n\n  /**\n   * True if users' interactions (mouse or keyboard)\n   * should toggle the checkbox\n   */\n  __interactionsAllowed(e) {\n    if (this.disabled) {\n      return false;\n    }\n\n    // https://github.com/vaadin/vaadin-checkbox/issues/63\n    if (e.target.localName === 'a') {\n      return false;\n    }\n\n    return true;\n  }\n\n  _handleClick(e) {\n    if (this.__interactionsAllowed(e)) {\n      if (!this.indeterminate) {\n        if (e.composedPath()[0] !== this._nativeCheckbox) {\n          e.preventDefault();\n          this._toggleChecked();\n        }\n      } else {\n        /*\n         * Required for IE 11 and Edge.\n         * See issue here: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7344418/\n         */\n        this.indeterminate = false;\n        e.preventDefault();\n        this._toggleChecked();\n      }\n    }\n  }\n\n  _toggleChecked() {\n    this.checked = !this.checked;\n    this.dispatchEvent(new CustomEvent('change', {composed: false, bubbles: true}));\n  }\n\n  /**\n   * Fired when the user commits a value change.\n   *\n   * @event change\n   */\n}\n\ncustomElements.define(CheckboxElement.is, CheckboxElement);\n\nexport { CheckboxElement };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,qCAAqC;AAEpE,SAASC,qBAAqB,QAAQ,wDAAwD;AAC9F,SAASC,aAAa,QAAQ,wDAAwD;AACtF,SAASC,iBAAiB,QAAQ,kEAAkE;AACpG,SAASC,YAAY,QAAQ,sDAAsD;AACnF,SAASC,IAAI,QAAQ,wCAAwC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,SACnBF,YAAY,CACVD,iBAAiB,CACfD,aAAa,CACXD,qBAAqB,CAACD,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,WAAWO,QAAQA,CAAA,EAAG;IACpB,OAAOF,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;EACC;EAEA,WAAWG,EAAEA,CAAA,EAAG;IACd,OAAO,iBAAiB;EAC1B;EAEA,WAAWC,OAAOA,CAAA,EAAG;IACnB,OAAO,QAAQ;EACjB;EAEA,WAAWC,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACN;AACA;MACMC,OAAO,EAAE;QACPC,IAAI,EAAEC,OAAO;QACbC,KAAK,EAAE,KAAK;QACZC,MAAM,EAAE,IAAI;QACZC,QAAQ,EAAE,iBAAiB;QAC3BC,kBAAkB,EAAE;MACtB,CAAC;MAED;AACN;AACA;AACA;MACMC,aAAa,EAAE;QACbN,IAAI,EAAEC,OAAO;QACbE,MAAM,EAAE,IAAI;QACZC,QAAQ,EAAE,uBAAuB;QACjCC,kBAAkB,EAAE,IAAI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"},"metadata":{},"sourceType":"module","externalDependencies":[]}