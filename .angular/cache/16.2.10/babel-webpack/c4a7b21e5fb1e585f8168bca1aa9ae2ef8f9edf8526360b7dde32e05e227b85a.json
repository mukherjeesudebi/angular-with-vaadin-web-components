{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() {\n  return newInstance;\n}\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nconst templateInstanceBase = PropertyEffects(class {});\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends templateInstanceBase {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = this.children = [];\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (let n = this.root.firstChild; n; n = n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner && this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if (props && options.instanceProps || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @override\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, e => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    let c = this.children;\n    for (let i = 0; i < c.length; i++) {\n      let n = c[i];\n      // Ignore non-changes\n      if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n        if (n.nodeType === Node.TEXT_NODE) {\n          if (hide) {\n            n.__polymerTextContent__ = n.textContent;\n            n.textContent = '';\n          } else {\n            n.textContent = n.__polymerTextContent__;\n          }\n          // remove and replace slot\n        } else if (n.localName === 'slot') {\n          if (hide) {\n            n.__polymerReplaced__ = document.createComment('hidden-slot');\n            wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n          } else {\n            const replace = n.__polymerReplaced__;\n            if (replace) {\n              wrap(wrap(replace).parentNode).replaceChild(n, replace);\n            }\n          }\n        } else if (n.style) {\n          if (hide) {\n            n.__polymerDisplay__ = n.style.display;\n            n.style.display = 'none';\n          } else {\n            n.style.display = n.__polymerDisplay__;\n          }\n        }\n      }\n      n.__hideTemplateChildren__ = hide;\n      if (n._showHideChildren) {\n        n._showHideChildren(hide);\n      }\n    }\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ && node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   */\n  dispatchEvent(event) {\n    // eslint-disable-line no-unused-vars\n    return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nconst MutableTemplateInstanceBase = MutableData(TemplateInstanceBase);\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let templatizerBase = options.mutableData ? MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  let klass = class extends templatizerBase {};\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(template, templateInfo, options) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp) {\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      /**\n       * @constructor\n       * @extends {DataTemplate}\n       */\n      let templatizedBase = options.mutableData ? MutableDataTemplate : DataTemplate;\n      /** @private */\n      klass = templateInfo.templatizeTemplateClass = class TemplatizedTemplate extends templatizedBase {};\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop, klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE, {\n          fn: createForwardHostPropEffect(prop, userForwardHostProp)\n        });\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n    }\n    upgradeTemplate(template, klass);\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (template.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(template.__data, template.__dataProto);\n    }\n    // Clear any pending data for performance\n    template.__dataTemp = {};\n    template.__dataPending = null;\n    template.__dataOld = null;\n    template._enableProperties();\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner, prop.substring('_host_'.length), props[prop]);\n  };\n}\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, {\n        fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)\n      });\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      klass.prototype._addPropertyEffect(hprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, {\n        fn: createNotifyHostPropEffect()\n      });\n    }\n  }\n}\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner, inst, prop, props[prop]);\n  };\n}\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase)} Generated class bound to the template\n *   provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */options || {};\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  /** @override */\n  klass.prototype._methodHost = findMethodHost(template);\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */template;\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */owner;\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */klass; //eslint-disable-line no-self-assign\n  return klass;\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLTemplateElement} template The model will be returned for\n *   elements stamped from this template\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if (model = node.__templatizeInstance) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\nexport { TemplateInstanceBase };","map":{"version":3,"names":["PropertyEffects","MutableData","strictTemplatePolicy","wrap","newInstance","HTMLTemplateElementExtension","prototype","Object","create","HTMLTemplateElement","constructor","value","writable","DataTemplate","MutableDataTemplate","upgradeTemplate","template","setPrototypeOf","templateInstanceBase","TemplateInstanceBase","props","_configureProperties","root","_stampTemplate","__dataHost","children","n","firstChild","nextSibling","push","__templatizeInstance","__templatizeOwner","__hideTemplateChildren__","_showHideChildren","options","__templatizeOptions","instanceProps","_enableProperties","forwardHostProp","hprop","__hostProps","_setPendingProperty","iprop","prop","_setPendingPropertyOrPath","_enqueueClient","_addEventListenerToNode","node","eventName","handler","_methodHost","parentModel","e","model","templateHost","hide","c","i","length","Boolean","nodeType","Node","TEXT_NODE","__polymerTextContent__","textContent","localName","__polymerReplaced__","document","createComment","parentNode","replaceChild","replace","style","__polymerDisplay__","display","_setUnmanagedPropertyToNode","__parentModel","dispatchEvent","event","MutableTemplateInstanceBase","findMethodHost","createTemplatizerClass","templateInfo","templatizerBase","mutableData","templatize","mixin","klass","_bindTemplate","addNotifyEffects","addPropagateEffects","userForwardHostProp","templatizeTemplateClass","templatizedBase","TemplatizedTemplate","hostProps","_addPropertyEffect","PROPERTY_EFFECT_TYPES","PROPAGATE","fn","createForwardHostPropEffect","_createNotifyingProperty","__dataProto","assign","__data","__dataTemp","__dataPending","__dataOld","hostProp","call","substring","userNotifyInstanceProp","notifyInstanceProp","NOTIFY","createNotifyInstancePropEffect","createNotifyHostPropEffect","instProp","inst","notifyHostProp","owner","Error","ctor","_parseTemplate","baseClass","templatizeInstanceClass","TemplateInstance","modelForElement"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@polymer/polymer/lib/utils/templatize.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() { return newInstance; }\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nconst templateInstanceBase = PropertyEffects(class {});\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends templateInstanceBase {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = this.children = [];\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (let n = this.root.firstChild; n; n=n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner &&\n      this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if ((props && options.instanceProps) || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @override\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    let c = this.children;\n    for (let i=0; i<c.length; i++) {\n      let n = c[i];\n      // Ignore non-changes\n      if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n        if (n.nodeType === Node.TEXT_NODE) {\n          if (hide) {\n            n.__polymerTextContent__ = n.textContent;\n            n.textContent = '';\n          } else {\n            n.textContent = n.__polymerTextContent__;\n          }\n        // remove and replace slot\n        } else if (n.localName === 'slot') {\n          if (hide) {\n            n.__polymerReplaced__ = document.createComment('hidden-slot');\n            wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n          } else {\n            const replace = n.__polymerReplaced__;\n            if (replace) {\n              wrap(wrap(replace).parentNode).replaceChild(n, replace);\n            }\n          }\n        }\n\n        else if (n.style) {\n          if (hide) {\n            n.__polymerDisplay__ = n.style.display;\n            n.style.display = 'none';\n          } else {\n            n.style.display = n.__polymerDisplay__;\n          }\n        }\n      }\n      n.__hideTemplateChildren__ = hide;\n      if (n._showHideChildren) {\n        n._showHideChildren(hide);\n      }\n    }\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ &&\n        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   */\n   dispatchEvent(event) { // eslint-disable-line no-unused-vars\n     return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nconst MutableTemplateInstanceBase = MutableData(TemplateInstanceBase);\n\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let templatizerBase = options.mutableData ?\n    MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  let klass = class extends templatizerBase { };\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(template, templateInfo, options) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp) {\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      /**\n       * @constructor\n       * @extends {DataTemplate}\n       */\n      let templatizedBase = options.mutableData ? MutableDataTemplate : DataTemplate;\n      /** @private */\n      klass = templateInfo.templatizeTemplateClass =\n        class TemplatizedTemplate extends templatizedBase {};\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop,\n          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n    }\n    upgradeTemplate(template, klass);\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (template.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(template.__data, template.__dataProto);\n    }\n    // Clear any pending data for performance\n    template.__dataTemp = {};\n    template.__dataPending = null;\n    template.__dataOld = null;\n    template._enableProperties();\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner,\n      prop.substring('_host_'.length), props[prop]);\n  };\n}\n\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      klass.prototype._addPropertyEffect(hprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyHostPropEffect()});\n    }\n  }\n}\n\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner,\n      inst, prop, props[prop]);\n  };\n}\n\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase)} Generated class bound to the template\n *   provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */(options || {});\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  /** @override */\n  klass.prototype._methodHost = findMethodHost(template);\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */ (template);\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */ (owner);\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign\n  return klass;\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLTemplateElement} template The model will be returned for\n *   elements stamped from this template\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if ((model = node.__templatizeInstance)) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\n\nexport { TemplateInstanceBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}