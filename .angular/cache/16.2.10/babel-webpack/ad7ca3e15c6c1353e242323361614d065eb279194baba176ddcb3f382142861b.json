{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nconst observer = new ResizeObserver(entries => {\n  setTimeout(() => {\n    entries.forEach(entry => {\n      // Notify child resizables, if any\n      if (entry.target.resizables) {\n        entry.target.resizables.forEach(resizable => {\n          resizable._onResize(entry.contentRect);\n        });\n      } else {\n        entry.target._onResize(entry.contentRect);\n      }\n    });\n  });\n});\n\n/**\n * A mixin that uses a ResizeObserver to listen to host size changes.\n *\n * @polymerMixin\n */\nexport const ResizeMixin = dedupingMixin(superclass => class ResizeMixinClass extends superclass {\n  /**\n   * When true, the parent element resize will be also observed.\n   * Override this getter and return `true` to enable this.\n   *\n   * @protected\n   */\n  get _observeParent() {\n    return false;\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n    observer.observe(this);\n    if (this._observeParent) {\n      const parent = this.parentNode instanceof ShadowRoot ? this.parentNode.host : this.parentNode;\n      if (!parent.resizables) {\n        parent.resizables = new Set();\n        observer.observe(parent);\n      }\n      parent.resizables.add(this);\n      this.__parent = parent;\n    }\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    observer.unobserve(this);\n    const parent = this.__parent;\n    if (this._observeParent && parent) {\n      const resizables = parent.resizables;\n      if (resizables) {\n        resizables.delete(this);\n        if (resizables.size === 0) {\n          observer.unobserve(parent);\n        }\n      }\n      this.__parent = null;\n    }\n  }\n\n  /**\n   * A handler invoked on host resize. By default, it does nothing.\n   * Override the method to implement your own behavior.\n   *\n   * @protected\n   */\n  _onResize(_contentRect) {\n    // To be implemented.\n  }\n});","map":{"version":3,"names":["dedupingMixin","observer","ResizeObserver","entries","setTimeout","forEach","entry","target","resizables","resizable","_onResize","contentRect","ResizeMixin","superclass","ResizeMixinClass","_observeParent","connectedCallback","observe","parent","parentNode","ShadowRoot","host","Set","add","__parent","disconnectedCallback","unobserve","delete","size","_contentRect"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/component-base/src/resize-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\nconst observer = new ResizeObserver((entries) => {\n  setTimeout(() => {\n    entries.forEach((entry) => {\n      // Notify child resizables, if any\n      if (entry.target.resizables) {\n        entry.target.resizables.forEach((resizable) => {\n          resizable._onResize(entry.contentRect);\n        });\n      } else {\n        entry.target._onResize(entry.contentRect);\n      }\n    });\n  });\n});\n\n/**\n * A mixin that uses a ResizeObserver to listen to host size changes.\n *\n * @polymerMixin\n */\nexport const ResizeMixin = dedupingMixin(\n  (superclass) =>\n    class ResizeMixinClass extends superclass {\n      /**\n       * When true, the parent element resize will be also observed.\n       * Override this getter and return `true` to enable this.\n       *\n       * @protected\n       */\n      get _observeParent() {\n        return false;\n      }\n\n      /** @protected */\n      connectedCallback() {\n        super.connectedCallback();\n        observer.observe(this);\n\n        if (this._observeParent) {\n          const parent = this.parentNode instanceof ShadowRoot ? this.parentNode.host : this.parentNode;\n\n          if (!parent.resizables) {\n            parent.resizables = new Set();\n            observer.observe(parent);\n          }\n\n          parent.resizables.add(this);\n          this.__parent = parent;\n        }\n      }\n\n      /** @protected */\n      disconnectedCallback() {\n        super.disconnectedCallback();\n        observer.unobserve(this);\n\n        const parent = this.__parent;\n        if (this._observeParent && parent) {\n          const resizables = parent.resizables;\n\n          if (resizables) {\n            resizables.delete(this);\n\n            if (resizables.size === 0) {\n              observer.unobserve(parent);\n            }\n          }\n\n          this.__parent = null;\n        }\n      }\n\n      /**\n       * A handler invoked on host resize. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @protected\n       */\n      _onResize(_contentRect) {\n        // To be implemented.\n      }\n    },\n);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,qCAAqC;AAEnE,MAAMC,QAAQ,GAAG,IAAIC,cAAc,CAAEC,OAAO,IAAK;EAC/CC,UAAU,CAAC,MAAM;IACfD,OAAO,CAACE,OAAO,CAAEC,KAAK,IAAK;MACzB;MACA,IAAIA,KAAK,CAACC,MAAM,CAACC,UAAU,EAAE;QAC3BF,KAAK,CAACC,MAAM,CAACC,UAAU,CAACH,OAAO,CAAEI,SAAS,IAAK;UAC7CA,SAAS,CAACC,SAAS,CAACJ,KAAK,CAACK,WAAW,CAAC;QACxC,CAAC,CAAC;MACJ,CAAC,MAAM;QACLL,KAAK,CAACC,MAAM,CAACG,SAAS,CAACJ,KAAK,CAACK,WAAW,CAAC;MAC3C;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGZ,aAAa,CACrCa,UAAU,IACT,MAAMC,gBAAgB,SAASD,UAAU,CAAC;EACxC;AACN;AACA;AACA;AACA;AACA;EACM,IAAIE,cAAcA,CAAA,EAAG;IACnB,OAAO,KAAK;EACd;;EAEA;EACAC,iBAAiBA,CAAA,EAAG;IAClB,KAAK,CAACA,iBAAiB,CAAC,CAAC;IACzBf,QAAQ,CAACgB,OAAO,CAAC,IAAI,CAAC;IAEtB,IAAI,IAAI,CAACF,cAAc,EAAE;MACvB,MAAMG,MAAM,GAAG,IAAI,CAACC,UAAU,YAAYC,UAAU,GAAG,IAAI,CAACD,UAAU,CAACE,IAAI,GAAG,IAAI,CAACF,UAAU;MAE7F,IAAI,CAACD,MAAM,CAACV,UAAU,EAAE;QACtBU,MAAM,CAACV,UAAU,GAAG,IAAIc,GAAG,CAAC,CAAC;QAC7BrB,QAAQ,CAACgB,OAAO,CAACC,MAAM,CAAC;MAC1B;MAEAA,MAAM,CAACV,UAAU,CAACe,GAAG,CAAC,IAAI,CAAC;MAC3B,IAAI,CAACC,QAAQ,GAAGN,MAAM;IACxB;EACF;;EAEA;EACAO,oBAAoBA,CAAA,EAAG;IACrB,KAAK,CAACA,oBAAoB,CAAC,CAAC;IAC5BxB,QAAQ,CAACyB,SAAS,CAAC,IAAI,CAAC;IAExB,MAAMR,MAAM,GAAG,IAAI,CAACM,QAAQ;IAC5B,IAAI,IAAI,CAACT,cAAc,IAAIG,MAAM,EAAE;MACjC,MAAMV,UAAU,GAAGU,MAAM,CAACV,UAAU;MAEpC,IAAIA,UAAU,EAAE;QACdA,UAAU,CAACmB,MAAM,CAAC,IAAI,CAAC;QAEvB,IAAInB,UAAU,CAACoB,IAAI,KAAK,CAAC,EAAE;UACzB3B,QAAQ,CAACyB,SAAS,CAACR,MAAM,CAAC;QAC5B;MACF;MAEA,IAAI,CAACM,QAAQ,GAAG,IAAI;IACtB;EACF;;EAEA;AACN;AACA;AACA;AACA;AACA;EACMd,SAASA,CAACmB,YAAY,EAAE;IACtB;EAAA;AAEJ,CACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}