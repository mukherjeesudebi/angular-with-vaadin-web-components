{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { InputControlMixin } from './input-control-mixin.js';\n\n/**\n * A mixin to provide logic for vaadin-text-field and related components.\n *\n * @polymerMixin\n * @mixes InputControlMixin\n */\nexport const InputFieldMixin = superclass => class InputFieldMixinClass extends InputControlMixin(superclass) {\n  static get properties() {\n    return {\n      /**\n       * Whether the value of the control can be automatically completed by the browser.\n       * List of available options at:\n       * https://developer.mozilla.org/en/docs/Web/HTML/Element/input#attr-autocomplete\n       */\n      autocomplete: {\n        type: String\n      },\n      /**\n       * This is a property supported by Safari that is used to control whether\n       * autocorrection should be enabled when the user is entering/editing the text.\n       * Possible values are:\n       * on: Enable autocorrection.\n       * off: Disable autocorrection.\n       */\n      autocorrect: {\n        type: String\n      },\n      /**\n       * This is a property supported by Safari and Chrome that is used to control whether\n       * autocapitalization should be enabled when the user is entering/editing the text.\n       * Possible values are:\n       * characters: Characters capitalization.\n       * words: Words capitalization.\n       * sentences: Sentences capitalization.\n       * none: No capitalization.\n       */\n      autocapitalize: {\n        type: String,\n        reflectToAttribute: true\n      }\n    };\n  }\n  static get delegateAttrs() {\n    return [...super.delegateAttrs, 'autocapitalize', 'autocomplete', 'autocorrect'];\n  }\n\n  // Workaround for https://github.com/Polymer/polymer/issues/5259\n  get __data() {\n    return this.__dataValue || {};\n  }\n  set __data(value) {\n    this.__dataValue = value;\n  }\n\n  /**\n   * @param {HTMLElement} input\n   * @protected\n   * @override\n   */\n  _inputElementChanged(input) {\n    super._inputElementChanged(input);\n    if (input) {\n      // Discard value set on the custom slotted input.\n      if (input.value && input.value !== this.value) {\n        console.warn(`Please define value on the <${this.localName}> component!`);\n        input.value = '';\n      }\n      if (this.value) {\n        input.value = this.value;\n      }\n    }\n  }\n\n  /**\n   * Override an event listener from `FocusMixin`.\n   * @param {boolean} focused\n   * @protected\n   * @override\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    // Do not validate when focusout is caused by document\n    // losing focus, which happens on browser tab switch.\n    if (!focused && document.hasFocus()) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Override an event listener from `InputMixin`\n   * to mark as valid after user started typing.\n   * @param {Event} event\n   * @protected\n   * @override\n   */\n  _onInput(event) {\n    super._onInput(event);\n    if (this.invalid) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Override an observer from `InputMixin` to validate the field\n   * when a new value is set programmatically.\n   *\n   * @param {string | undefined} newValue\n   * @param {string | undefined} oldValue\n   * @protected\n   * @override\n   */\n  _valueChanged(newValue, oldValue) {\n    super._valueChanged(newValue, oldValue);\n    if (oldValue === undefined) {\n      return;\n    }\n    if (this.invalid) {\n      this.validate();\n    }\n  }\n};","map":{"version":3,"names":["InputControlMixin","InputFieldMixin","superclass","InputFieldMixinClass","properties","autocomplete","type","String","autocorrect","autocapitalize","reflectToAttribute","delegateAttrs","__data","__dataValue","value","_inputElementChanged","input","console","warn","localName","_setFocused","focused","document","hasFocus","validate","_onInput","event","invalid","_valueChanged","newValue","oldValue","undefined"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/field-base/src/input-field-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { InputControlMixin } from './input-control-mixin.js';\n\n/**\n * A mixin to provide logic for vaadin-text-field and related components.\n *\n * @polymerMixin\n * @mixes InputControlMixin\n */\nexport const InputFieldMixin = (superclass) =>\n  class InputFieldMixinClass extends InputControlMixin(superclass) {\n    static get properties() {\n      return {\n        /**\n         * Whether the value of the control can be automatically completed by the browser.\n         * List of available options at:\n         * https://developer.mozilla.org/en/docs/Web/HTML/Element/input#attr-autocomplete\n         */\n        autocomplete: {\n          type: String,\n        },\n\n        /**\n         * This is a property supported by Safari that is used to control whether\n         * autocorrection should be enabled when the user is entering/editing the text.\n         * Possible values are:\n         * on: Enable autocorrection.\n         * off: Disable autocorrection.\n         */\n        autocorrect: {\n          type: String,\n        },\n\n        /**\n         * This is a property supported by Safari and Chrome that is used to control whether\n         * autocapitalization should be enabled when the user is entering/editing the text.\n         * Possible values are:\n         * characters: Characters capitalization.\n         * words: Words capitalization.\n         * sentences: Sentences capitalization.\n         * none: No capitalization.\n         */\n        autocapitalize: {\n          type: String,\n          reflectToAttribute: true,\n        },\n      };\n    }\n\n    static get delegateAttrs() {\n      return [...super.delegateAttrs, 'autocapitalize', 'autocomplete', 'autocorrect'];\n    }\n\n    // Workaround for https://github.com/Polymer/polymer/issues/5259\n    get __data() {\n      return this.__dataValue || {};\n    }\n\n    set __data(value) {\n      this.__dataValue = value;\n    }\n\n    /**\n     * @param {HTMLElement} input\n     * @protected\n     * @override\n     */\n    _inputElementChanged(input) {\n      super._inputElementChanged(input);\n\n      if (input) {\n        // Discard value set on the custom slotted input.\n        if (input.value && input.value !== this.value) {\n          console.warn(`Please define value on the <${this.localName}> component!`);\n          input.value = '';\n        }\n\n        if (this.value) {\n          input.value = this.value;\n        }\n      }\n    }\n\n    /**\n     * Override an event listener from `FocusMixin`.\n     * @param {boolean} focused\n     * @protected\n     * @override\n     */\n    _setFocused(focused) {\n      super._setFocused(focused);\n\n      // Do not validate when focusout is caused by document\n      // losing focus, which happens on browser tab switch.\n      if (!focused && document.hasFocus()) {\n        this.validate();\n      }\n    }\n\n    /**\n     * Override an event listener from `InputMixin`\n     * to mark as valid after user started typing.\n     * @param {Event} event\n     * @protected\n     * @override\n     */\n    _onInput(event) {\n      super._onInput(event);\n\n      if (this.invalid) {\n        this.validate();\n      }\n    }\n\n    /**\n     * Override an observer from `InputMixin` to validate the field\n     * when a new value is set programmatically.\n     *\n     * @param {string | undefined} newValue\n     * @param {string | undefined} oldValue\n     * @protected\n     * @override\n     */\n    _valueChanged(newValue, oldValue) {\n      super._valueChanged(newValue, oldValue);\n\n      if (oldValue === undefined) {\n        return;\n      }\n\n      if (this.invalid) {\n        this.validate();\n      }\n    }\n  };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,QAAQ,0BAA0B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,UAAU,IACxC,MAAMC,oBAAoB,SAASH,iBAAiB,CAACE,UAAU,CAAC,CAAC;EAC/D,WAAWE,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACR;AACA;AACA;AACA;MACQC,YAAY,EAAE;QACZC,IAAI,EAAEC;MACR,CAAC;MAED;AACR;AACA;AACA;AACA;AACA;AACA;MACQC,WAAW,EAAE;QACXF,IAAI,EAAEC;MACR,CAAC;MAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACQE,cAAc,EAAE;QACdH,IAAI,EAAEC,MAAM;QACZG,kBAAkB,EAAE;MACtB;IACF,CAAC;EACH;EAEA,WAAWC,aAAaA,CAAA,EAAG;IACzB,OAAO,CAAC,GAAG,KAAK,CAACA,aAAa,EAAE,gBAAgB,EAAE,cAAc,EAAE,aAAa,CAAC;EAClF;;EAEA;EACA,IAAIC,MAAMA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,WAAW,IAAI,CAAC,CAAC;EAC/B;EAEA,IAAID,MAAMA,CAACE,KAAK,EAAE;IAChB,IAAI,CAACD,WAAW,GAAGC,KAAK;EAC1B;;EAEA;AACJ;AACA;AACA;AACA;EACIC,oBAAoBA,CAACC,KAAK,EAAE;IAC1B,KAAK,CAACD,oBAAoB,CAACC,KAAK,CAAC;IAEjC,IAAIA,KAAK,EAAE;MACT;MACA,IAAIA,KAAK,CAACF,KAAK,IAAIE,KAAK,CAACF,KAAK,KAAK,IAAI,CAACA,KAAK,EAAE;QAC7CG,OAAO,CAACC,IAAI,CAAE,+BAA8B,IAAI,CAACC,SAAU,cAAa,CAAC;QACzEH,KAAK,CAACF,KAAK,GAAG,EAAE;MAClB;MAEA,IAAI,IAAI,CAACA,KAAK,EAAE;QACdE,KAAK,CAACF,KAAK,GAAG,IAAI,CAACA,KAAK;MAC1B;IACF;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACD,WAAW,CAACC,OAAO,CAAC;;IAE1B;IACA;IACA,IAAI,CAACA,OAAO,IAAIC,QAAQ,CAACC,QAAQ,CAAC,CAAC,EAAE;MACnC,IAAI,CAACC,QAAQ,CAAC,CAAC;IACjB;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,QAAQA,CAACC,KAAK,EAAE;IACd,KAAK,CAACD,QAAQ,CAACC,KAAK,CAAC;IAErB,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB,IAAI,CAACH,QAAQ,CAAC,CAAC;IACjB;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,aAAaA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAChC,KAAK,CAACF,aAAa,CAACC,QAAQ,EAAEC,QAAQ,CAAC;IAEvC,IAAIA,QAAQ,KAAKC,SAAS,EAAE;MAC1B;IACF;IAEA,IAAI,IAAI,CAACJ,OAAO,EAAE;MAChB,IAAI,CAACH,QAAQ,CAAC,CAAC;IACjB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}