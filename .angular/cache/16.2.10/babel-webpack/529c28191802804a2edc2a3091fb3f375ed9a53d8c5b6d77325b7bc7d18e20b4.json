{"ast":null,"code":"/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root, isAncestor, isDescendant, get, translate, isPath, set, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue, legacyUndefined, orderedComputed, removeNestedTemplates, fastDomIf } from '../utils/settings.js';\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\nconst NOOP = [];\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\nconst COMPUTE_INFO = '__computeInfo';\n\n/** @const {!RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @param {boolean=} cloneArrays Clone any arrays assigned to the map when\n *   extending a superclass map onto this subclass\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type, cloneArrays) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    if (cloneArrays) {\n      for (let p in effects) {\n        let protoFx = effects[p];\n        // Perf optimization over Array.slice\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i = 0; i < protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {?Object} effects Object map of property-to-Array of effects\n * @param {?Object} props Bag of current property changes\n * @param {?Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    const id = dedupeId++;\n    for (let prop in props) {\n      // Inline `runEffectsForProperty` for perf.\n      let rootProperty = hasPaths ? root(prop) : prop;\n      let fxs = effects[rootProperty];\n      if (fxs) {\n        for (let i = 0, l = fxs.length, fx; i < l && (fx = fxs[i]); i++) {\n          if ((!fx.info || fx.info.lastRun !== id) && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n            if (fx.info) {\n              fx.info.lastRun = id;\n            }\n            fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n            ran = true;\n          }\n        }\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {!Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i = 0, l = fxs.length, fx; i < l && (fx = fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {?DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = /** @type {string} */trigger.name;\n    return triggerPath == path || !!(trigger.structured && isAncestor(triggerPath, path)) || !!(trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} eventName The name of the event to send\n *     ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property\n *     changed, the path that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  // As a performance optimization, we could elide the wrap here since notifying\n  // events are non-bubbling and shouldn't need retargeting. However, a very\n  // small number of internal tests failed in obscure ways, which may indicate\n  // user code relied on timing differences resulting from ShadyDOM flushing\n  // as a result of the wrapped `dispatchEvent`.\n  wrap( /** @type {!HTMLElement} */inst).dispatchEvent(new CustomEvent(eventName, {\n    detail\n  }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property]; // specifically for .splices\n  }\n\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!Polymer_PropertyEffects} inst Host element instance handling the\n *     notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */event.detail;\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.currentTarget[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath)) && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */inst);\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {?Object} changedProps Bag of changed properties\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    if (orderedComputed) {\n      // Runs computed effects in efficient order by keeping a topologically-\n      // sorted queue of compute effects to run, and inserting subsequently\n      // invalidated effects as they are run\n      dedupeId++;\n      const order = getComputedOrder(inst);\n      const queue = [];\n      for (let p in changedProps) {\n        enqueueEffectsFor(p, computeEffects, queue, order, hasPaths);\n      }\n      let info;\n      while (info = queue.shift()) {\n        if (runComputedEffect(inst, '', changedProps, oldProps, info)) {\n          enqueueEffectsFor(info.methodInfo, computeEffects, queue, order, hasPaths);\n        }\n      }\n      Object.assign( /** @type {!Object} */oldProps, inst.__dataOld);\n      Object.assign( /** @type {!Object} */changedProps, inst.__dataPending);\n      inst.__dataPending = null;\n    } else {\n      // Original Polymer 2.x computed effects order, which continues running\n      // effects until no further computed properties have been invalidated\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign( /** @type {!Object} */oldProps, inst.__dataOld);\n        Object.assign( /** @type {!Object} */changedProps, inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n}\n\n/**\n * Inserts a computed effect into a queue, given the specified order. Performs\n * the insert using a binary search.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {Object} info Property effects metadata\n * @param {Array<Object>} queue Ordered queue of effects\n * @param {Map<string,number>} order Map of computed property name->topological\n *   sort order\n */\nconst insertEffect = (info, queue, order) => {\n  let start = 0;\n  let end = queue.length - 1;\n  let idx = -1;\n  while (start <= end) {\n    const mid = start + end >> 1;\n    // Note `methodInfo` is where the computed property name is stored in\n    // the effect metadata\n    const cmp = order.get(queue[mid].methodInfo) - order.get(info.methodInfo);\n    if (cmp < 0) {\n      start = mid + 1;\n    } else if (cmp > 0) {\n      end = mid - 1;\n    } else {\n      idx = mid;\n      break;\n    }\n  }\n  if (idx < 0) {\n    idx = end + 1;\n  }\n  queue.splice(idx, 0, info);\n};\n\n/**\n * Inserts all downstream computed effects invalidated by the specified property\n * into the topologically-sorted queue of effects to be run.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {string} prop Property name\n * @param {Object} computeEffects Computed effects for this element\n * @param {Array<Object>} queue Topologically-sorted queue of computed effects\n *   to be run\n * @param {Map<string,number>} order Map of computed property name->topological\n *   sort order\n * @param {boolean} hasPaths True with `changedProps` contains one or more paths\n */\nconst enqueueEffectsFor = (prop, computeEffects, queue, order, hasPaths) => {\n  const rootProperty = hasPaths ? root(prop) : prop;\n  const fxs = computeEffects[rootProperty];\n  if (fxs) {\n    for (let i = 0; i < fxs.length; i++) {\n      const fx = fxs[i];\n      if (fx.info.lastRun !== dedupeId && (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        fx.info.lastRun = dedupeId;\n        insertEffect(fx.info, queue, order);\n      }\n    }\n  }\n};\n\n/**\n * Generates and retrieves a memoized map of computed property name to its\n * topologically-sorted order.\n *\n * The map is generated by first assigning a \"dependency count\" to each property\n * (defined as number properties it depends on, including its method for\n * \"dynamic functions\"). Any properties that have no dependencies are added to\n * the `ready` queue, which are properties whose order can be added to the final\n * order map. Properties are popped off the `ready` queue one by one and a.) added as\n * the next property in the order map, and b.) each property that it is a\n * dependency for has its dep count decremented (and if that property's dep\n * count goes to zero, it is added to the `ready` queue), until all properties\n * have been visited and ordered.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {!Polymer_PropertyEffects} inst The instance to retrieve the computed\n *   effect order for.\n * @return {Map<string,number>} Map of computed property name->topological sort\n *   order\n */\nfunction getComputedOrder(inst) {\n  let ordered = inst.constructor.__orderedComputedDeps;\n  if (!ordered) {\n    ordered = new Map();\n    const effects = inst[TYPES.COMPUTE];\n    let {\n      counts,\n      ready,\n      total\n    } = dependencyCounts(inst);\n    let curr;\n    while (curr = ready.shift()) {\n      ordered.set(curr, ordered.size);\n      const computedByCurr = effects[curr];\n      if (computedByCurr) {\n        computedByCurr.forEach(fx => {\n          // Note `methodInfo` is where the computed property name is stored\n          const computedProp = fx.info.methodInfo;\n          --total;\n          if (--counts[computedProp] === 0) {\n            ready.push(computedProp);\n          }\n        });\n      }\n    }\n    if (total !== 0) {\n      const el = /** @type {HTMLElement} */inst;\n      console.warn(`Computed graph for ${el.localName} incomplete; circular?`);\n    }\n    inst.constructor.__orderedComputedDeps = ordered;\n  }\n  return ordered;\n}\n\n/**\n * Generates a map of property-to-dependency count (`counts`, where \"dependency\n * count\" is the number of dependencies a given property has assuming it is a\n * computed property, otherwise 0).  It also returns a pre-populated list of\n * `ready` properties that have no dependencies and a `total` count, which is\n * used for error-checking the graph.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {!Polymer_PropertyEffects} inst The instance to generate dependency\n *   counts for.\n * @return {!Object} Object containing `counts` map (property-to-dependency\n *   count) and pre-populated `ready` array of properties that had zero\n *   dependencies.\n */\nfunction dependencyCounts(inst) {\n  const infoForComputed = inst[COMPUTE_INFO];\n  const counts = {};\n  const computedDeps = inst[TYPES.COMPUTE];\n  const ready = [];\n  let total = 0;\n  // Count dependencies for each computed property\n  for (let p in infoForComputed) {\n    const info = infoForComputed[p];\n    // Be sure to add the method name itself in case of \"dynamic functions\"\n    total += counts[p] = info.args.filter(a => !a.literal).length + (info.dynamicFn ? 1 : 0);\n  }\n  // Build list of ready properties (that aren't themselves computed)\n  for (let p in computedDeps) {\n    if (!infoForComputed[p]) {\n      ready.push(p);\n    }\n  }\n  return {\n    counts,\n    ready,\n    total\n  };\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {?Object} changedProps Bag of current property changes\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {boolean} True when the property being computed changed\n * @private\n */\nfunction runComputedEffect(inst, property, changedProps, oldProps, info) {\n  // Dirty check dependencies and run if any invalid\n  let result = runMethodEffect(inst, property, changedProps, oldProps, info);\n  // Abort if method returns a no-op result\n  if (result === NOOP) {\n    return false;\n  }\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    return inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n    return false;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!Polymer_PropertyEffects} inst The instance whose props are changing\n * @param {string} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */binding = {\n    kind,\n    target,\n    parts,\n    literal,\n    isCompound: parts.length !== 1\n  };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {\n      event,\n      negate\n    } = binding.parts[0];\n    binding.listenerEvent = event || camelToDashCase(target) + '-changed';\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i = 0; i < binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target + ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = {\n        index,\n        binding,\n        part,\n        evaluator: constructor\n      };\n      for (let j = 0; j < dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info,\n          trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && path.length > part.source.length && binding.kind == 'property' && !binding.isCompound && node.__isPropertyEffectsClient && node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    // Abort if value is a no-op result\n    if (value !== NOOP) {\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute( /** @type {Element} */node, value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient && node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else {\n      // In legacy no-batching mode, bindings applied before dataReady are\n      // equivalent to the \"apply config\" phase, which only set managed props\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' || binding.target === 'value' && (node.localName === 'input' || node.localName === 'textarea')) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) && binding.kind != 'attribute' && binding.kind != 'text' && !binding.isCompound && binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!Polymer_PropertyEffects} inst Instance that bas been previously\n *     bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {\n    nodeList,\n    nodeInfoList\n  } = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i = 0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i = 0; i < bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      // This ensures all bound elements have a host set, regardless\n      // of whether they upgrade synchronous to creation\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage || (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j = 0; j < parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      // Note, className needs style scoping so this needs wrapping.\n      // We may also want to consider doing this for `textContent` and\n      // `innerHTML`.\n      if (target === 'className') {\n        node = wrap(node);\n      }\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!Polymer_PropertyEffects} inst Host element instance to handle\n *     notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function (e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {!Object} Effect metadata for this method effect\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || dynamicFn && (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]);\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i = 0, arg; i < sig.args.length && (arg = sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn,\n        info: info,\n        trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn,\n      info: info\n    });\n  }\n  return info;\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = inst._marshalArgs(info.args, property, props);\n    return args === NOOP ? NOOP : fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' + STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' + '(?:' + ARGUMENTS + '?' + ')' + '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i = 0; i < parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = {\n      methodName,\n      static: true,\n      args: emptyArray\n    };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function (rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n  // replace comma entity with comma\n  .replace(/&comma;/g, ',')\n  // repair extra escape sequences; note only commas strictly need\n  // escaping, but we allow any other char to be escaped since its\n  // likely users will do this\n  .replace(/\\\\(.)/g, '$1');\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch (fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root(arg);\n    // detect structured path (has dots)\n    a.structured = isPath(arg);\n    if (a.structured) {\n      a.wildcard = arg.slice(-2) == '.*';\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\nfunction getArgValue(data, props, path) {\n  let value = get(data, path);\n  // when data is not stored e.g. `splices`, get the value from changedProps\n  // TODO(kschaaf): Note, this can cause a rare issue where the wildcard\n  // info.value could pull a stale value out of changedProps during a reentrant\n  // change that sets the value back to undefined.\n  // https://github.com/Polymer/polymer/issues/5479\n  if (value === undefined) {\n    value = props[path];\n  }\n  return value;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  const splicesData = {\n    indexSplices: splices\n  };\n  // Legacy behavior stored splices in `__data__` so it was *not* ephemeral.\n  // To match this behavior, we store splices directly on the array.\n  if (legacyUndefined && !inst._overrideLegacyUndefined) {\n    array.splices = splicesData;\n  }\n  inst.notifyPath(path + '.splices', splicesData);\n  inst.notifyPath(path + '.length', array.length);\n  // Clear splice data only when it's stored on the array.\n  if (legacyUndefined && !inst._overrideLegacyUndefined) {\n    splicesData.indexSplices = [];\n  }\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   * @private\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object|null} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__computeInfo;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n      /** @type {boolean} */\n      this._overrideLegacyUndefined;\n    }\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @override\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      this._registerHost();\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n    _registerHost() {\n      if (hostStack.length) {\n        let host = hostStack[hostStack.length - 1];\n        host._enqueueClient(this);\n        // This ensures even non-bound elements have a host set, as\n        // long as they upgrade synchronously\n        this.__dataHost = host;\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type, true)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @override\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type, true)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to\n     * attribute\" property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @override\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification || root(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get(this, path);\n          path = /** @type {string} */set(this, path, value);\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty( /**@type{string}*/path, value, shouldNotify)) {\n          computeLinkedPaths(this, /**@type{string}*/path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty( /**@type{string}*/path, value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @override\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        // Note, className needs style scoping so this needs wrapping.\n        if (prop === 'className') {\n          node = /** @type {!Node} */wrap(node);\n        }\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let propIsPath = this.__dataHasPaths && isPath(property);\n      let prevProps = propIsPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (propIsPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (propIsPath || this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property]) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @override\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i = 0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @override\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      let notifyProps;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @override\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      if (this.__templateInfo) {\n        this._runEffectsForTemplate(this.__templateInfo, changedProps, oldProps, hasPaths);\n      }\n    }\n    _runEffectsForTemplate(templateInfo, changedProps, oldProps, hasPaths) {\n      const baseRunEffects = (changedProps, hasPaths) => {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps, hasPaths, templateInfo.nodeList);\n        for (let info = templateInfo.firstChild; info; info = info.nextSibling) {\n          this._runEffectsForTemplate(info, changedProps, oldProps, hasPaths);\n        }\n      };\n      if (templateInfo.runEffects) {\n        templateInfo.runEffects(baseRunEffects, changedProps, hasPaths);\n      } else {\n        baseRunEffects(changedProps, hasPaths);\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @override\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n     *         object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1,\n     *         object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     *\n     * @override\n     * @return {void}\n     * @public\n     */\n    notifySplices(path, splices) {\n      let info = {\n        path: ''\n      };\n      let array = /** @type {Array} */get(this, path, info);\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n     */\n    set(path, value, root) {\n      if (root) {\n        set(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][( /** @type {string} */path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {\n        path: ''\n      };\n      let array = /** @type {Array}*/get(this, path, info);\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {\n        path: ''\n      };\n      let array = /** @type {Array} */get(this, path, info);\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number=} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {!Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {\n        path: ''\n      };\n      let array = /** @type {Array} */get(this, path, info);\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n        // Either start was undefined and the others were defined, but in this\n        // case we can safely pass on all arguments\n        //\n        // Note: this includes the case where none of the arguments were passed in,\n        // e.g. this.splice('array'). However, if both start and deleteCount\n        // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {\n        path: ''\n      };\n      let array = /** @type {Array} */get(this, path, info);\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {\n        path: ''\n      };\n      let array = /** @type {Array} */get(this, path, info);\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @override\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n     */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {\n          path: ''\n        };\n        value = get(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */path;\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function (value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method\n     *     to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = {\n        property,\n        method,\n        dynamicFn: Boolean(dynamicFn)\n      };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect,\n        info,\n        trigger: {\n          name: property\n        }\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect( /** @type {string} */method, TYPES.OBSERVE, {\n          fn: runObserverEffect,\n          info,\n          trigger: {\n            name: method\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' + attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      const info = createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      // Effects are normally stored as map of dependency->effect, but for\n      // ordered computation, we also need tree of computedProp->dependencies\n      ensureOwnEffectMap(this, COMPUTE_INFO)[property] = info;\n    }\n\n    /**\n     * Gather the argument values for a method specified in the provided array\n     * of argument metadata.\n     *\n     * The `path` and `value` arguments are used to fill in wildcard descriptor\n     * when the method is being called as a result of a path notification.\n     *\n     * @param {!Array<!MethodArg>} args Array of argument metadata\n     * @param {string} path Property/path name that triggered the method effect\n     * @param {Object} props Bag of current property changes\n     * @return {!Array<*>} Array of argument values\n     * @private\n     */\n    _marshalArgs(args, path, props) {\n      const data = this.__data;\n      const values = [];\n      for (let i = 0, l = args.length; i < l; i++) {\n        let {\n          name,\n          structured,\n          wildcard,\n          value,\n          literal\n        } = args[i];\n        if (!literal) {\n          if (wildcard) {\n            const matches = isDescendant(name, path);\n            const pathValue = getArgValue(data, props, matches ? path : name);\n            value = {\n              path: matches ? path : name,\n              value: pathValue,\n              base: matches ? get(data, name) : pathValue\n            };\n          } else {\n            value = structured ? getArgValue(data, props, name) : data[name];\n          }\n        }\n        // When the `legacyUndefined` flag is enabled, pass a no-op value\n        // so that the observer, computed property, or compound binding is aborted.\n        if (legacyUndefined && !this._overrideLegacyUndefined && value === undefined && args.length > 1) {\n          return NOOP;\n        }\n        values[i] = value;\n      }\n      return values;\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     * @nocollapse\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     * @nocollapse\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /*\n     * Overview of binding flow:\n     *\n     * During finalization (`instanceBinding==false`, `wasPreBound==false`):\n     *  `_bindTemplate(t, false)` called directly during finalization - parses\n     *  the template (for the first time), and then assigns that _prototypical_\n     *  template info to `__preboundTemplateInfo` _on the prototype_; note in\n     *  this case `wasPreBound` is false; this is the first time we're binding\n     *  it, thus we create accessors.\n     *\n     * During first stamping (`instanceBinding==true`, `wasPreBound==true`):\n     *   `_stampTemplate` calls `_bindTemplate(t, true)`: the `templateInfo`\n     *   returned matches the prebound one, and so this is `wasPreBound == true`\n     *   state; thus we _skip_ creating accessors, but _do_ create an instance\n     *   of the template info to serve as the start of our linked list (needs to\n     *   be an instance, not the prototypical one, so that we can add `nodeList`\n     *   to it to contain the `nodeInfo`-ordered list of instance nodes for\n     *   bindings, and so we can chain runtime-stamped template infos off of\n     *   it). At this point, the call to `_stampTemplate` calls\n     *   `applyTemplateInfo` for each nested `<template>` found during parsing\n     *   to hand prototypical `_templateInfo` to them; we also pass the _parent_\n     *   `templateInfo` to the `<template>` so that we have the instance-time\n     *   parent to link the `templateInfo` under in the case it was\n     *   runtime-stamped.\n     *\n     * During subsequent runtime stamping (`instanceBinding==true`,\n     *   `wasPreBound==false`): `_stampTemplate` calls `_bindTemplate(t, true)`\n     *   - here `templateInfo` is guaranteed to _not_ match the prebound one,\n     *   because it was either a different template altogether, or even if it\n     *   was the same template, the step above created a instance of the info;\n     *   in this case `wasPreBound == false`, so we _do_ create accessors, _and_\n     *   link a instance into the linked list.\n     */\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on an instance\n     * to add effects at runtime.  See that method for full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @override\n     * @param {!HTMLTemplateElement} template Template containing binding\n     * bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     * \"prototypical\" binding of the template and overwrites any previously\n     * bound template for the class. When true (as passed from\n     * `_stampTemplate`), the template info is instanced and linked into the\n     * list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     * this is an instance of the prototypical template info\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__preBoundTemplateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into tree of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */Object.create(templateInfo);\n        templateInfo.wasPreBound = wasPreBound;\n        if (!this.__templateInfo) {\n          // Set the info to the root of the tree\n          this.__templateInfo = templateInfo;\n        } else {\n          // Append this template info onto the end of its parent template's\n          // list, which will determine the tree structure via which property\n          // effects are run; if this template was not nested in another\n          // template, use the root template (the first stamped one) as the\n          // parent. Note, `parent` is the `templateInfo` instance for this\n          // template's parent (containing) template, which was set up in\n          // `applyTemplateInfo`.  While a given template's `parent` is set\n          // apriori, it is only added to the parent's child list at the point\n          // that it is being bound, since a template may or may not ever be\n          // stamped, and may be stamped more than once (in which case instances\n          // of the template info will be in the tree under its parent more than\n          // once).\n          const parent = template._parentTemplateInfo || this.__templateInfo;\n          const previous = parent.lastChild;\n          templateInfo.parent = parent;\n          parent.lastChild = templateInfo;\n          templateInfo.previousSibling = previous;\n          if (previous) {\n            previous.nextSibling = templateInfo;\n          } else {\n            parent.firstChild = templateInfo;\n          }\n        }\n      } else {\n        this.__preBoundTemplateInfo = templateInfo;\n      }\n      return templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @param {TemplateInfo=} templateInfo Optional bound template info associated\n     *   with the template to be stamped; if omitted the template will be\n     *   automatically bound.\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template, templateInfo) {\n      templateInfo = templateInfo || ( /** @type {!TemplateInfo} */this._bindTemplate(template, true));\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.push(this);\n      let dom = super._stampTemplate(template, templateInfo);\n      hostStack.pop();\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n = dom.firstChild; n; n = n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes; the check on `__dataClientsReady`\n      // ensures we don't needlessly run effects for an element's initial\n      // prototypical template stamping since they will happen as a part of the\n      // first call to `_propertiesChanged`. This flag is set to true\n      // after running the initial propagate effects, and immediately before\n      // flushing clients. Since downstream clients could cause stamping on\n      // this host (e.g. a fastDomIf `dom-if` being forced to render\n      // synchronously), this flag ensures effects for runtime-stamped templates\n      // are run at this point during the initial element boot-up.\n      if (this.__dataClientsReady) {\n        this._runEffectsForTemplate(templateInfo, this.__data, null, false);\n        this._flushClients();\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @override\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info; Note that while the child is unlinked from its\n      // parent list, a template's `parent` reference is never removed, since\n      // this is is determined by the tree structure and applied at\n      // `applyTemplateInfo` time.\n      const templateInfo = dom.templateInfo;\n      const {\n        previousSibling,\n        nextSibling,\n        parent\n      } = templateInfo;\n      if (previousSibling) {\n        previousSibling.nextSibling = nextSibling;\n      } else if (parent) {\n        parent.firstChild = nextSibling;\n      }\n      if (nextSibling) {\n        nextSibling.previousSibling = previousSibling;\n      } else if (parent) {\n        parent.lastChild = previousSibling;\n      }\n      templateInfo.nextSibling = templateInfo.previousSibling = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i = 0; i < nodes.length; i++) {\n        let node = nodes[i];\n        wrap(wrap(node).parentNode).removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNode.call(this, node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length - 1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          // Ensure a ShadyCSS template scoped style is not removed\n          // when a class$ binding's initial literal value is set.\n          if (name == 'class' && node.hasAttribute('class')) {\n            literal += ' ' + node.getAttribute(name);\n          }\n          node.setAttribute(name, literal);\n        }\n        // support disable-upgrade\n        if (kind == 'attribute' && origName == 'disable-upgrade$') {\n          node.setAttribute(name, '');\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        // TODO(https://github.com/google/closure-compiler/issues/3240):\n        //     Change back to just super.methodCall()\n        return propertyEffectsBase._parseTemplateNodeAttribute.call(this, node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNestedTemplate.call(this, node, templateInfo, nodeInfo);\n      const parent = node.parentNode;\n      const nestedTemplateInfo = nodeInfo.templateInfo;\n      const isDomIf = parent.localName === 'dom-if';\n      const isDomRepeat = parent.localName === 'dom-repeat';\n      // Remove nested template and redirect its host bindings & templateInfo\n      // onto the parent (dom-if/repeat element)'s nodeInfo\n      if (removeNestedTemplates && (isDomIf || isDomRepeat)) {\n        parent.removeChild(node);\n        // Use the parent's nodeInfo (for the dom-if/repeat) to record the\n        // templateInfo, and use that for any host property bindings below\n        nodeInfo = nodeInfo.parentInfo;\n        nodeInfo.templateInfo = nestedTemplateInfo;\n        // Ensure the parent dom-if/repeat is noted since it now may have host\n        // bindings; it may not have been if it did not have its own bindings\n        nodeInfo.noted = true;\n        noted = false;\n      }\n      // Merge host props into outer template and add bindings\n      let hostProps = nestedTemplateInfo.hostProps;\n      if (fastDomIf && isDomIf) {\n        // `fastDomIf` mode uses runtime-template stamping to add accessors/\n        // effects to properties used in its template; as such we don't need to\n        // tax the host element with `_host_` bindings for the `dom-if`.\n        // However, in the event it is nested in a `dom-repeat`, it is still\n        // important that its host properties are added to the\n        // TemplateInstance's `hostProps` so that they are forwarded to the\n        // TemplateInstance.\n        if (hostProps) {\n          templateInfo.hostProps = Object.assign(templateInfo.hostProps || {}, hostProps);\n          // Ensure the dom-if is noted so that it has a __dataHost, since\n          // `fastDomIf` uses the host for runtime template stamping; note this\n          // was already ensured above in the `removeNestedTemplates` case\n          if (!removeNestedTemplates) {\n            nodeInfo.parentInfo.noted = true;\n          }\n        }\n      } else {\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{\n            mode,\n            source,\n            dependencies: [source],\n            hostProp: true\n          }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     * @nocollapse\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({\n            literal: text.slice(lastIndex, m.index)\n          });\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false,\n          notifyEvent = '',\n          colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {\n            args,\n            methodName\n          } = signature;\n          for (let i = 0; i < args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source,\n          mode,\n          negate,\n          customEvent,\n          signature,\n          dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {!Polymer_PropertyEffects} inst Element that should be used as\n     *     scope for binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     * @nocollapse\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get(inst, part.source);\n      } else {\n        if (hasPaths && isPath(path)) {\n          value = get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n  }\n  return PropertyEffects;\n});\n\n/**\n * Stack for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nconst hostStack = [];","map":{"version":3,"names":["wrap","dedupingMixin","root","isAncestor","isDescendant","get","translate","isPath","set","normalize","camelToDashCase","dashToCamelCase","PropertyAccessors","TemplateStamp","sanitizeDOMValue","legacyUndefined","orderedComputed","removeNestedTemplates","fastDomIf","dedupeId","NOOP","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","COMPUTE_INFO","capitalAttributeRegex","DataTrigger","DataEffect","ensureOwnEffectMap","model","type","cloneArrays","effects","hasOwnProperty","Object","create","p","protoFx","instFx","Array","length","i","runEffects","inst","props","oldProps","hasPaths","extraArgs","ran","id","prop","rootProperty","fxs","l","fx","info","lastRun","pathMatchesTrigger","trigger","fn","runEffectsForProperty","path","triggerPath","name","structured","wildcard","runObserverEffect","property","method","changedProp","call","__data","dynamicFn","console","warn","runNotifyEffects","notifyProps","notified","notifyPath","host","__dataHost","_invalidateProperties","eventName","dispatchNotifyEvent","value","detail","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","undefined","handleNotification","event","fromProp","toPath","negate","fromPath","currentTarget","_setPendingPropertyOrPath","Boolean","runReflectEffect","attrName","_propertyToAttribute","runComputedEffects","changedProps","computeEffects","order","getComputedOrder","queue","enqueueEffectsFor","shift","runComputedEffect","methodInfo","assign","__dataOld","__dataPending","inputProps","insertEffect","start","end","idx","mid","cmp","splice","ordered","constructor","__orderedComputedDeps","Map","counts","ready","total","dependencyCounts","curr","size","computedByCurr","forEach","computedProp","push","el","localName","infoForComputed","computedDeps","args","filter","a","literal","result","runMethodEffect","__dataHasAccessor","_setPendingProperty","computeLinkedPaths","links","__dataLinkedPaths","link","b","addBinding","templateInfo","nodeInfo","kind","target","parts","bindings","binding","isCompound","shouldAddListener","listenerEvent","listenerNegate","index","nodeInfoList","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","j","parseArg","_addTemplatePropertyEffect","runBindingEffect","nodeList","node","source","__isPropertyEffectsClient","_enqueueClient","_evaluateBinding","applyBindingValue","computeBindingValue","_valueToNodeAttribute","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","join","mode","setupBindings","setupCompoundStorage","addNotifyListener","literals","addEventListener","e","createMethodEffect","sig","effectFn","static","methodName","arg","_addPropertyEffect","context","_methodHost","_marshalArgs","apply","emptyArray","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","bindingRegex","RegExp","literalFromParts","s","parseMethod","expression","m","match","trim","replace","split","parseArgs","argList","map","rawArg","fc","slice","Number","getArgValue","data","notifySplices","array","splices","splicesData","indexSplices","_overrideLegacyUndefined","notifySplice","addedCount","removed","object","upper","toUpperCase","substring","PropertyEffects","superClass","propertyEffectsBase","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataHasPaths","__dataTemp","__dataClientsInitialized","__computeEffects","__computeInfo","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__templateInfo","PROPERTY_EFFECT_TYPES","_initializeProperties","_registerHost","hostStack","_initializeProtoProperties","_initializeInstanceProperties","readOnly","effect","_createPropertyAccessor","_removePropertyEffect","indexOf","_hasPropertyEffect","_hasReadOnlyEffect","_hasNotifyEffect","_hasReflectEffect","_hasComputedEffect","shouldNotify","isPathNotification","isArray","old","_shouldPropertyChange","propIsPath","prevProps","_setProperty","__dataReady","_flushProperties","client","_flushClients","_readyClients","__enableOrFlushClients","clients","__dataEnabled","_enableProperties","setProperties","setReadOnly","_propertiesChanged","currentProps","_propagatePropertyChanges","__dataCounter","_runEffectsForTemplate","baseRunEffects","propertyEffects","firstChild","nextSibling","linkPaths","to","from","unlinkPaths","items","len","ret","pop","hadLength","deleteCount","Math","floor","arguments","unshift","propPath","_createReadOnlyProperty","protectedSetter","_createPropertyObserver","_createMethodObserver","Error","_createNotifyingProperty","_createReflectedProperty","attr","attributeNameForProperty","_createComputedProperty","values","matches","pathValue","base","addPropertyEffect","prototype","createPropertyObserver","createMethodObserver","createNotifyingProperty","createReadOnlyProperty","createReflectedProperty","createComputedProperty","bindTemplate","template","_bindTemplate","instanceBinding","_parseTemplate","wasPreBound","__preBoundTemplateInfo","parent","_parentTemplateInfo","previous","lastChild","previousSibling","hostProps","propEffects","_stampTemplate","dom","nodes","childNodes","n","_removeBoundDom","parentNode","removeChild","_parseTemplateNode","noted","nodeType","Node","TEXT_NODE","_parseBindings","textContent","_parseTemplateNodeAttribute","origName","test","hasAttribute","getAttribute","setAttribute","removeAttribute","_parseTemplateNestedTemplate","nestedTemplateInfo","isDomIf","isDomRepeat","parentInfo","hostProp","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","dynamicFns"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@polymer/polymer/lib/mixins/property-effects.js"],"sourcesContent":["/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root, isAncestor, isDescendant, get, translate, isPath, set, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue, legacyUndefined, orderedComputed, removeNestedTemplates, fastDomIf } from '../utils/settings.js';\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\nconst NOOP = [];\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\nconst COMPUTE_INFO = '__computeInfo';\n\n/** @const {!RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @param {boolean=} cloneArrays Clone any arrays assigned to the map when\n *   extending a superclass map onto this subclass\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type, cloneArrays) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    if (cloneArrays) {\n      for (let p in effects) {\n        let protoFx = effects[p];\n        // Perf optimization over Array.slice\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i=0; i<protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {?Object} effects Object map of property-to-Array of effects\n * @param {?Object} props Bag of current property changes\n * @param {?Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    const id = dedupeId++;\n    for (let prop in props) {\n      // Inline `runEffectsForProperty` for perf.\n      let rootProperty = hasPaths ? root(prop) : prop;\n      let fxs = effects[rootProperty];\n      if (fxs) {\n        for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n          if ((!fx.info || fx.info.lastRun !== id) &&\n              (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n            if (fx.info) {\n              fx.info.lastRun = id;\n            }\n            fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n            ran = true;\n          }\n        }\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {!Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {?DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = /** @type {string} */ (trigger.name);\n    return (triggerPath == path) ||\n        !!(trigger.structured && isAncestor(triggerPath, path)) ||\n        !!(trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} eventName The name of the event to send\n *     ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property\n *     changed, the path that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  // As a performance optimization, we could elide the wrap here since notifying\n  // events are non-bubbling and shouldn't need retargeting. However, a very\n  // small number of internal tests failed in obscure ways, which may indicate\n  // user code relied on timing differences resulting from ShadyDOM flushing\n  // as a result of the wrapped `dispatchEvent`.\n  wrap(/** @type {!HTMLElement} */(inst)).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!Polymer_PropertyEffects} inst Host element instance handling the\n *     notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.currentTarget[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {?Object} changedProps Bag of changed properties\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    if (orderedComputed) {\n      // Runs computed effects in efficient order by keeping a topologically-\n      // sorted queue of compute effects to run, and inserting subsequently\n      // invalidated effects as they are run\n      dedupeId++;\n      const order = getComputedOrder(inst);\n      const queue = [];\n      for (let p in changedProps) {\n        enqueueEffectsFor(p, computeEffects, queue, order, hasPaths);\n      }\n      let info;\n      while ((info = queue.shift())) {\n        if (runComputedEffect(inst, '', changedProps, oldProps, info)) {\n          enqueueEffectsFor(info.methodInfo, computeEffects, queue, order, hasPaths);\n        }\n      }\n      Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n      Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n      inst.__dataPending = null;\n    } else {\n      // Original Polymer 2.x computed effects order, which continues running\n      // effects until no further computed properties have been invalidated\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n        Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n}\n\n/**\n * Inserts a computed effect into a queue, given the specified order. Performs\n * the insert using a binary search.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {Object} info Property effects metadata\n * @param {Array<Object>} queue Ordered queue of effects\n * @param {Map<string,number>} order Map of computed property name->topological\n *   sort order\n */\nconst insertEffect = (info, queue, order) => {\n  let start = 0;\n  let end = queue.length - 1;\n  let idx = -1;\n  while (start <= end) {\n    const mid = (start + end) >> 1;\n    // Note `methodInfo` is where the computed property name is stored in\n    // the effect metadata\n    const cmp = order.get(queue[mid].methodInfo) - order.get(info.methodInfo);\n    if (cmp < 0) {\n      start = mid + 1;\n    } else if (cmp > 0) {\n      end = mid - 1;\n    } else {\n      idx = mid;\n      break;\n    }\n  }\n  if (idx < 0) {\n    idx = end + 1;\n  }\n  queue.splice(idx, 0, info);\n};\n\n/**\n * Inserts all downstream computed effects invalidated by the specified property\n * into the topologically-sorted queue of effects to be run.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {string} prop Property name\n * @param {Object} computeEffects Computed effects for this element\n * @param {Array<Object>} queue Topologically-sorted queue of computed effects\n *   to be run\n * @param {Map<string,number>} order Map of computed property name->topological\n *   sort order\n * @param {boolean} hasPaths True with `changedProps` contains one or more paths\n */\nconst enqueueEffectsFor = (prop, computeEffects, queue, order, hasPaths) => {\n  const rootProperty = hasPaths ? root(prop) : prop;\n  const fxs = computeEffects[rootProperty];\n  if (fxs) {\n    for (let i=0; i<fxs.length; i++) {\n      const fx = fxs[i];\n      if ((fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        fx.info.lastRun = dedupeId;\n        insertEffect(fx.info, queue, order);\n      }\n    }\n  }\n};\n\n/**\n * Generates and retrieves a memoized map of computed property name to its\n * topologically-sorted order.\n *\n * The map is generated by first assigning a \"dependency count\" to each property\n * (defined as number properties it depends on, including its method for\n * \"dynamic functions\"). Any properties that have no dependencies are added to\n * the `ready` queue, which are properties whose order can be added to the final\n * order map. Properties are popped off the `ready` queue one by one and a.) added as\n * the next property in the order map, and b.) each property that it is a\n * dependency for has its dep count decremented (and if that property's dep\n * count goes to zero, it is added to the `ready` queue), until all properties\n * have been visited and ordered.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {!Polymer_PropertyEffects} inst The instance to retrieve the computed\n *   effect order for.\n * @return {Map<string,number>} Map of computed property name->topological sort\n *   order\n */\nfunction getComputedOrder(inst) {\n  let ordered = inst.constructor.__orderedComputedDeps;\n  if (!ordered) {\n    ordered = new Map();\n    const effects = inst[TYPES.COMPUTE];\n    let {counts, ready, total} = dependencyCounts(inst);\n    let curr;\n    while ((curr = ready.shift())) {\n      ordered.set(curr, ordered.size);\n      const computedByCurr = effects[curr];\n      if (computedByCurr) {\n        computedByCurr.forEach(fx => {\n          // Note `methodInfo` is where the computed property name is stored\n          const computedProp = fx.info.methodInfo;\n          --total;\n          if (--counts[computedProp] === 0) {\n            ready.push(computedProp);\n          }\n        });\n      }\n    }\n    if (total !== 0) {\n      const el = /** @type {HTMLElement} */ (inst);\n      console.warn(`Computed graph for ${el.localName} incomplete; circular?`);\n    }\n    inst.constructor.__orderedComputedDeps = ordered;\n  }\n  return ordered;\n}\n\n/**\n * Generates a map of property-to-dependency count (`counts`, where \"dependency\n * count\" is the number of dependencies a given property has assuming it is a\n * computed property, otherwise 0).  It also returns a pre-populated list of\n * `ready` properties that have no dependencies and a `total` count, which is\n * used for error-checking the graph.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {!Polymer_PropertyEffects} inst The instance to generate dependency\n *   counts for.\n * @return {!Object} Object containing `counts` map (property-to-dependency\n *   count) and pre-populated `ready` array of properties that had zero\n *   dependencies.\n */\nfunction dependencyCounts(inst) {\n  const infoForComputed = inst[COMPUTE_INFO];\n  const counts = {};\n  const computedDeps = inst[TYPES.COMPUTE];\n  const ready = [];\n  let total = 0;\n  // Count dependencies for each computed property\n  for (let p in infoForComputed) {\n    const info = infoForComputed[p];\n    // Be sure to add the method name itself in case of \"dynamic functions\"\n    total += counts[p] =\n      info.args.filter(a => !a.literal).length + (info.dynamicFn ? 1 : 0);\n  }\n  // Build list of ready properties (that aren't themselves computed)\n  for (let p in computedDeps) {\n    if (!infoForComputed[p]) {\n      ready.push(p);\n    }\n  }\n  return {counts, ready, total};\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {?Object} changedProps Bag of current property changes\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {boolean} True when the property being computed changed\n * @private\n */\nfunction runComputedEffect(inst, property, changedProps, oldProps, info) {\n  // Dirty check dependencies and run if any invalid\n  let result = runMethodEffect(inst, property, changedProps, oldProps, info);\n  // Abort if method returns a no-op result\n  if (result === NOOP) {\n    return false;\n  }\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    return inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n    return false;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!Polymer_PropertyEffects} inst The instance whose props are changing\n * @param {string} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    // Abort if value is a no-op result\n    if (value !== NOOP) {\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else {\n      // In legacy no-batching mode, bindings applied before dataReady are\n      // equivalent to the \"apply config\" phase, which only set managed props\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!Polymer_PropertyEffects} inst Instance that bas been previously\n *     bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      // This ensures all bound elements have a host set, regardless\n      // of whether they upgrade synchronous to creation\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      // Note, className needs style scoping so this needs wrapping.\n      // We may also want to consider doing this for `textContent` and\n      // `innerHTML`.\n      if (target === 'className') {\n        node = wrap(node);\n      }\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!Polymer_PropertyEffects} inst Host element instance to handle\n *     notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {!Object} Effect metadata for this method effect\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n  return info;\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = inst._marshalArgs(info.args, property, props);\n    return args === NOOP ? NOOP : fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root(arg);\n    // detect structured path (has dots)\n    a.structured = isPath(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\nfunction getArgValue(data, props, path) {\n  let value = get(data, path);\n  // when data is not stored e.g. `splices`, get the value from changedProps\n  // TODO(kschaaf): Note, this can cause a rare issue where the wildcard\n  // info.value could pull a stale value out of changedProps during a reentrant\n  // change that sets the value back to undefined.\n  // https://github.com/Polymer/polymer/issues/5479\n  if (value === undefined) {\n    value = props[path];\n  }\n  return value;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  const splicesData = { indexSplices: splices };\n  // Legacy behavior stored splices in `__data__` so it was *not* ephemeral.\n  // To match this behavior, we store splices directly on the array.\n  if (legacyUndefined && !inst._overrideLegacyUndefined) {\n    array.splices = splicesData;\n  }\n  inst.notifyPath(path + '.splices', splicesData);\n  inst.notifyPath(path + '.length', array.length);\n  // Clear splice data only when it's stored on the array.\n  if (legacyUndefined && !inst._overrideLegacyUndefined) {\n    splicesData.indexSplices = [];\n  }\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   * @private\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object|null} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__computeInfo;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n      /** @type {boolean} */\n      this._overrideLegacyUndefined;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @override\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      this._registerHost();\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    _registerHost() {\n      if (hostStack.length) {\n        let host = hostStack[hostStack.length-1];\n        host._enqueueClient(this);\n        // This ensures even non-bound elements have a host set, as\n        // long as they upgrade synchronously\n        this.__dataHost = host;\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type, true)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @override\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type, true)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to\n     * attribute\" property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @override\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get(this, path);\n          path = /** @type {string} */ (set(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, /**@type{string}*/ (path), value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @override\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        // Note, className needs style scoping so this needs wrapping.\n        if (prop === 'className') {\n          node = /** @type {!Node} */(wrap(node));\n        }\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let propIsPath = this.__dataHasPaths && isPath(property);\n      let prevProps = propIsPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (propIsPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (propIsPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @override\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @override\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      let notifyProps;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @override\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      if (this.__templateInfo) {\n        this._runEffectsForTemplate(this.__templateInfo, changedProps, oldProps, hasPaths);\n      }\n    }\n\n    _runEffectsForTemplate(templateInfo, changedProps, oldProps, hasPaths) {\n      const baseRunEffects = (changedProps, hasPaths) => {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        for (let info=templateInfo.firstChild; info; info=info.nextSibling) {\n          this._runEffectsForTemplate(info, changedProps, oldProps, hasPaths);\n        }\n      };\n      if (templateInfo.runEffects) {\n        templateInfo.runEffects(baseRunEffects, changedProps, hasPaths);\n      } else {\n        baseRunEffects(changedProps, hasPaths);\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @override\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n     *         object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1,\n     *         object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     *\n     * @override\n     * @return {void}\n     * @public\n     */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n     */\n    set(path, value, root) {\n      if (root) {\n        set(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number=} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {!Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @override\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n     */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method\n     *     to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      const info = createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      // Effects are normally stored as map of dependency->effect, but for\n      // ordered computation, we also need tree of computedProp->dependencies\n      ensureOwnEffectMap(this, COMPUTE_INFO)[property] = info;\n    }\n\n    /**\n     * Gather the argument values for a method specified in the provided array\n     * of argument metadata.\n     *\n     * The `path` and `value` arguments are used to fill in wildcard descriptor\n     * when the method is being called as a result of a path notification.\n     *\n     * @param {!Array<!MethodArg>} args Array of argument metadata\n     * @param {string} path Property/path name that triggered the method effect\n     * @param {Object} props Bag of current property changes\n     * @return {!Array<*>} Array of argument values\n     * @private\n     */\n    _marshalArgs(args, path, props) {\n      const data = this.__data;\n      const values = [];\n      for (let i=0, l=args.length; i<l; i++) {\n        let {name, structured, wildcard, value, literal} = args[i];\n        if (!literal) {\n          if (wildcard) {\n            const matches = isDescendant(name, path);\n            const pathValue = getArgValue(data, props, matches ? path : name);\n            value = {\n              path: matches ? path : name,\n              value: pathValue,\n              base: matches ? get(data, name) : pathValue\n            };\n          } else {\n            value = structured ? getArgValue(data, props, name) : data[name];\n          }\n        }\n        // When the `legacyUndefined` flag is enabled, pass a no-op value\n        // so that the observer, computed property, or compound binding is aborted.\n        if (legacyUndefined && !this._overrideLegacyUndefined && value === undefined && args.length > 1) {\n          return NOOP;\n        }\n        values[i] = value;\n      }\n      return values;\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     * @nocollapse\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     * @nocollapse\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /*\n     * Overview of binding flow:\n     *\n     * During finalization (`instanceBinding==false`, `wasPreBound==false`):\n     *  `_bindTemplate(t, false)` called directly during finalization - parses\n     *  the template (for the first time), and then assigns that _prototypical_\n     *  template info to `__preboundTemplateInfo` _on the prototype_; note in\n     *  this case `wasPreBound` is false; this is the first time we're binding\n     *  it, thus we create accessors.\n     *\n     * During first stamping (`instanceBinding==true`, `wasPreBound==true`):\n     *   `_stampTemplate` calls `_bindTemplate(t, true)`: the `templateInfo`\n     *   returned matches the prebound one, and so this is `wasPreBound == true`\n     *   state; thus we _skip_ creating accessors, but _do_ create an instance\n     *   of the template info to serve as the start of our linked list (needs to\n     *   be an instance, not the prototypical one, so that we can add `nodeList`\n     *   to it to contain the `nodeInfo`-ordered list of instance nodes for\n     *   bindings, and so we can chain runtime-stamped template infos off of\n     *   it). At this point, the call to `_stampTemplate` calls\n     *   `applyTemplateInfo` for each nested `<template>` found during parsing\n     *   to hand prototypical `_templateInfo` to them; we also pass the _parent_\n     *   `templateInfo` to the `<template>` so that we have the instance-time\n     *   parent to link the `templateInfo` under in the case it was\n     *   runtime-stamped.\n     *\n     * During subsequent runtime stamping (`instanceBinding==true`,\n     *   `wasPreBound==false`): `_stampTemplate` calls `_bindTemplate(t, true)`\n     *   - here `templateInfo` is guaranteed to _not_ match the prebound one,\n     *   because it was either a different template altogether, or even if it\n     *   was the same template, the step above created a instance of the info;\n     *   in this case `wasPreBound == false`, so we _do_ create accessors, _and_\n     *   link a instance into the linked list.\n     */\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on an instance\n     * to add effects at runtime.  See that method for full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @override\n     * @param {!HTMLTemplateElement} template Template containing binding\n     * bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     * \"prototypical\" binding of the template and overwrites any previously\n     * bound template for the class. When true (as passed from\n     * `_stampTemplate`), the template info is instanced and linked into the\n     * list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     * this is an instance of the prototypical template info\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__preBoundTemplateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into tree of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!this.__templateInfo) {\n          // Set the info to the root of the tree\n          this.__templateInfo = templateInfo;\n        } else {\n          // Append this template info onto the end of its parent template's\n          // list, which will determine the tree structure via which property\n          // effects are run; if this template was not nested in another\n          // template, use the root template (the first stamped one) as the\n          // parent. Note, `parent` is the `templateInfo` instance for this\n          // template's parent (containing) template, which was set up in\n          // `applyTemplateInfo`.  While a given template's `parent` is set\n          // apriori, it is only added to the parent's child list at the point\n          // that it is being bound, since a template may or may not ever be\n          // stamped, and may be stamped more than once (in which case instances\n          // of the template info will be in the tree under its parent more than\n          // once).\n          const parent = template._parentTemplateInfo || this.__templateInfo;\n          const previous = parent.lastChild;\n          templateInfo.parent = parent;\n          parent.lastChild = templateInfo;\n          templateInfo.previousSibling = previous;\n          if (previous) {\n            previous.nextSibling = templateInfo;\n          } else {\n            parent.firstChild = templateInfo;\n          }\n        }\n      } else {\n        this.__preBoundTemplateInfo = templateInfo;\n      }\n      return templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @param {TemplateInfo=} templateInfo Optional bound template info associated\n     *   with the template to be stamped; if omitted the template will be\n     *   automatically bound.\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template, templateInfo) {\n      templateInfo =  templateInfo || /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.push(this);\n      let dom = super._stampTemplate(template, templateInfo);\n      hostStack.pop();\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes; the check on `__dataClientsReady`\n      // ensures we don't needlessly run effects for an element's initial\n      // prototypical template stamping since they will happen as a part of the\n      // first call to `_propertiesChanged`. This flag is set to true\n      // after running the initial propagate effects, and immediately before\n      // flushing clients. Since downstream clients could cause stamping on\n      // this host (e.g. a fastDomIf `dom-if` being forced to render\n      // synchronously), this flag ensures effects for runtime-stamped templates\n      // are run at this point during the initial element boot-up.\n      if (this.__dataClientsReady) {\n        this._runEffectsForTemplate(templateInfo, this.__data, null, false);\n        this._flushClients();\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @override\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info; Note that while the child is unlinked from its\n      // parent list, a template's `parent` reference is never removed, since\n      // this is is determined by the tree structure and applied at\n      // `applyTemplateInfo` time.\n      const templateInfo = dom.templateInfo;\n      const {previousSibling, nextSibling, parent} = templateInfo;\n      if (previousSibling) {\n        previousSibling.nextSibling = nextSibling;\n      } else if (parent) {\n        parent.firstChild = nextSibling;\n      }\n      if (nextSibling) {\n        nextSibling.previousSibling = previousSibling;\n      } else if (parent) {\n        parent.lastChild = previousSibling;\n      }\n      templateInfo.nextSibling = templateInfo.previousSibling = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        wrap(wrap(node).parentNode).removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNode.call(\n        this, node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          // Ensure a ShadyCSS template scoped style is not removed\n          // when a class$ binding's initial literal value is set.\n          if (name == 'class' && node.hasAttribute('class')) {\n            literal += ' ' + node.getAttribute(name);\n          }\n          node.setAttribute(name, literal);\n        }\n        // support disable-upgrade\n        if (kind == 'attribute' && origName == 'disable-upgrade$') {\n          node.setAttribute(name, '');\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        // TODO(https://github.com/google/closure-compiler/issues/3240):\n        //     Change back to just super.methodCall()\n        return propertyEffectsBase._parseTemplateNodeAttribute.call(\n          this, node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNestedTemplate.call(\n        this, node, templateInfo, nodeInfo);\n      const parent = node.parentNode;\n      const nestedTemplateInfo = nodeInfo.templateInfo;\n      const isDomIf = parent.localName === 'dom-if';\n      const isDomRepeat = parent.localName === 'dom-repeat';\n      // Remove nested template and redirect its host bindings & templateInfo\n      // onto the parent (dom-if/repeat element)'s nodeInfo\n      if (removeNestedTemplates && (isDomIf || isDomRepeat)) {\n        parent.removeChild(node);\n        // Use the parent's nodeInfo (for the dom-if/repeat) to record the\n        // templateInfo, and use that for any host property bindings below\n        nodeInfo = nodeInfo.parentInfo;\n        nodeInfo.templateInfo = nestedTemplateInfo;\n        // Ensure the parent dom-if/repeat is noted since it now may have host\n        // bindings; it may not have been if it did not have its own bindings\n        nodeInfo.noted = true;\n        noted = false;\n      }\n      // Merge host props into outer template and add bindings\n      let hostProps = nestedTemplateInfo.hostProps;\n      if (fastDomIf && isDomIf) {\n        // `fastDomIf` mode uses runtime-template stamping to add accessors/\n        // effects to properties used in its template; as such we don't need to\n        // tax the host element with `_host_` bindings for the `dom-if`.\n        // However, in the event it is nested in a `dom-repeat`, it is still\n        // important that its host properties are added to the\n        // TemplateInstance's `hostProps` so that they are forwarded to the\n        // TemplateInstance.\n        if (hostProps) {\n          templateInfo.hostProps =\n            Object.assign(templateInfo.hostProps || {}, hostProps);\n          // Ensure the dom-if is noted so that it has a __dataHost, since\n          // `fastDomIf` uses the host for runtime template stamping; note this\n          // was already ensured above in the `removeNestedTemplates` case\n          if (!removeNestedTemplates) {\n            nodeInfo.parentInfo.noted = true;\n          }\n        }\n      } else {\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{ mode, source, dependencies: [source], hostProp: true }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     * @nocollapse\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {!Polymer_PropertyEffects} inst Element that should be used as\n     *     scope for binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     * @nocollapse\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get(inst, part.source);\n      } else {\n        if (hasPaths && isPath(path)) {\n          value = get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  return PropertyEffects;\n});\n\n/**\n * Stack for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nconst hostStack = [];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}