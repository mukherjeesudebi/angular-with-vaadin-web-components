{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ActiveMixin } from '@vaadin/a11y-base/src/active-mixin.js';\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\nimport { TabindexMixin } from '@vaadin/a11y-base/src/tabindex-mixin.js';\n\n/**\n * A mixin providing common button functionality.\n *\n * @polymerMixin\n * @mixes ActiveMixin\n * @mixes FocusMixin\n * @mixes TabindexMixin\n */\nexport const ButtonMixin = superClass => class ButtonMixinClass extends ActiveMixin(TabindexMixin(FocusMixin(superClass))) {\n  static get properties() {\n    return {\n      /**\n       * Indicates whether the element can be focused and where it participates in sequential keyboard navigation.\n       *\n       * @override\n       * @protected\n       */\n      tabindex: {\n        type: Number,\n        value: 0,\n        reflectToAttribute: true\n      }\n    };\n  }\n\n  /**\n   * By default, `Space` is the only possible activation key for a focusable HTML element.\n   * Nonetheless, the button is an exception as it can be also activated by pressing `Enter`.\n   * See the \"Keyboard Support\" section in https://www.w3.org/TR/wai-aria-practices/examples/button/button.html.\n   *\n   * @protected\n   * @override\n   */\n  get _activeKeys() {\n    return ['Enter', ' '];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    // By default, if the user hasn't provided a custom role,\n    // the role attribute is set to \"button\".\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'button');\n    }\n  }\n\n  /**\n   * Since the button component is designed on the base of the `[role=button]` attribute,\n   * and doesn't have a native <button> inside, in order to be fully accessible from the keyboard,\n   * it should manually fire the `click` event once an activation key is pressed,\n   * as it follows from the WAI-ARIA specifications:\n   * https://www.w3.org/TR/wai-aria-practices-1.1/#button\n   *\n   * According to the UI Events specifications,\n   * the `click` event should be fired exactly on `keydown`:\n   * https://www.w3.org/TR/uievents/#event-type-keydown\n   *\n   * @param {KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    super._onKeyDown(event);\n    if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n      return;\n    }\n    if (this._activeKeys.includes(event.key)) {\n      event.preventDefault();\n\n      // `DisabledMixin` overrides the standard `click()` method\n      // so that it doesn't fire the `click` event when the element is disabled.\n      this.click();\n    }\n  }\n};","map":{"version":3,"names":["ActiveMixin","FocusMixin","TabindexMixin","ButtonMixin","superClass","ButtonMixinClass","properties","tabindex","type","Number","value","reflectToAttribute","_activeKeys","ready","hasAttribute","setAttribute","_onKeyDown","event","altKey","shiftKey","ctrlKey","metaKey","includes","key","preventDefault","click"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/button/src/vaadin-button-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ActiveMixin } from '@vaadin/a11y-base/src/active-mixin.js';\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\nimport { TabindexMixin } from '@vaadin/a11y-base/src/tabindex-mixin.js';\n\n/**\n * A mixin providing common button functionality.\n *\n * @polymerMixin\n * @mixes ActiveMixin\n * @mixes FocusMixin\n * @mixes TabindexMixin\n */\nexport const ButtonMixin = (superClass) =>\n  class ButtonMixinClass extends ActiveMixin(TabindexMixin(FocusMixin(superClass))) {\n    static get properties() {\n      return {\n        /**\n         * Indicates whether the element can be focused and where it participates in sequential keyboard navigation.\n         *\n         * @override\n         * @protected\n         */\n        tabindex: {\n          type: Number,\n          value: 0,\n          reflectToAttribute: true,\n        },\n      };\n    }\n\n    /**\n     * By default, `Space` is the only possible activation key for a focusable HTML element.\n     * Nonetheless, the button is an exception as it can be also activated by pressing `Enter`.\n     * See the \"Keyboard Support\" section in https://www.w3.org/TR/wai-aria-practices/examples/button/button.html.\n     *\n     * @protected\n     * @override\n     */\n    get _activeKeys() {\n      return ['Enter', ' '];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      // By default, if the user hasn't provided a custom role,\n      // the role attribute is set to \"button\".\n      if (!this.hasAttribute('role')) {\n        this.setAttribute('role', 'button');\n      }\n    }\n\n    /**\n     * Since the button component is designed on the base of the `[role=button]` attribute,\n     * and doesn't have a native <button> inside, in order to be fully accessible from the keyboard,\n     * it should manually fire the `click` event once an activation key is pressed,\n     * as it follows from the WAI-ARIA specifications:\n     * https://www.w3.org/TR/wai-aria-practices-1.1/#button\n     *\n     * According to the UI Events specifications,\n     * the `click` event should be fired exactly on `keydown`:\n     * https://www.w3.org/TR/uievents/#event-type-keydown\n     *\n     * @param {KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyDown(event) {\n      super._onKeyDown(event);\n\n      if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n        return;\n      }\n\n      if (this._activeKeys.includes(event.key)) {\n        event.preventDefault();\n\n        // `DisabledMixin` overrides the standard `click()` method\n        // so that it doesn't fire the `click` event when the element is disabled.\n        this.click();\n      }\n    }\n  };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,uCAAuC;AACnE,SAASC,UAAU,QAAQ,sCAAsC;AACjE,SAASC,aAAa,QAAQ,yCAAyC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,UAAU,IACpC,MAAMC,gBAAgB,SAASL,WAAW,CAACE,aAAa,CAACD,UAAU,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC;EAChF,WAAWE,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACR;AACA;AACA;AACA;AACA;MACQC,QAAQ,EAAE;QACRC,IAAI,EAAEC,MAAM;QACZC,KAAK,EAAE,CAAC;QACRC,kBAAkB,EAAE;MACtB;IACF,CAAC;EACH;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,WAAWA,CAAA,EAAG;IAChB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;EACvB;;EAEA;EACAC,KAAKA,CAAA,EAAG;IACN,KAAK,CAACA,KAAK,CAAC,CAAC;;IAEb;IACA;IACA,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC,MAAM,CAAC,EAAE;MAC9B,IAAI,CAACC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;IACrC;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,KAAK,EAAE;IAChB,KAAK,CAACD,UAAU,CAACC,KAAK,CAAC;IAEvB,IAAIA,KAAK,CAACC,MAAM,IAAID,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACI,OAAO,EAAE;MACpE;IACF;IAEA,IAAI,IAAI,CAACT,WAAW,CAACU,QAAQ,CAACL,KAAK,CAACM,GAAG,CAAC,EAAE;MACxCN,KAAK,CAACO,cAAc,CAAC,CAAC;;MAEtB;MACA;MACA,IAAI,CAACC,KAAK,CAAC,CAAC;IACd;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}