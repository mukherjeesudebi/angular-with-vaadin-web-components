{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for scheduling flushable pre-render and post-render tasks.\n *\n * @summary Module for scheduling flushable pre-render and post-render tasks.\n */\n\nimport './boot.js';\nlet scheduled = false;\nlet beforeRenderQueue = [];\nlet afterRenderQueue = [];\nfunction schedule() {\n  scheduled = true;\n  // before next render\n  requestAnimationFrame(function () {\n    scheduled = false;\n    flushQueue(beforeRenderQueue);\n    // after the render\n    setTimeout(function () {\n      runQueue(afterRenderQueue);\n    });\n  });\n}\nfunction flushQueue(queue) {\n  while (queue.length) {\n    callMethod(queue.shift());\n  }\n}\nfunction runQueue(queue) {\n  for (let i = 0, l = queue.length; i < l; i++) {\n    callMethod(queue.shift());\n  }\n}\nfunction callMethod(info) {\n  const context = info[0];\n  const callback = info[1];\n  const args = info[2];\n  try {\n    callback.apply(context, args);\n  } catch (e) {\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n\n/**\n * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`\n * tasks.\n *\n * @return {void}\n */\nexport function flush() {\n  while (beforeRenderQueue.length || afterRenderQueue.length) {\n    flushQueue(beforeRenderQueue);\n    flushQueue(afterRenderQueue);\n  }\n  scheduled = false;\n}\n\n/**\n * Enqueues a callback which will be run before the next render, at\n * `requestAnimationFrame` timing.\n *\n * This method is useful for enqueuing work that requires DOM measurement,\n * since measurement may not be reliable in custom element callbacks before\n * the first render, as well as for batching measurement tasks in general.\n *\n * Tasks in this queue may be flushed by calling `flush()`.\n *\n * @param {*} context Context object the callback function will be bound to\n * @param {function(...*):void} callback Callback function\n * @param {!Array=} args An array of arguments to call the callback function with\n * @return {void}\n */\nexport function beforeNextRender(context, callback, args) {\n  if (!scheduled) {\n    schedule();\n  }\n  beforeRenderQueue.push([context, callback, args]);\n}\n\n/**\n * Enqueues a callback which will be run after the next render, equivalent\n * to one task (`setTimeout`) after the next `requestAnimationFrame`.\n *\n * This method is useful for tuning the first-render performance of an\n * element or application by deferring non-critical work until after the\n * first paint.  Typical non-render-critical work may include adding UI\n * event listeners and aria attributes.\n *\n * @param {*} context Context object the callback function will be bound to\n * @param {function(...*):void} callback Callback function\n * @param {!Array=} args An array of arguments to call the callback function with\n * @return {void}\n */\nexport function afterNextRender(context, callback, args) {\n  if (!scheduled) {\n    schedule();\n  }\n  afterRenderQueue.push([context, callback, args]);\n}","map":{"version":3,"names":["scheduled","beforeRenderQueue","afterRenderQueue","schedule","requestAnimationFrame","flushQueue","setTimeout","runQueue","queue","length","callMethod","shift","i","l","info","context","callback","args","apply","e","flush","beforeNextRender","push","afterNextRender"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@polymer/polymer/lib/utils/render-status.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for scheduling flushable pre-render and post-render tasks.\n *\n * @summary Module for scheduling flushable pre-render and post-render tasks.\n */\n\nimport './boot.js';\n\nlet scheduled = false;\nlet beforeRenderQueue = [];\nlet afterRenderQueue = [];\n\nfunction schedule() {\n  scheduled = true;\n  // before next render\n  requestAnimationFrame(function() {\n    scheduled = false;\n    flushQueue(beforeRenderQueue);\n    // after the render\n    setTimeout(function() {\n      runQueue(afterRenderQueue);\n    });\n  });\n}\n\nfunction flushQueue(queue) {\n  while (queue.length) {\n    callMethod(queue.shift());\n  }\n}\n\nfunction runQueue(queue) {\n  for (let i=0, l=queue.length; i < l; i++) {\n    callMethod(queue.shift());\n  }\n}\n\nfunction callMethod(info) {\n  const context = info[0];\n  const callback = info[1];\n  const args = info[2];\n  try {\n    callback.apply(context, args);\n  } catch(e) {\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n\n/**\n * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`\n * tasks.\n *\n * @return {void}\n */\nexport function flush() {\n  while (beforeRenderQueue.length || afterRenderQueue.length) {\n    flushQueue(beforeRenderQueue);\n    flushQueue(afterRenderQueue);\n  }\n  scheduled = false;\n}\n\n\n/**\n * Enqueues a callback which will be run before the next render, at\n * `requestAnimationFrame` timing.\n *\n * This method is useful for enqueuing work that requires DOM measurement,\n * since measurement may not be reliable in custom element callbacks before\n * the first render, as well as for batching measurement tasks in general.\n *\n * Tasks in this queue may be flushed by calling `flush()`.\n *\n * @param {*} context Context object the callback function will be bound to\n * @param {function(...*):void} callback Callback function\n * @param {!Array=} args An array of arguments to call the callback function with\n * @return {void}\n */\nexport function beforeNextRender(context, callback, args) {\n  if (!scheduled) {\n    schedule();\n  }\n  beforeRenderQueue.push([context, callback, args]);\n}\n\n/**\n * Enqueues a callback which will be run after the next render, equivalent\n * to one task (`setTimeout`) after the next `requestAnimationFrame`.\n *\n * This method is useful for tuning the first-render performance of an\n * element or application by deferring non-critical work until after the\n * first paint.  Typical non-render-critical work may include adding UI\n * event listeners and aria attributes.\n *\n * @param {*} context Context object the callback function will be bound to\n * @param {function(...*):void} callback Callback function\n * @param {!Array=} args An array of arguments to call the callback function with\n * @return {void}\n */\nexport function afterNextRender(context, callback, args) {\n  if (!scheduled) {\n    schedule();\n  }\n  afterRenderQueue.push([context, callback, args]);\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,WAAW;AAElB,IAAIA,SAAS,GAAG,KAAK;AACrB,IAAIC,iBAAiB,GAAG,EAAE;AAC1B,IAAIC,gBAAgB,GAAG,EAAE;AAEzB,SAASC,QAAQA,CAAA,EAAG;EAClBH,SAAS,GAAG,IAAI;EAChB;EACAI,qBAAqB,CAAC,YAAW;IAC/BJ,SAAS,GAAG,KAAK;IACjBK,UAAU,CAACJ,iBAAiB,CAAC;IAC7B;IACAK,UAAU,CAAC,YAAW;MACpBC,QAAQ,CAACL,gBAAgB,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASG,UAAUA,CAACG,KAAK,EAAE;EACzB,OAAOA,KAAK,CAACC,MAAM,EAAE;IACnBC,UAAU,CAACF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC;EAC3B;AACF;AAEA,SAASJ,QAAQA,CAACC,KAAK,EAAE;EACvB,KAAK,IAAII,CAAC,GAAC,CAAC,EAAEC,CAAC,GAACL,KAAK,CAACC,MAAM,EAAEG,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACxCF,UAAU,CAACF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC;EAC3B;AACF;AAEA,SAASD,UAAUA,CAACI,IAAI,EAAE;EACxB,MAAMC,OAAO,GAAGD,IAAI,CAAC,CAAC,CAAC;EACvB,MAAME,QAAQ,GAAGF,IAAI,CAAC,CAAC,CAAC;EACxB,MAAMG,IAAI,GAAGH,IAAI,CAAC,CAAC,CAAC;EACpB,IAAI;IACFE,QAAQ,CAACE,KAAK,CAACH,OAAO,EAAEE,IAAI,CAAC;EAC/B,CAAC,CAAC,OAAME,CAAC,EAAE;IACTb,UAAU,CAAC,MAAM;MACf,MAAMa,CAAC;IACT,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAAA,EAAG;EACtB,OAAOnB,iBAAiB,CAACQ,MAAM,IAAIP,gBAAgB,CAACO,MAAM,EAAE;IAC1DJ,UAAU,CAACJ,iBAAiB,CAAC;IAC7BI,UAAU,CAACH,gBAAgB,CAAC;EAC9B;EACAF,SAAS,GAAG,KAAK;AACnB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASqB,gBAAgBA,CAACN,OAAO,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACxD,IAAI,CAACjB,SAAS,EAAE;IACdG,QAAQ,CAAC,CAAC;EACZ;EACAF,iBAAiB,CAACqB,IAAI,CAAC,CAACP,OAAO,EAAEC,QAAQ,EAAEC,IAAI,CAAC,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,eAAeA,CAACR,OAAO,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACvD,IAAI,CAACjB,SAAS,EAAE;IACdG,QAAQ,CAAC,CAAC;EACZ;EACAD,gBAAgB,CAACoB,IAAI,CAAC,CAACP,OAAO,EAAEC,QAAQ,EAAEC,IAAI,CAAC,CAAC;AAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}