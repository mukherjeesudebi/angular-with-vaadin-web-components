{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\nlet defaultMultiSortPriority = 'prepend';\n\n/**\n * @polymerMixin\n */\nexport const SortMixin = superClass => class SortMixin extends superClass {\n  static get properties() {\n    return {\n      /**\n       * When `true`, all `<vaadin-grid-sorter>` are applied for sorting.\n       * @attr {boolean} multi-sort\n       * @type {boolean}\n       */\n      multiSort: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Controls how columns are added to the sort order when using multi-sort.\n       * The sort order is visually indicated by numbers in grid sorters placed in column headers.\n       *\n       * By default, whenever an unsorted column is sorted, or the sort-direction of a column is\n       * changed, that column gets sort priority 1, thus affecting the priority for all the other\n       * sorted columns. This is identical to using `multi-sort-priority=\"prepend\"`.\n       *\n       * Using this property allows to change this behavior so that sorting an unsorted column\n       * would add it to the \"end\" of the sort, and changing column's sort direction would retain\n       * it's previous priority. To set this, use `multi-sort-priority=\"append\"`.\n       *\n       * @attr {string} multi-sort-priority\n       */\n      multiSortPriority: {\n        type: String,\n        value: () => defaultMultiSortPriority\n      },\n      /**\n       * When `true`, Shift-clicking an unsorted column's sorter adds it to the multi-sort.\n       * Shift + Space does the same action via keyboard. This property has precedence over the\n       * `multiSort` property. If `multiSortOnShiftClick` is true, the multiSort property is effectively ignored.\n       *\n       * @attr {boolean} multi-sort-on-shift-click\n       * @type {boolean}\n       */\n      multiSortOnShiftClick: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * @type {!Array<!GridSorterDefinition>}\n       * @protected\n       */\n      _sorters: {\n        type: Array,\n        value: () => []\n      },\n      /** @private */\n      _previousSorters: {\n        type: Array,\n        value: () => []\n      }\n    };\n  }\n\n  /**\n   * Sets the default multi-sort priority to use for all grid instances.\n   * This method should be called before creating any grid instances.\n   * Changing this setting does not affect the default for existing grids.\n   *\n   * @param {string} priority\n   */\n  static setDefaultMultiSortPriority(priority) {\n    defaultMultiSortPriority = ['append', 'prepend'].includes(priority) ? priority : 'prepend';\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.addEventListener('sorter-changed', this._onSorterChanged);\n  }\n\n  /** @private */\n  _onSorterChanged(e) {\n    const sorter = e.target;\n    e.stopPropagation();\n    sorter._grid = this;\n    this.__updateSorter(sorter, e.detail.shiftClick, e.detail.fromSorterClick);\n    this.__applySorters();\n  }\n\n  /** @private */\n  __removeSorters(sortersToRemove) {\n    if (sortersToRemove.length === 0) {\n      return;\n    }\n    this._sorters = this._sorters.filter(sorter => sortersToRemove.indexOf(sorter) < 0);\n    if (this.multiSort) {\n      this.__updateSortOrders();\n    }\n    this.__applySorters();\n  }\n\n  /** @private */\n  __updateSortOrders() {\n    this._sorters.forEach((sorter, index) => {\n      sorter._order = this._sorters.length > 1 ? index : null;\n    });\n  }\n\n  /** @private */\n  __appendSorter(sorter) {\n    if (!sorter.direction) {\n      this._removeArrayItem(this._sorters, sorter);\n    } else if (!this._sorters.includes(sorter)) {\n      this._sorters.push(sorter);\n    }\n    this.__updateSortOrders();\n  }\n\n  /** @private */\n  __prependSorter(sorter) {\n    this._removeArrayItem(this._sorters, sorter);\n    if (sorter.direction) {\n      this._sorters.unshift(sorter);\n    }\n    this.__updateSortOrders();\n  }\n\n  /** @private */\n  __updateSorter(sorter, shiftClick, fromSorterClick) {\n    if (!sorter.direction && this._sorters.indexOf(sorter) === -1) {\n      return;\n    }\n    sorter._order = null;\n    if (this.multiSort && (!this.multiSortOnShiftClick || !fromSorterClick) || this.multiSortOnShiftClick && shiftClick) {\n      if (this.multiSortPriority === 'append') {\n        this.__appendSorter(sorter);\n      } else {\n        this.__prependSorter(sorter);\n      }\n    } else if (sorter.direction || this.multiSortOnShiftClick) {\n      const otherSorters = this._sorters.filter(s => s !== sorter);\n      this._sorters = sorter.direction ? [sorter] : [];\n      otherSorters.forEach(sorter => {\n        sorter._order = null;\n        sorter.direction = null;\n      });\n    }\n  }\n\n  /** @private */\n  __applySorters() {\n    if (this.dataProvider &&\n    // No need to clear cache if sorters didn't change and grid is attached\n    this.isAttached && JSON.stringify(this._previousSorters) !== JSON.stringify(this._mapSorters())) {\n      this.clearCache();\n    }\n    this._a11yUpdateSorters();\n    this._previousSorters = this._mapSorters();\n  }\n\n  /**\n   * @return {!Array<!GridSorterDefinition>}\n   * @protected\n   */\n  _mapSorters() {\n    return this._sorters.map(sorter => {\n      return {\n        path: sorter.path,\n        direction: sorter.direction\n      };\n    });\n  }\n\n  /** @private */\n  _removeArrayItem(array, item) {\n    const index = array.indexOf(item);\n    if (index > -1) {\n      array.splice(index, 1);\n    }\n  }\n};","map":{"version":3,"names":["defaultMultiSortPriority","SortMixin","superClass","properties","multiSort","type","Boolean","value","multiSortPriority","String","multiSortOnShiftClick","_sorters","Array","_previousSorters","setDefaultMultiSortPriority","priority","includes","ready","addEventListener","_onSorterChanged","e","sorter","target","stopPropagation","_grid","__updateSorter","detail","shiftClick","fromSorterClick","__applySorters","__removeSorters","sortersToRemove","length","filter","indexOf","__updateSortOrders","forEach","index","_order","__appendSorter","direction","_removeArrayItem","push","__prependSorter","unshift","otherSorters","s","dataProvider","isAttached","JSON","stringify","_mapSorters","clearCache","_a11yUpdateSorters","map","path","array","item","splice"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/grid/src/vaadin-grid-sort-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\nlet defaultMultiSortPriority = 'prepend';\n\n/**\n * @polymerMixin\n */\nexport const SortMixin = (superClass) =>\n  class SortMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * When `true`, all `<vaadin-grid-sorter>` are applied for sorting.\n         * @attr {boolean} multi-sort\n         * @type {boolean}\n         */\n        multiSort: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Controls how columns are added to the sort order when using multi-sort.\n         * The sort order is visually indicated by numbers in grid sorters placed in column headers.\n         *\n         * By default, whenever an unsorted column is sorted, or the sort-direction of a column is\n         * changed, that column gets sort priority 1, thus affecting the priority for all the other\n         * sorted columns. This is identical to using `multi-sort-priority=\"prepend\"`.\n         *\n         * Using this property allows to change this behavior so that sorting an unsorted column\n         * would add it to the \"end\" of the sort, and changing column's sort direction would retain\n         * it's previous priority. To set this, use `multi-sort-priority=\"append\"`.\n         *\n         * @attr {string} multi-sort-priority\n         */\n        multiSortPriority: {\n          type: String,\n          value: () => defaultMultiSortPriority,\n        },\n\n        /**\n         * When `true`, Shift-clicking an unsorted column's sorter adds it to the multi-sort.\n         * Shift + Space does the same action via keyboard. This property has precedence over the\n         * `multiSort` property. If `multiSortOnShiftClick` is true, the multiSort property is effectively ignored.\n         *\n         * @attr {boolean} multi-sort-on-shift-click\n         * @type {boolean}\n         */\n        multiSortOnShiftClick: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * @type {!Array<!GridSorterDefinition>}\n         * @protected\n         */\n        _sorters: {\n          type: Array,\n          value: () => [],\n        },\n\n        /** @private */\n        _previousSorters: {\n          type: Array,\n          value: () => [],\n        },\n      };\n    }\n\n    /**\n     * Sets the default multi-sort priority to use for all grid instances.\n     * This method should be called before creating any grid instances.\n     * Changing this setting does not affect the default for existing grids.\n     *\n     * @param {string} priority\n     */\n    static setDefaultMultiSortPriority(priority) {\n      defaultMultiSortPriority = ['append', 'prepend'].includes(priority) ? priority : 'prepend';\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.addEventListener('sorter-changed', this._onSorterChanged);\n    }\n\n    /** @private */\n    _onSorterChanged(e) {\n      const sorter = e.target;\n      e.stopPropagation();\n      sorter._grid = this;\n      this.__updateSorter(sorter, e.detail.shiftClick, e.detail.fromSorterClick);\n      this.__applySorters();\n    }\n\n    /** @private */\n    __removeSorters(sortersToRemove) {\n      if (sortersToRemove.length === 0) {\n        return;\n      }\n\n      this._sorters = this._sorters.filter((sorter) => sortersToRemove.indexOf(sorter) < 0);\n      if (this.multiSort) {\n        this.__updateSortOrders();\n      }\n      this.__applySorters();\n    }\n\n    /** @private */\n    __updateSortOrders() {\n      this._sorters.forEach((sorter, index) => {\n        sorter._order = this._sorters.length > 1 ? index : null;\n      });\n    }\n\n    /** @private */\n    __appendSorter(sorter) {\n      if (!sorter.direction) {\n        this._removeArrayItem(this._sorters, sorter);\n      } else if (!this._sorters.includes(sorter)) {\n        this._sorters.push(sorter);\n      }\n\n      this.__updateSortOrders();\n    }\n\n    /** @private */\n    __prependSorter(sorter) {\n      this._removeArrayItem(this._sorters, sorter);\n      if (sorter.direction) {\n        this._sorters.unshift(sorter);\n      }\n      this.__updateSortOrders();\n    }\n\n    /** @private */\n    __updateSorter(sorter, shiftClick, fromSorterClick) {\n      if (!sorter.direction && this._sorters.indexOf(sorter) === -1) {\n        return;\n      }\n\n      sorter._order = null;\n\n      if (\n        (this.multiSort && (!this.multiSortOnShiftClick || !fromSorterClick)) ||\n        (this.multiSortOnShiftClick && shiftClick)\n      ) {\n        if (this.multiSortPriority === 'append') {\n          this.__appendSorter(sorter);\n        } else {\n          this.__prependSorter(sorter);\n        }\n      } else if (sorter.direction || this.multiSortOnShiftClick) {\n        const otherSorters = this._sorters.filter((s) => s !== sorter);\n        this._sorters = sorter.direction ? [sorter] : [];\n        otherSorters.forEach((sorter) => {\n          sorter._order = null;\n          sorter.direction = null;\n        });\n      }\n    }\n\n    /** @private */\n    __applySorters() {\n      if (\n        this.dataProvider &&\n        // No need to clear cache if sorters didn't change and grid is attached\n        this.isAttached &&\n        JSON.stringify(this._previousSorters) !== JSON.stringify(this._mapSorters())\n      ) {\n        this.clearCache();\n      }\n\n      this._a11yUpdateSorters();\n\n      this._previousSorters = this._mapSorters();\n    }\n\n    /**\n     * @return {!Array<!GridSorterDefinition>}\n     * @protected\n     */\n    _mapSorters() {\n      return this._sorters.map((sorter) => {\n        return {\n          path: sorter.path,\n          direction: sorter.direction,\n        };\n      });\n    }\n\n    /** @private */\n    _removeArrayItem(array, item) {\n      const index = array.indexOf(item);\n      if (index > -1) {\n        array.splice(index, 1);\n      }\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}