{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}","map":{"version":3,"names":["MIXIN_MATCH","VAR_ASSIGN","updateNativeProperties","element","properties","p","style","removeProperty","setProperty","getComputedStyleValue","property","value","window","getComputedStyle","getPropertyValue","trim","detectMixin","cssText","has","test","lastIndex"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@webcomponents/shadycss/src/common-utils.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport { MIXIN_MATCH, VAR_ASSIGN } from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,SAASA,WAAW,EAAEC,UAAU,QAAQ,mBAAmB;;AAE3D;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,OAAO,EAAEC,UAAU,EAAE;EAC1D;EACA,KAAK,IAAIC,CAAC,IAAID,UAAU,EAAE;IACxB;IACA,IAAIC,CAAC,KAAK,IAAI,EAAE;MACdF,OAAO,CAACG,KAAK,CAACC,cAAc,CAACF,CAAC,CAAC;IACjC,CAAC,MAAM;MACLF,OAAO,CAACG,KAAK,CAACE,WAAW,CAACH,CAAC,EAAED,UAAU,CAACC,CAAC,CAAC,CAAC;IAC7C;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,qBAAqBA,CAACN,OAAO,EAAEO,QAAQ,EAAE;EACvD;AACF;AACA;EACE,MAAMC,KAAK,GAAGC,MAAM,CAACC,gBAAgB,CAACV,OAAO,CAAC,CAACW,gBAAgB,CAACJ,QAAQ,CAAC;EACzE,IAAI,CAACC,KAAK,EAAE;IACV,OAAO,EAAE;EACX,CAAC,MAAM;IACL,OAAOA,KAAK,CAACI,IAAI,CAAC,CAAC;EACrB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,OAAO,EAAE;EACnC,MAAMC,GAAG,GAAGlB,WAAW,CAACmB,IAAI,CAACF,OAAO,CAAC,IAAIhB,UAAU,CAACkB,IAAI,CAACF,OAAO,CAAC;EACjE;EACAjB,WAAW,CAACoB,SAAS,GAAG,CAAC;EACzBnB,UAAU,CAACmB,SAAS,GAAG,CAAC;EACxB,OAAOF,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}