{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ScrollerElement } from './vaadin-grid-scroller.js';\nimport { A11yMixin } from './vaadin-grid-a11y-mixin.js';\nimport { ActiveItemMixin } from './vaadin-grid-active-item-mixin.js';\nimport { ArrayDataProviderMixin } from './vaadin-grid-array-data-provider-mixin.js';\nimport { ColumnResizingMixin } from './vaadin-grid-column-resizing-mixin.js';\nimport { DataProviderMixin } from './vaadin-grid-data-provider-mixin.js';\nimport { DynamicColumnsMixin } from './vaadin-grid-dynamic-columns-mixin.js';\nimport { EventContextMixin } from './vaadin-grid-event-context-mixin.js';\nimport { FilterMixin } from './vaadin-grid-filter-mixin.js';\nimport { RowDetailsMixin } from './vaadin-grid-row-details-mixin.js';\nimport { ScrollMixin } from './vaadin-grid-scroll-mixin.js';\nimport { SelectionMixin } from './vaadin-grid-selection-mixin.js';\nimport { SortMixin } from './vaadin-grid-sort-mixin.js';\nimport { StylingMixin } from './vaadin-grid-styling-mixin.js';\nimport { DragAndDropMixin } from './vaadin-grid-drag-and-drop-mixin.js';\nimport { KeyboardNavigationMixin } from './vaadin-grid-keyboard-navigation-mixin.js';\nimport { ColumnReorderingMixin } from './vaadin-grid-column-reordering-mixin.js';\nimport './vaadin-grid-column.js';\nimport './vaadin-grid-outer-scroller.js';\nimport './vaadin-grid-styles.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { beforeNextRender, afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { timeOut, animationFrame } from '@polymer/polymer/lib/utils/async.js';\nconst TOUCH_DEVICE = (() => {\n  try {\n    document.createEvent('TouchEvent');\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n/**\n *\n * `<vaadin-grid>` is a free, high quality data grid / data table Web Component. The content of the\n * the grid can be populated in two ways: imperatively by using renderer callback function and\n * declaratively by using Polymer's Templates.\n *\n * ### Quick Start\n *\n * Start with an assigning an array to the [`items`](#/elements/vaadin-grid#property-items) property to visualize your data.\n *\n * Use the [`<vaadin-grid-column>`](#/elements/vaadin-grid-column) element to configure the grid columns. Set `path` and `header`\n * shorthand properties for the columns to define what gets rendered in the cells of the column.\n *\n * #### Example:\n * ```html\n * <vaadin-grid>\n *   <vaadin-grid-column path=\"name.first\" header=\"First name\"></vaadin-grid-column>\n *   <vaadin-grid-column path=\"name.last\" header=\"Last name\"></vaadin-grid-column>\n *   <vaadin-grid-column path=\"email\"></vaadin-grid-column>\n * </vaadin-grid>\n * ```\n *\n * For custom content `vaadin-grid-column` element provides you with three types of `renderer` callback functions: `headerRenderer`,\n * `renderer` and `footerRenderer`.\n *\n * Each of those renderer functions provides `root`, `column`, `rowData` arguments when applicable.\n * Generate DOM content, append it to the `root` element and control the state\n * of the host element by accessing `column`. Before generating new content,\n * users are able to check if there is already content in `root` for reusing it.\n *\n * Renderers are called on initialization of new column cells and each time the\n * related row data is updated. DOM generated during the renderer call can be reused\n * in the next renderer call and will be provided with the `root` argument.\n * On first call it will be empty.\n *\n * #### Example:\n * ```html\n * <vaadin-grid>\n *   <vaadin-grid-column></vaadin-grid-column>\n *   <vaadin-grid-column></vaadin-grid-column>\n *   <vaadin-grid-column></vaadin-grid-column>\n * </vaadin-grid>\n * ```\n * ```js\n * const grid = document.querySelector('vaadin-grid');\n * grid.items = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'},\n *               {'name': 'Ringo', 'surname': 'Starr', 'role': 'drums'}];\n *\n * const columns = grid.querySelectorAll('vaadin-grid-column');\n *\n * columns[0].headerRenderer = function(root) {\n *   root.textContent = 'Name';\n * };\n * columns[0].renderer = function(root, column, rowData) {\n *   root.textContent = rowData.item.name;\n * };\n *\n * columns[1].headerRenderer = function(root) {\n *   root.textContent = 'Surname';\n * };\n * columns[1].renderer = function(root, column, rowData) {\n *   root.textContent = rowData.item.surname;\n * };\n *\n * columns[2].headerRenderer = function(root) {\n *   root.textContent = 'Role';\n * };\n * columns[2].renderer = function(root, column, rowData) {\n *   root.textContent = rowData.item.role;\n * };\n * ```\n *\n * Alternatively, the content can be provided with Polymer's Templates:\n *\n * #### Example:\n * ```html\n * <vaadin-grid items='[{\"name\": \"John\", \"surname\": \"Lennon\", \"role\": \"singer\"},\n * {\"name\": \"Ringo\", \"surname\": \"Starr\", \"role\": \"drums\"}]'>\n *   <vaadin-grid-column>\n *     <template class=\"header\">Name</template>\n *     <template>[[item.name]]</template>\n *   </vaadin-grid-column>\n *   <vaadin-grid-column>\n *     <template class=\"header\">Surname</template>\n *     <template>[[item.surname]]</template>\n *   </vaadin-grid-column>\n *   <vaadin-grid-column>\n *     <template class=\"header\">Role</template>\n *     <template>[[item.role]]</template>\n *   </vaadin-grid-column>\n * </vaadin-grid>\n * ```\n *\n * The following helper elements can be used for further customization:\n * - [`<vaadin-grid-column-group>`](#/elements/vaadin-grid-column-group)\n * - [`<vaadin-grid-filter>`](#/elements/vaadin-grid-filter)\n * - [`<vaadin-grid-sorter>`](#/elements/vaadin-grid-sorter)\n * - [`<vaadin-grid-selection-column>`](#/elements/vaadin-grid-selection-column)\n * - [`<vaadin-grid-tree-toggle>`](#/elements/vaadin-grid-tree-toggle)\n *\n * __Note that the helper elements must be explicitly imported.__\n * If you want to import everything at once you can use the `all-imports.html` bundle.\n *\n * A column template can be decorated with one the following class names to specify its purpose\n * - `header`: Marks a header template\n * - `footer`: Marks a footer template\n * - `row-details`: Marks a row details template\n *\n * The following built-in template variables can be bound to inside the column templates:\n * - `[[index]]`: Number representing the row index\n * - `[[item]]` and it's sub-properties: Data object (provided by a data provider / items array)\n * - `{{selected}}`: True if the item is selected (can be two-way bound)\n * - `{{detailsOpened}}`: True if the item has row details opened (can be two-way bound)\n * - `{{expanded}}`: True if the item has tree sublevel expanded (can be two-way bound)\n * - `[[level]]`: Number of the tree sublevel of the item, first level-items have 0\n *\n * ### Lazy Loading with Function Data Provider\n *\n * In addition to assigning an array to the items property, you can alternatively\n * provide the `<vaadin-grid>` data through the\n * [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) function property.\n * The `<vaadin-grid>` calls this function lazily, only when it needs more data\n * to be displayed.\n *\n * See the [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) in\n * the API reference below for the detailed data provider arguments description,\n * and the “Assigning Data” page in the demos.\n *\n * __Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__\n *\n * __Also, note that when using function data providers, the total number of items\n * needs to be set manually. The total number of items can be returned\n * in the second argument of the data provider callback:__\n *\n * ```javascript\n * grid.dataProvider = function(params, callback) {\n *   var url = 'https://api.example/data' +\n *       '?page=' + params.page +        // the requested page index\n *       '&per_page=' + params.pageSize; // number of items on the page\n *   var xhr = new XMLHttpRequest();\n *   xhr.onload = function() {\n *     var response = JSON.parse(xhr.responseText);\n *     callback(\n *       response.employees, // requested page of items\n *       response.totalSize  // total number of items\n *     );\n *   };\n *   xhr.open('GET', url, true);\n *   xhr.send();\n * };\n * ```\n *\n * __Alternatively, you can use the `size` property to set the total number of items:__\n *\n * ```javascript\n * grid.size = 200; // The total number of items\n * grid.dataProvider = function(params, callback) {\n *   var url = 'https://api.example/data' +\n *       '?page=' + params.page +        // the requested page index\n *       '&per_page=' + params.pageSize; // number of items on the page\n *   var xhr = new XMLHttpRequest();\n *   xhr.onload = function() {\n *     var response = JSON.parse(xhr.responseText);\n *     callback(response.employees);\n *   };\n *   xhr.open('GET', url, true);\n *   xhr.send();\n * };\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------------|----------------\n * `row` | Row in the internal table\n * `cell` | Cell in the internal table\n * `header-cell` | Header cell in the internal table\n * `body-cell` | Body cell in the internal table\n * `footer-cell` | Footer cell in the internal table\n * `details-cell` | Row details cell in the internal table\n * `resize-handle` | Handle for resizing the columns\n * `reorder-ghost` | Ghost element of the header cell being dragged\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * -------------|-------------|------------\n * `loading` | Set when the grid is loading data from data provider | :host\n * `interacting` | Keyboard navigation in interaction mode | :host\n * `navigating` | Keyboard navigation in navigation mode | :host\n * `overflow` | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `left`, `right` | :host\n * `reordering` | Set when the grid's columns are being reordered | :host\n * `dragover` | Set when the grid (not a specific row) is dragged over | :host\n * `dragging-rows` : Set when grid rows are dragged  | :host\n * `reorder-status` | Reflects the status of a cell while columns are being reordered | cell\n * `frozen` | Frozen cell | cell\n * `last-frozen` | Last frozen cell | cell\n* * `first-column` | First visible cell on a row | cell\n * `last-column` | Last visible cell on a row | cell\n * `selected` | Selected row | row\n * `expanded` | Expanded row | row\n * `loading` | Row that is waiting for data from data provider | row\n * `odd` | Odd row | row\n * `first` | The first body row | row\n * `dragstart` | Set for one frame when drag of a row is starting. The value is a number when multiple rows are dragged | row\n * `dragover` | Set when the row is dragged over | row\n * `drag-disabled` | Set to a row that isn't available for dragging | row\n * `drop-disabled` | Set to a row that can't be dropped on top of | row\n *\n * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)\n *\n * @memberof Vaadin\n * @mixes Vaadin.ThemableMixin\n * @mixes Vaadin.Grid.A11yMixin\n * @mixes Vaadin.Grid.ActiveItemMixin\n * @mixes Vaadin.Grid.ArrayDataProviderMixin\n * @mixes Vaadin.Grid.ColumnResizingMixin\n * @mixes Vaadin.Grid.DataProviderMixin\n * @mixes Vaadin.Grid.DynamicColumnsMixin\n * @mixes Vaadin.Grid.FilterMixin\n * @mixes Vaadin.Grid.RowDetailsMixin\n * @mixes Vaadin.Grid.ScrollMixin\n * @mixes Vaadin.Grid.SelectionMixin\n * @mixes Vaadin.Grid.SortMixin\n * @mixes Vaadin.Grid.KeyboardNavigationMixin\n * @mixes Vaadin.Grid.ColumnReorderingMixin\n * @mixes Vaadin.Grid.EventContextMixin\n * @mixes Vaadin.Grid.StylingMixin\n * @mixes Vaadin.Grid.DragAndDropMixin\n * @demo demo/index.html\n */\nclass GridElement extends ElementMixin(ThemableMixin(DataProviderMixin(ArrayDataProviderMixin(DynamicColumnsMixin(ActiveItemMixin(ScrollMixin(SelectionMixin(SortMixin(RowDetailsMixin(KeyboardNavigationMixin(A11yMixin(FilterMixin(ColumnReorderingMixin(ColumnResizingMixin(EventContextMixin(DragAndDropMixin(StylingMixin(ScrollerElement)))))))))))))))))) {\n  static get template() {\n    return html`\n    <style include=\"vaadin-grid-styles\"></style>\n\n    <div id=\"scroller\" no-scrollbars\\$=\"[[!_scrollbarWidth]]\" wheel-scrolling\\$=\"[[_wheelScrolling]]\" safari\\$=\"[[_safari]]\" ios\\$=\"[[_ios]]\" loading\\$=\"[[loading]]\" edge\\$=\"[[_edge]]\" firefox\\$=\"[[_firefox]]\" ie\\$=\"[[_ie]]\" column-reordering-allowed\\$=\"[[columnReorderingAllowed]]\">\n\n      <table id=\"table\" role=\"grid\" aria-multiselectable=\"true\" tabindex=\"0\">\n        <caption id=\"fixedsizer\" class=\"sizer\" part=\"row\"></caption>\n        <thead id=\"header\" role=\"rowgroup\"></thead>\n        <tbody id=\"items\" role=\"rowgroup\"></tbody>\n        <tfoot id=\"footer\" role=\"rowgroup\"></tfoot>\n      </table>\n\n      <div part=\"reorder-ghost\"></div>\n      <vaadin-grid-outer-scroller id=\"outerscroller\" _touch-device=\"[[_touchDevice]]\" scroll-target=\"[[scrollTarget]]\" scroll-handler=\"[[_this]]\" no-scrollbars=\"[[!_scrollbarWidth]]\">\n        <div id=\"outersizer\" class=\"sizer\" part=\"row\"></div>\n      </vaadin-grid-outer-scroller>\n    </div>\n\n    <!-- The template needs at least one slot or else shady doesn't distribute -->\n    <slot name=\"nodistribute\"></slot>\n\n    <div id=\"focusexit\" tabindex=\"0\"></div>\n`;\n  }\n  static get is() {\n    return 'vaadin-grid';\n  }\n  static get version() {\n    return '5.4.5';\n  }\n  static get observers() {\n    return ['_columnTreeChanged(_columnTree, _columnTree.*)'];\n  }\n  static get properties() {\n    return {\n      _this: {\n        type: Object,\n        value: function () {\n          return this;\n        }\n      },\n      _safari: {\n        type: Boolean,\n        value: /^((?!chrome|android).)*safari/i.test(navigator.userAgent)\n      },\n      _ios: {\n        type: Boolean,\n        value: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream\n      },\n      _edge: {\n        type: Boolean,\n        value: typeof CSS !== 'undefined' && CSS.supports('(-ms-ime-align:auto)')\n      },\n      _ie: {\n        type: Boolean,\n        value: !!(navigator.userAgent.match(/Trident/) && !navigator.userAgent.match(/MSIE/))\n      },\n      _firefox: {\n        type: Boolean,\n        value: navigator.userAgent.toLowerCase().indexOf('firefox') > -1\n      },\n      _android: {\n        type: Boolean,\n        value: /android/i.test(navigator.userAgent)\n      },\n      _touchDevice: {\n        type: Boolean,\n        value: TOUCH_DEVICE\n      },\n      /**\n       * If true, the grid's height is defined by the number of its rows.\n       */\n      heightByRows: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        observer: '_heightByRowsChanged'\n      }\n    };\n  }\n  constructor() {\n    super();\n    this.addEventListener('animationend', this._onAnimationEnd);\n  }\n  __hasRowsWithClientHeight() {\n    return !!Array.from(this.$.items.children).filter(row => row.clientHeight).length;\n  }\n  __setInitialColumnWidths() {\n    if (!this._initialColumnWidthsSet && this.__hasRowsWithClientHeight()) {\n      this._initialColumnWidthsSet = true;\n      this.recalculateColumnWidths();\n    }\n  }\n\n  /**\n   * @param {Array<Vaadin.GridColumnElement>} cols the columns to auto size based on their content width\n   */\n  _recalculateColumnWidths(cols) {\n    // Note: The `cols.forEach()` loops below could be implemented as a single loop but this has been\n    // split for performance reasons to batch these similar actions [write/read] together to avoid\n    // unnecessary layout trashing.\n\n    // [write] Set automatic width for all cells (breaks column alignment)\n    cols.forEach(col => {\n      col.width = 'auto';\n      col._origFlexGrow = col.flexGrow;\n      col.flexGrow = 0;\n    });\n    // [read] Measure max cell width in each column\n    cols.forEach(col => {\n      col._currentWidth = 0;\n      // Note: _allCells only contains cells which are currently rendered in DOM\n      col._allCells.forEach(c => {\n        const cellWidth = Math.ceil(c.getBoundingClientRect().width);\n        col._currentWidth = Math.max(col._currentWidth, cellWidth);\n      });\n    });\n    // [write] Set column widths to fit widest measured content\n    cols.forEach(col => {\n      col.width = `${col._currentWidth}px`;\n      col.flexGrow = col._origFlexGrow;\n      col._currentWidth = undefined;\n      col._origFlexGrow = undefined;\n    });\n  }\n\n  /**\n   * Updates the `width` of all columns which have `autoWidth` set to `true`.\n   */\n  recalculateColumnWidths() {\n    if (!this._columnTree) {\n      return; // No columns\n    }\n\n    const cols = this._getColumns().filter(col => !col.hidden && col.autoWidth);\n    this._recalculateColumnWidths(cols);\n  }\n  _createScrollerRows(count) {\n    const rows = [];\n    for (var i = 0; i < count; i++) {\n      const row = document.createElement('tr');\n      row.setAttribute('part', 'row');\n      row.setAttribute('role', 'row');\n      if (this._columnTree) {\n        this._updateRow(row, this._columnTree[this._columnTree.length - 1], 'body', false, true);\n      }\n      rows.push(row);\n    }\n    if (this._columnTree) {\n      this._columnTree[this._columnTree.length - 1].forEach(c => c.notifyPath && c.notifyPath('_cells.*', c._cells));\n    }\n    beforeNextRender(this, () => {\n      this._updateFirstAndLastColumn();\n      this._resetKeyboardNavigation();\n    });\n    return rows;\n  }\n  _getRowTarget() {\n    return this.$.items;\n  }\n  _createCell(tagName) {\n    const contentId = this._contentIndex = this._contentIndex + 1 || 0;\n    const slotName = 'vaadin-grid-cell-content-' + contentId;\n    const cellContent = document.createElement('vaadin-grid-cell-content');\n    cellContent.setAttribute('slot', slotName);\n    const cell = document.createElement(tagName);\n    cell.id = slotName.replace('-content-', '-');\n    cell.setAttribute('tabindex', '-1');\n    cell.setAttribute('role', tagName === 'td' ? 'gridcell' : 'columnheader');\n    const slot = document.createElement('slot');\n    slot.setAttribute('name', slotName);\n    cell.appendChild(slot);\n    cell._content = cellContent;\n\n    // With native Shadow DOM, mousedown on slotted element does not focus\n    // focusable slot wrapper, that is why cells are not focused with\n    // mousedown. Workaround: listen for mousedown and focus manually.\n    cellContent.addEventListener('mousedown', () => {\n      if (window.chrome) {\n        // Chrome bug: focusing before mouseup prevents text selection, see http://crbug.com/771903\n        const mouseUpListener = () => {\n          if (!cellContent.contains(this.getRootNode().activeElement)) {\n            cell.focus();\n          }\n          // If focus is in the cell content — respect it, do not change.\n          document.removeEventListener('mouseup', mouseUpListener, true);\n        };\n        document.addEventListener('mouseup', mouseUpListener, true);\n      } else {\n        // Focus on mouseup, on the other hand, removes selection on Safari.\n        // Watch out sync focus removal issue, only async focus works here.\n        setTimeout(() => {\n          if (!cellContent.contains(this.getRootNode().activeElement)) {\n            cell.focus();\n          }\n        });\n      }\n    });\n    return cell;\n  }\n  _updateRow(row, columns, section, isColumnRow, noNotify) {\n    section = section || 'body';\n    const contentsFragment = document.createDocumentFragment();\n    Array.from(row.children).forEach(cell => cell._vacant = true);\n    row.innerHTML = '';\n    if (row.id !== 'outersizer' && row.id !== 'fixedsizer') {\n      row.hidden = true;\n    }\n    columns.forEach((column, index) => {\n      let cell;\n      if (section === 'body') {\n        // Body\n        column._cells = column._cells || [];\n        cell = column._cells.filter(cell => cell._vacant)[0];\n        if (!cell) {\n          cell = this._createCell('td');\n          column._cells.push(cell);\n        }\n        cell.setAttribute('part', 'cell body-cell');\n        row.appendChild(cell);\n        if (index === columns.length - 1 && (this._rowDetailsTemplate || this.rowDetailsRenderer)) {\n          // Add details cell as last cell to body rows\n          this._detailsCells = this._detailsCells || [];\n          const detailsCell = this._detailsCells.filter(cell => cell._vacant)[0] || this._createCell('td');\n          if (this._detailsCells.indexOf(detailsCell) === -1) {\n            this._detailsCells.push(detailsCell);\n          }\n          if (!detailsCell._content.parentElement) {\n            contentsFragment.appendChild(detailsCell._content);\n          }\n          this._configureDetailsCell(detailsCell);\n          row.appendChild(detailsCell);\n          this._a11ySetRowDetailsCell(row, detailsCell);\n          detailsCell._vacant = false;\n        }\n        if (column.notifyPath && !noNotify) {\n          column.notifyPath('_cells.*', column._cells);\n        }\n      } else {\n        // Header & footer\n        const tagName = section === 'header' ? 'th' : 'td';\n        if (isColumnRow || column.localName === 'vaadin-grid-column-group') {\n          cell = column[`_${section}Cell`] || this._createCell(tagName);\n          cell._column = column;\n          row.appendChild(cell);\n          column[`_${section}Cell`] = cell;\n        } else {\n          column._emptyCells = column._emptyCells || [];\n          cell = column._emptyCells.filter(cell => cell._vacant)[0] || this._createCell(tagName);\n          cell._column = column;\n          row.appendChild(cell);\n          if (column._emptyCells.indexOf(cell) === -1) {\n            column._emptyCells.push(cell);\n          }\n        }\n        cell.setAttribute('part', `cell ${section}-cell`);\n        this.__updateHeaderFooterRowVisibility(row);\n      }\n      if (!cell._content.parentElement) {\n        contentsFragment.appendChild(cell._content);\n      }\n      cell._vacant = false;\n      cell._column = column;\n    });\n\n    // Might be empty if only cache was used\n    this.appendChild(contentsFragment);\n    this._frozenCellsChanged();\n    this._updateFirstAndLastColumnForRow(row);\n  }\n  __updateHeaderFooterRowVisibility(row) {\n    if (!row) {\n      return;\n    }\n    const visibleRowCells = Array.from(row.children).filter(cell => {\n      const column = cell._column;\n      if (column._emptyCells && column._emptyCells.indexOf(cell) > -1) {\n        // The cell is an \"empty cell\"  -> doesn't block hiding the row\n        return false;\n      }\n      if (row.parentElement === this.$.header) {\n        if (column.headerRenderer || column._headerTemplate) {\n          // The cell is the header cell of a column that has a header renderer\n          // or a header template -> row should be visible\n          return true;\n        }\n        if (column.header === null) {\n          // The column header is explicilty set to null -> doesn't block hiding the row\n          return false;\n        }\n        if (column.path || column.header !== undefined) {\n          // The column has an explicit non-null header or a path that generates a header\n          // -> row should be visible\n          return true;\n        }\n      } else {\n        if (column.footerRenderer || column._footerTemplate) {\n          // The cell is the footer cell of a column that has a footer renderer\n          // or a footer template -> row should be visible\n          return true;\n        }\n      }\n    });\n    if (row.hidden !== !visibleRowCells.length) {\n      row.hidden = !visibleRowCells.length;\n      this.notifyResize();\n    }\n  }\n  _updateScrollerItem(row, index) {\n    this._preventScrollerRotatingCellFocus(row, index);\n    if (!this._columnTree) {\n      return;\n    }\n    this._toggleAttribute('first', index === 0, row);\n    this._toggleAttribute('odd', index % 2, row);\n    this._a11yUpdateRowRowindex(row, index);\n    this._getItem(index, row);\n  }\n  _columnTreeChanged(columnTree, splices) {\n    Array.from(this.$.items.children).forEach(row => this._updateRow(row, columnTree[columnTree.length - 1]));\n    while (this.$.header.children.length < columnTree.length) {\n      const headerRow = document.createElement('tr');\n      headerRow.setAttribute('part', 'row');\n      headerRow.setAttribute('role', 'row');\n      this.$.header.appendChild(headerRow);\n      const footerRow = document.createElement('tr');\n      footerRow.setAttribute('part', 'row');\n      footerRow.setAttribute('role', 'row');\n      this.$.footer.appendChild(footerRow);\n    }\n    while (this.$.header.children.length > columnTree.length) {\n      this.$.header.removeChild(this.$.header.firstElementChild);\n      this.$.footer.removeChild(this.$.footer.firstElementChild);\n    }\n    Array.from(this.$.header.children).forEach((headerRow, index) => this._updateRow(headerRow, columnTree[index], 'header', index === columnTree.length - 1));\n    Array.from(this.$.footer.children).forEach((footerRow, index) => this._updateRow(footerRow, columnTree[columnTree.length - 1 - index], 'footer', index === 0));\n\n    // Sizer rows\n    this._updateRow(this.$.outersizer, columnTree[columnTree.length - 1]);\n    this._updateRow(this.$.fixedsizer, columnTree[columnTree.length - 1]);\n    this._resizeHandler();\n    this._frozenCellsChanged();\n    this._updateFirstAndLastColumn();\n    this._resetKeyboardNavigation();\n    this._a11yUpdateHeaderRows();\n    this._a11yUpdateFooterRows();\n  }\n  _updateItem(row, item) {\n    row._item = item;\n    const model = this.__getRowModel(row);\n    this._toggleAttribute('selected', model.selected, row);\n    this._a11yUpdateRowSelected(row, model.selected);\n    this._a11yUpdateRowLevel(row, model.level);\n    this._toggleAttribute('expanded', model.expanded, row);\n    if (this._rowDetailsTemplate || this.rowDetailsRenderer) {\n      this._toggleDetailsCell(row, item);\n    }\n    this._generateCellClassNames(row, model);\n    this._filterDragAndDrop(row, model);\n    Array.from(row.children).forEach(cell => {\n      if (cell._renderer) {\n        const owner = cell._column || this;\n        cell._renderer.call(owner, cell._content, owner, model);\n      } else if (cell._instance) {\n        cell._instance.__detailsOpened__ = model.detailsOpened;\n        cell._instance.__selected__ = model.selected;\n        cell._instance.__level__ = model.level;\n        cell._instance.__expanded__ = model.expanded;\n        cell._instance.setProperties(model);\n      }\n    });\n    this._debouncerUpdateHeights = Debouncer.debounce(this._debouncerUpdateHeights, timeOut.after(1), () => {\n      this._updateMetrics();\n      this._positionItems();\n      this._updateScrollerSize();\n    });\n  }\n  _resizeHandler() {\n    this._updateDetailsCellHeights();\n    this._accessIronListAPI(super._resizeHandler, true);\n    this._updateHeaderFooterMetrics();\n  }\n  _updateHeaderFooterMetrics() {\n    const headerHeight = this.$.header.clientHeight + 'px';\n    const footerHeight = this.$.footer.clientHeight + 'px';\n    [this.$.outersizer, this.$.fixedsizer, this.$.items].forEach(element => {\n      element.style.borderTopWidth = headerHeight;\n      element.style.borderBottomWidth = footerHeight;\n    });\n    afterNextRender(this.$.header, () => {\n      if (this._pendingScrollToIndex) {\n        this._scrollToIndex(this._pendingScrollToIndex);\n      }\n    });\n  }\n  _onAnimationEnd(e) {\n    // ShadyCSS applies scoping suffixes to animation names\n    if (e.animationName.indexOf('vaadin-grid-appear') === 0) {\n      this._render();\n      this._updateHeaderFooterMetrics();\n      e.stopPropagation();\n      this.notifyResize();\n      this.__setInitialColumnWidths();\n    }\n  }\n  _toggleAttribute(name, bool, node) {\n    if (node.hasAttribute(name) === !bool) {\n      if (bool) {\n        node.setAttribute(name, '');\n      } else {\n        node.removeAttribute(name);\n      }\n    }\n  }\n  __getRowModel(row) {\n    return {\n      index: row.index,\n      item: row._item,\n      level: this._getIndexLevel(row.index),\n      expanded: this._isExpanded(row._item),\n      selected: this._isSelected(row._item),\n      detailsOpened: !!(this._rowDetailsTemplate || this.rowDetailsRenderer) && this._isDetailsOpened(row._item)\n    };\n  }\n\n  /**\n   * Manually invoke existing renderers for all the columns\n   * (header, footer and body cells) and opened row details.\n   */\n  render() {\n    if (this._columnTree) {\n      // header and footer renderers\n      this._columnTree.forEach(level => {\n        level.forEach(column => column._renderHeaderAndFooter());\n      });\n\n      // body and row details renderers\n      this._update();\n    }\n  }\n\n  /**\n   * Updates the computed metrics and positioning of internal grid parts\n   * (row/details cell positioning etc). Needs to be invoked whenever the sizing of grid\n   * content changes asynchronously to ensure consistent appearance (e.g. when a\n   * contained image whose bounds aren't known beforehand finishes loading).\n   */\n  notifyResize() {\n    super.notifyResize();\n  }\n  _heightByRowsChanged(value, oldValue) {\n    if (value || oldValue) {\n      this.notifyResize();\n    }\n  }\n  __forceReflow() {\n    this._debouncerForceReflow = Debouncer.debounce(this._debouncerForceReflow, animationFrame, () => {\n      this.$.scroller.style.overflow = 'hidden';\n      setTimeout(() => this.$.scroller.style.overflow = '');\n    });\n  }\n}\n\n/**\n * Fired when the columns in the grid are reordered.\n *\n * @event column-reorder\n * @param {Object} detail\n * @param {Object} detail.columns the columns in the new order\n */\n\ncustomElements.define(GridElement.is, GridElement);\nexport { GridElement };","map":{"version":3,"names":["ThemableMixin","ScrollerElement","A11yMixin","ActiveItemMixin","ArrayDataProviderMixin","ColumnResizingMixin","DataProviderMixin","DynamicColumnsMixin","EventContextMixin","FilterMixin","RowDetailsMixin","ScrollMixin","SelectionMixin","SortMixin","StylingMixin","DragAndDropMixin","KeyboardNavigationMixin","ColumnReorderingMixin","ElementMixin","html","beforeNextRender","afterNextRender","Debouncer","timeOut","animationFrame","TOUCH_DEVICE","document","createEvent","e","GridElement","template","is","version","observers","properties","_this","type","Object","value","_safari","Boolean","test","navigator","userAgent","_ios","window","MSStream","_edge","CSS","supports","_ie","match","_firefox","toLowerCase","indexOf","_android","_touchDevice","heightByRows","reflectToAttribute","observer","constructor","addEventListener","_onAnimationEnd","__hasRowsWithClientHeight","Array","from","$","items","children","filter","row","clientHeight","length","__setInitialColumnWidths","_initialColumnWidthsSet","recalculateColumnWidths","_recalculateColumnWidths","cols","forEach","col","width","_origFlexGrow","flexGrow","_currentWidth","_allCells","c","cellWidth","Math","ceil","getBoundingClientRect","max","undefined","_columnTree","_getColumns","hidden","autoWidth","_createScrollerRows","count","rows","i","createElement","setAttribute","_updateRow","push","notifyPath","_cells","_updateFirstAndLastColumn","_resetKeyboardNavigation","_getRowTarget","_createCell","tagName","contentId","_contentIndex","slotName","cellContent","cell","id","replace","slot","appendChild","_content","chrome","mouseUpListener","contains","getRootNode","activeElement","focus","removeEventListener","setTimeout","columns","section","isColumnRow","noNotify","contentsFragment","createDocumentFragment","_vacant","innerHTML","column","index","_rowDetailsTemplate","rowDetailsRenderer","_detailsCells","detailsCell","parentElement","_configureDetailsCell","_a11ySetRowDetailsCell","localName","_column","_emptyCells","__updateHeaderFooterRowVisibility","_frozenCellsChanged","_updateFirstAndLastColumnForRow","visibleRowCells","header","headerRenderer","_headerTemplate","path","footerRenderer","_footerTemplate","notifyResize","_updateScrollerItem","_preventScrollerRotatingCellFocus","_toggleAttribute","_a11yUpdateRowRowindex","_getItem","_columnTreeChanged","columnTree","splices","headerRow","footerRow","footer","removeChild","firstElementChild","outersizer","fixedsizer","_resizeHandler","_a11yUpdateHeaderRows","_a11yUpdateFooterRows","_updateItem","item","_item","model","__getRowModel","selected","_a11yUpdateRowSelected","_a11yUpdateRowLevel","level","expanded","_toggleDetailsCell","_generateCellClassNames","_filterDragAndDrop","_renderer","owner","call","_instance","__detailsOpened__","detailsOpened","__selected__","__level__","__expanded__","setProperties","_debouncerUpdateHeights","debounce","after","_updateMetrics","_positionItems","_updateScrollerSize","_updateDetailsCellHeights","_accessIronListAPI","_updateHeaderFooterMetrics","headerHeight","footerHeight","element","style","borderTopWidth","borderBottomWidth","_pendingScrollToIndex","_scrollToIndex","animationName","_render","stopPropagation","name","bool","node","hasAttribute","removeAttribute","_getIndexLevel","_isExpanded","_isSelected","_isDetailsOpened","render","_renderHeaderAndFooter","_update","_heightByRowsChanged","oldValue","__forceReflow","_debouncerForceReflow","scroller","overflow","customElements","define"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/vaadin-grid/src/vaadin-grid.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ScrollerElement } from './vaadin-grid-scroller.js';\nimport { A11yMixin } from './vaadin-grid-a11y-mixin.js';\nimport { ActiveItemMixin } from './vaadin-grid-active-item-mixin.js';\nimport { ArrayDataProviderMixin } from './vaadin-grid-array-data-provider-mixin.js';\nimport { ColumnResizingMixin } from './vaadin-grid-column-resizing-mixin.js';\nimport { DataProviderMixin } from './vaadin-grid-data-provider-mixin.js';\nimport { DynamicColumnsMixin } from './vaadin-grid-dynamic-columns-mixin.js';\nimport { EventContextMixin } from './vaadin-grid-event-context-mixin.js';\nimport { FilterMixin } from './vaadin-grid-filter-mixin.js';\nimport { RowDetailsMixin } from './vaadin-grid-row-details-mixin.js';\nimport { ScrollMixin } from './vaadin-grid-scroll-mixin.js';\nimport { SelectionMixin } from './vaadin-grid-selection-mixin.js';\nimport { SortMixin } from './vaadin-grid-sort-mixin.js';\nimport { StylingMixin } from './vaadin-grid-styling-mixin.js';\nimport { DragAndDropMixin } from './vaadin-grid-drag-and-drop-mixin.js';\nimport { KeyboardNavigationMixin } from './vaadin-grid-keyboard-navigation-mixin.js';\nimport { ColumnReorderingMixin } from './vaadin-grid-column-reordering-mixin.js';\nimport './vaadin-grid-column.js';\nimport './vaadin-grid-outer-scroller.js';\nimport './vaadin-grid-styles.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { beforeNextRender, afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { timeOut, animationFrame } from '@polymer/polymer/lib/utils/async.js';\n\nconst TOUCH_DEVICE = (() => {\n  try {\n    document.createEvent('TouchEvent');\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n/**\n *\n * `<vaadin-grid>` is a free, high quality data grid / data table Web Component. The content of the\n * the grid can be populated in two ways: imperatively by using renderer callback function and\n * declaratively by using Polymer's Templates.\n *\n * ### Quick Start\n *\n * Start with an assigning an array to the [`items`](#/elements/vaadin-grid#property-items) property to visualize your data.\n *\n * Use the [`<vaadin-grid-column>`](#/elements/vaadin-grid-column) element to configure the grid columns. Set `path` and `header`\n * shorthand properties for the columns to define what gets rendered in the cells of the column.\n *\n * #### Example:\n * ```html\n * <vaadin-grid>\n *   <vaadin-grid-column path=\"name.first\" header=\"First name\"></vaadin-grid-column>\n *   <vaadin-grid-column path=\"name.last\" header=\"Last name\"></vaadin-grid-column>\n *   <vaadin-grid-column path=\"email\"></vaadin-grid-column>\n * </vaadin-grid>\n * ```\n *\n * For custom content `vaadin-grid-column` element provides you with three types of `renderer` callback functions: `headerRenderer`,\n * `renderer` and `footerRenderer`.\n *\n * Each of those renderer functions provides `root`, `column`, `rowData` arguments when applicable.\n * Generate DOM content, append it to the `root` element and control the state\n * of the host element by accessing `column`. Before generating new content,\n * users are able to check if there is already content in `root` for reusing it.\n *\n * Renderers are called on initialization of new column cells and each time the\n * related row data is updated. DOM generated during the renderer call can be reused\n * in the next renderer call and will be provided with the `root` argument.\n * On first call it will be empty.\n *\n * #### Example:\n * ```html\n * <vaadin-grid>\n *   <vaadin-grid-column></vaadin-grid-column>\n *   <vaadin-grid-column></vaadin-grid-column>\n *   <vaadin-grid-column></vaadin-grid-column>\n * </vaadin-grid>\n * ```\n * ```js\n * const grid = document.querySelector('vaadin-grid');\n * grid.items = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'},\n *               {'name': 'Ringo', 'surname': 'Starr', 'role': 'drums'}];\n *\n * const columns = grid.querySelectorAll('vaadin-grid-column');\n *\n * columns[0].headerRenderer = function(root) {\n *   root.textContent = 'Name';\n * };\n * columns[0].renderer = function(root, column, rowData) {\n *   root.textContent = rowData.item.name;\n * };\n *\n * columns[1].headerRenderer = function(root) {\n *   root.textContent = 'Surname';\n * };\n * columns[1].renderer = function(root, column, rowData) {\n *   root.textContent = rowData.item.surname;\n * };\n *\n * columns[2].headerRenderer = function(root) {\n *   root.textContent = 'Role';\n * };\n * columns[2].renderer = function(root, column, rowData) {\n *   root.textContent = rowData.item.role;\n * };\n * ```\n *\n * Alternatively, the content can be provided with Polymer's Templates:\n *\n * #### Example:\n * ```html\n * <vaadin-grid items='[{\"name\": \"John\", \"surname\": \"Lennon\", \"role\": \"singer\"},\n * {\"name\": \"Ringo\", \"surname\": \"Starr\", \"role\": \"drums\"}]'>\n *   <vaadin-grid-column>\n *     <template class=\"header\">Name</template>\n *     <template>[[item.name]]</template>\n *   </vaadin-grid-column>\n *   <vaadin-grid-column>\n *     <template class=\"header\">Surname</template>\n *     <template>[[item.surname]]</template>\n *   </vaadin-grid-column>\n *   <vaadin-grid-column>\n *     <template class=\"header\">Role</template>\n *     <template>[[item.role]]</template>\n *   </vaadin-grid-column>\n * </vaadin-grid>\n * ```\n *\n * The following helper elements can be used for further customization:\n * - [`<vaadin-grid-column-group>`](#/elements/vaadin-grid-column-group)\n * - [`<vaadin-grid-filter>`](#/elements/vaadin-grid-filter)\n * - [`<vaadin-grid-sorter>`](#/elements/vaadin-grid-sorter)\n * - [`<vaadin-grid-selection-column>`](#/elements/vaadin-grid-selection-column)\n * - [`<vaadin-grid-tree-toggle>`](#/elements/vaadin-grid-tree-toggle)\n *\n * __Note that the helper elements must be explicitly imported.__\n * If you want to import everything at once you can use the `all-imports.html` bundle.\n *\n * A column template can be decorated with one the following class names to specify its purpose\n * - `header`: Marks a header template\n * - `footer`: Marks a footer template\n * - `row-details`: Marks a row details template\n *\n * The following built-in template variables can be bound to inside the column templates:\n * - `[[index]]`: Number representing the row index\n * - `[[item]]` and it's sub-properties: Data object (provided by a data provider / items array)\n * - `{{selected}}`: True if the item is selected (can be two-way bound)\n * - `{{detailsOpened}}`: True if the item has row details opened (can be two-way bound)\n * - `{{expanded}}`: True if the item has tree sublevel expanded (can be two-way bound)\n * - `[[level]]`: Number of the tree sublevel of the item, first level-items have 0\n *\n * ### Lazy Loading with Function Data Provider\n *\n * In addition to assigning an array to the items property, you can alternatively\n * provide the `<vaadin-grid>` data through the\n * [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) function property.\n * The `<vaadin-grid>` calls this function lazily, only when it needs more data\n * to be displayed.\n *\n * See the [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) in\n * the API reference below for the detailed data provider arguments description,\n * and the “Assigning Data” page in the demos.\n *\n * __Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__\n *\n * __Also, note that when using function data providers, the total number of items\n * needs to be set manually. The total number of items can be returned\n * in the second argument of the data provider callback:__\n *\n * ```javascript\n * grid.dataProvider = function(params, callback) {\n *   var url = 'https://api.example/data' +\n *       '?page=' + params.page +        // the requested page index\n *       '&per_page=' + params.pageSize; // number of items on the page\n *   var xhr = new XMLHttpRequest();\n *   xhr.onload = function() {\n *     var response = JSON.parse(xhr.responseText);\n *     callback(\n *       response.employees, // requested page of items\n *       response.totalSize  // total number of items\n *     );\n *   };\n *   xhr.open('GET', url, true);\n *   xhr.send();\n * };\n * ```\n *\n * __Alternatively, you can use the `size` property to set the total number of items:__\n *\n * ```javascript\n * grid.size = 200; // The total number of items\n * grid.dataProvider = function(params, callback) {\n *   var url = 'https://api.example/data' +\n *       '?page=' + params.page +        // the requested page index\n *       '&per_page=' + params.pageSize; // number of items on the page\n *   var xhr = new XMLHttpRequest();\n *   xhr.onload = function() {\n *     var response = JSON.parse(xhr.responseText);\n *     callback(response.employees);\n *   };\n *   xhr.open('GET', url, true);\n *   xhr.send();\n * };\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------------|----------------\n * `row` | Row in the internal table\n * `cell` | Cell in the internal table\n * `header-cell` | Header cell in the internal table\n * `body-cell` | Body cell in the internal table\n * `footer-cell` | Footer cell in the internal table\n * `details-cell` | Row details cell in the internal table\n * `resize-handle` | Handle for resizing the columns\n * `reorder-ghost` | Ghost element of the header cell being dragged\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * -------------|-------------|------------\n * `loading` | Set when the grid is loading data from data provider | :host\n * `interacting` | Keyboard navigation in interaction mode | :host\n * `navigating` | Keyboard navigation in navigation mode | :host\n * `overflow` | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `left`, `right` | :host\n * `reordering` | Set when the grid's columns are being reordered | :host\n * `dragover` | Set when the grid (not a specific row) is dragged over | :host\n * `dragging-rows` : Set when grid rows are dragged  | :host\n * `reorder-status` | Reflects the status of a cell while columns are being reordered | cell\n * `frozen` | Frozen cell | cell\n * `last-frozen` | Last frozen cell | cell\n* * `first-column` | First visible cell on a row | cell\n * `last-column` | Last visible cell on a row | cell\n * `selected` | Selected row | row\n * `expanded` | Expanded row | row\n * `loading` | Row that is waiting for data from data provider | row\n * `odd` | Odd row | row\n * `first` | The first body row | row\n * `dragstart` | Set for one frame when drag of a row is starting. The value is a number when multiple rows are dragged | row\n * `dragover` | Set when the row is dragged over | row\n * `drag-disabled` | Set to a row that isn't available for dragging | row\n * `drop-disabled` | Set to a row that can't be dropped on top of | row\n *\n * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)\n *\n * @memberof Vaadin\n * @mixes Vaadin.ThemableMixin\n * @mixes Vaadin.Grid.A11yMixin\n * @mixes Vaadin.Grid.ActiveItemMixin\n * @mixes Vaadin.Grid.ArrayDataProviderMixin\n * @mixes Vaadin.Grid.ColumnResizingMixin\n * @mixes Vaadin.Grid.DataProviderMixin\n * @mixes Vaadin.Grid.DynamicColumnsMixin\n * @mixes Vaadin.Grid.FilterMixin\n * @mixes Vaadin.Grid.RowDetailsMixin\n * @mixes Vaadin.Grid.ScrollMixin\n * @mixes Vaadin.Grid.SelectionMixin\n * @mixes Vaadin.Grid.SortMixin\n * @mixes Vaadin.Grid.KeyboardNavigationMixin\n * @mixes Vaadin.Grid.ColumnReorderingMixin\n * @mixes Vaadin.Grid.EventContextMixin\n * @mixes Vaadin.Grid.StylingMixin\n * @mixes Vaadin.Grid.DragAndDropMixin\n * @demo demo/index.html\n */\nclass GridElement extends\n  ElementMixin(\n    ThemableMixin(\n      DataProviderMixin(\n        ArrayDataProviderMixin(\n          DynamicColumnsMixin(\n            ActiveItemMixin(\n              ScrollMixin(\n                SelectionMixin(\n                  SortMixin(\n                    RowDetailsMixin(\n                      KeyboardNavigationMixin(\n                        A11yMixin(\n                          FilterMixin(\n                            ColumnReorderingMixin(\n                              ColumnResizingMixin(\n                                EventContextMixin(\n                                  DragAndDropMixin(\n                                    StylingMixin(\n                                      ScrollerElement)))))))))))))))))) {\n  static get template() {\n    return html`\n    <style include=\"vaadin-grid-styles\"></style>\n\n    <div id=\"scroller\" no-scrollbars\\$=\"[[!_scrollbarWidth]]\" wheel-scrolling\\$=\"[[_wheelScrolling]]\" safari\\$=\"[[_safari]]\" ios\\$=\"[[_ios]]\" loading\\$=\"[[loading]]\" edge\\$=\"[[_edge]]\" firefox\\$=\"[[_firefox]]\" ie\\$=\"[[_ie]]\" column-reordering-allowed\\$=\"[[columnReorderingAllowed]]\">\n\n      <table id=\"table\" role=\"grid\" aria-multiselectable=\"true\" tabindex=\"0\">\n        <caption id=\"fixedsizer\" class=\"sizer\" part=\"row\"></caption>\n        <thead id=\"header\" role=\"rowgroup\"></thead>\n        <tbody id=\"items\" role=\"rowgroup\"></tbody>\n        <tfoot id=\"footer\" role=\"rowgroup\"></tfoot>\n      </table>\n\n      <div part=\"reorder-ghost\"></div>\n      <vaadin-grid-outer-scroller id=\"outerscroller\" _touch-device=\"[[_touchDevice]]\" scroll-target=\"[[scrollTarget]]\" scroll-handler=\"[[_this]]\" no-scrollbars=\"[[!_scrollbarWidth]]\">\n        <div id=\"outersizer\" class=\"sizer\" part=\"row\"></div>\n      </vaadin-grid-outer-scroller>\n    </div>\n\n    <!-- The template needs at least one slot or else shady doesn't distribute -->\n    <slot name=\"nodistribute\"></slot>\n\n    <div id=\"focusexit\" tabindex=\"0\"></div>\n`;\n  }\n\n  static get is() {\n    return 'vaadin-grid';\n  }\n\n  static get version() {\n    return '5.4.5';\n  }\n\n  static get observers() {\n    return [\n      '_columnTreeChanged(_columnTree, _columnTree.*)'\n    ];\n  }\n\n  static get properties() {\n    return {\n\n      _this: {\n        type: Object,\n        value: function() {\n          return this;\n        }\n      },\n\n      _safari: {\n        type: Boolean,\n        value: /^((?!chrome|android).)*safari/i.test(navigator.userAgent)\n      },\n\n      _ios: {\n        type: Boolean,\n        value: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream\n      },\n\n      _edge: {\n        type: Boolean,\n        value: typeof CSS !== 'undefined' && CSS.supports('(-ms-ime-align:auto)')\n      },\n\n      _ie: {\n        type: Boolean,\n        value: !!(navigator.userAgent.match(/Trident/) && !navigator.userAgent.match(/MSIE/))\n      },\n\n      _firefox: {\n        type: Boolean,\n        value: navigator.userAgent.toLowerCase().indexOf('firefox') > -1\n      },\n\n      _android: {\n        type: Boolean,\n        value: /android/i.test(navigator.userAgent)\n      },\n\n      _touchDevice: {\n        type: Boolean,\n        value: TOUCH_DEVICE\n      },\n\n      /**\n       * If true, the grid's height is defined by the number of its rows.\n       */\n      heightByRows: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        observer: '_heightByRowsChanged'\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.addEventListener('animationend', this._onAnimationEnd);\n  }\n\n  __hasRowsWithClientHeight() {\n    return !!Array.from(this.$.items.children).filter(row => row.clientHeight).length;\n  }\n\n  __setInitialColumnWidths() {\n    if (!this._initialColumnWidthsSet && this.__hasRowsWithClientHeight()) {\n      this._initialColumnWidthsSet = true;\n      this.recalculateColumnWidths();\n    }\n  }\n\n  /**\n   * @param {Array<Vaadin.GridColumnElement>} cols the columns to auto size based on their content width\n   */\n  _recalculateColumnWidths(cols) {\n    // Note: The `cols.forEach()` loops below could be implemented as a single loop but this has been\n    // split for performance reasons to batch these similar actions [write/read] together to avoid\n    // unnecessary layout trashing.\n\n    // [write] Set automatic width for all cells (breaks column alignment)\n    cols.forEach(col => {\n      col.width = 'auto';\n      col._origFlexGrow = col.flexGrow;\n      col.flexGrow = 0;\n    });\n    // [read] Measure max cell width in each column\n    cols.forEach(col => {\n      col._currentWidth = 0;\n      // Note: _allCells only contains cells which are currently rendered in DOM\n      col._allCells.forEach(c => {\n        const cellWidth = Math.ceil(c.getBoundingClientRect().width);\n        col._currentWidth = Math.max(col._currentWidth, cellWidth);\n      });\n    });\n    // [write] Set column widths to fit widest measured content\n    cols.forEach(col => {\n      col.width = `${col._currentWidth}px`;\n      col.flexGrow = col._origFlexGrow;\n      col._currentWidth = undefined;\n      col._origFlexGrow = undefined;\n    });\n  }\n\n  /**\n   * Updates the `width` of all columns which have `autoWidth` set to `true`.\n   */\n  recalculateColumnWidths() {\n    if (!this._columnTree) {\n      return; // No columns\n    }\n    const cols = this._getColumns().filter(col => !col.hidden && col.autoWidth);\n    this._recalculateColumnWidths(cols);\n  }\n\n  _createScrollerRows(count) {\n    const rows = [];\n    for (var i = 0; i < count; i++) {\n      const row = document.createElement('tr');\n      row.setAttribute('part', 'row');\n      row.setAttribute('role', 'row');\n      if (this._columnTree) {\n        this._updateRow(row, this._columnTree[this._columnTree.length - 1], 'body', false, true);\n      }\n      rows.push(row);\n    }\n\n    if (this._columnTree) {\n      this._columnTree[this._columnTree.length - 1].forEach(c => c.notifyPath && c.notifyPath('_cells.*', c._cells));\n    }\n\n    beforeNextRender(this, () => {\n      this._updateFirstAndLastColumn();\n      this._resetKeyboardNavigation();\n    });\n    return rows;\n  }\n\n  _getRowTarget() {\n    return this.$.items;\n  }\n\n  _createCell(tagName) {\n    const contentId = this._contentIndex = this._contentIndex + 1 || 0;\n    const slotName = 'vaadin-grid-cell-content-' + contentId;\n\n    const cellContent = document.createElement('vaadin-grid-cell-content');\n    cellContent.setAttribute('slot', slotName);\n\n    const cell = document.createElement(tagName);\n    cell.id = slotName.replace('-content-', '-');\n    cell.setAttribute('tabindex', '-1');\n    cell.setAttribute('role', tagName === 'td' ? 'gridcell' : 'columnheader');\n\n    const slot = document.createElement('slot');\n    slot.setAttribute('name', slotName);\n\n    cell.appendChild(slot);\n\n    cell._content = cellContent;\n\n    // With native Shadow DOM, mousedown on slotted element does not focus\n    // focusable slot wrapper, that is why cells are not focused with\n    // mousedown. Workaround: listen for mousedown and focus manually.\n    cellContent.addEventListener('mousedown', () => {\n      if (window.chrome) {\n        // Chrome bug: focusing before mouseup prevents text selection, see http://crbug.com/771903\n        const mouseUpListener = () => {\n          if (!cellContent.contains(this.getRootNode().activeElement)) {\n            cell.focus();\n          }\n          // If focus is in the cell content — respect it, do not change.\n          document.removeEventListener('mouseup', mouseUpListener, true);\n        };\n        document.addEventListener('mouseup', mouseUpListener, true);\n      } else {\n        // Focus on mouseup, on the other hand, removes selection on Safari.\n        // Watch out sync focus removal issue, only async focus works here.\n        setTimeout(() => {\n          if (!cellContent.contains(this.getRootNode().activeElement)) {\n            cell.focus();\n          }\n        });\n      }\n    });\n\n    return cell;\n  }\n\n  _updateRow(row, columns, section, isColumnRow, noNotify) {\n    section = section || 'body';\n\n    const contentsFragment = document.createDocumentFragment();\n\n    Array.from(row.children).forEach(cell => cell._vacant = true);\n    row.innerHTML = '';\n    if (row.id !== 'outersizer' && row.id !== 'fixedsizer') {\n      row.hidden = true;\n    }\n    columns.forEach((column, index) => {\n      let cell;\n\n      if (section === 'body') {\n        // Body\n        column._cells = column._cells || [];\n        cell = column._cells.filter(cell => cell._vacant)[0];\n        if (!cell) {\n          cell = this._createCell('td');\n          column._cells.push(cell);\n        }\n        cell.setAttribute('part', 'cell body-cell');\n        row.appendChild(cell);\n\n        if (index === columns.length - 1 && (this._rowDetailsTemplate || this.rowDetailsRenderer)) {\n          // Add details cell as last cell to body rows\n          this._detailsCells = this._detailsCells || [];\n          const detailsCell = this._detailsCells.filter(cell => cell._vacant)[0] || this._createCell('td');\n          if (this._detailsCells.indexOf(detailsCell) === -1) {\n            this._detailsCells.push(detailsCell);\n          }\n          if (!detailsCell._content.parentElement) {\n            contentsFragment.appendChild(detailsCell._content);\n          }\n          this._configureDetailsCell(detailsCell);\n          row.appendChild(detailsCell);\n          this._a11ySetRowDetailsCell(row, detailsCell);\n          detailsCell._vacant = false;\n        }\n\n        if (column.notifyPath && !noNotify) {\n          column.notifyPath('_cells.*', column._cells);\n        }\n      } else {\n        // Header & footer\n        const tagName = section === 'header' ? 'th' : 'td';\n        if (isColumnRow || column.localName === 'vaadin-grid-column-group') {\n          cell = column[`_${section}Cell`] || this._createCell(tagName);\n          cell._column = column;\n          row.appendChild(cell);\n          column[`_${section}Cell`] = cell;\n        } else {\n          column._emptyCells = column._emptyCells || [];\n          cell = column._emptyCells.filter(cell => cell._vacant)[0] || this._createCell(tagName);\n          cell._column = column;\n          row.appendChild(cell);\n          if (column._emptyCells.indexOf(cell) === -1) {\n            column._emptyCells.push(cell);\n          }\n        }\n        cell.setAttribute('part', `cell ${section}-cell`);\n        this.__updateHeaderFooterRowVisibility(row);\n      }\n\n      if (!cell._content.parentElement) {\n        contentsFragment.appendChild(cell._content);\n      }\n      cell._vacant = false;\n      cell._column = column;\n    });\n\n    // Might be empty if only cache was used\n    this.appendChild(contentsFragment);\n\n    this._frozenCellsChanged();\n    this._updateFirstAndLastColumnForRow(row);\n  }\n\n  __updateHeaderFooterRowVisibility(row) {\n    if (!row) {\n      return;\n    }\n\n    const visibleRowCells = Array.from(row.children).filter(cell => {\n      const column = cell._column;\n      if (column._emptyCells && column._emptyCells.indexOf(cell) > -1) {\n        // The cell is an \"empty cell\"  -> doesn't block hiding the row\n        return false;\n      }\n      if (row.parentElement === this.$.header) {\n        if (column.headerRenderer || column._headerTemplate) {\n          // The cell is the header cell of a column that has a header renderer\n          // or a header template -> row should be visible\n          return true;\n        }\n        if (column.header === null) {\n          // The column header is explicilty set to null -> doesn't block hiding the row\n          return false;\n        }\n        if (column.path || column.header !== undefined) {\n          // The column has an explicit non-null header or a path that generates a header\n          // -> row should be visible\n          return true;\n        }\n      } else {\n        if (column.footerRenderer || column._footerTemplate) {\n          // The cell is the footer cell of a column that has a footer renderer\n          // or a footer template -> row should be visible\n          return true;\n        }\n      }\n    });\n\n    if (row.hidden !== !visibleRowCells.length) {\n      row.hidden = !visibleRowCells.length;\n      this.notifyResize();\n    }\n  }\n\n  _updateScrollerItem(row, index) {\n    this._preventScrollerRotatingCellFocus(row, index);\n\n    if (!this._columnTree) {\n      return;\n    }\n\n    this._toggleAttribute('first', index === 0, row);\n    this._toggleAttribute('odd', index % 2, row);\n    this._a11yUpdateRowRowindex(row, index);\n    this._getItem(index, row);\n  }\n\n  _columnTreeChanged(columnTree, splices) {\n    Array.from(this.$.items.children).forEach(row => this._updateRow(row, columnTree[columnTree.length - 1]));\n\n    while (this.$.header.children.length < columnTree.length) {\n      const headerRow = document.createElement('tr');\n      headerRow.setAttribute('part', 'row');\n      headerRow.setAttribute('role', 'row');\n      this.$.header.appendChild(headerRow);\n\n      const footerRow = document.createElement('tr');\n      footerRow.setAttribute('part', 'row');\n      footerRow.setAttribute('role', 'row');\n      this.$.footer.appendChild(footerRow);\n    }\n    while (this.$.header.children.length > columnTree.length) {\n      this.$.header.removeChild(this.$.header.firstElementChild);\n      this.$.footer.removeChild(this.$.footer.firstElementChild);\n    }\n\n    Array.from(this.$.header.children)\n      .forEach((headerRow, index) => this._updateRow(headerRow, columnTree[index], 'header', index === columnTree.length - 1));\n\n    Array.from(this.$.footer.children)\n      .forEach((footerRow, index) => this._updateRow(footerRow, columnTree[columnTree.length - 1 - index], 'footer', index === 0));\n\n    // Sizer rows\n    this._updateRow(this.$.outersizer, columnTree[columnTree.length - 1]);\n    this._updateRow(this.$.fixedsizer, columnTree[columnTree.length - 1]);\n\n    this._resizeHandler();\n    this._frozenCellsChanged();\n    this._updateFirstAndLastColumn();\n    this._resetKeyboardNavigation();\n    this._a11yUpdateHeaderRows();\n    this._a11yUpdateFooterRows();\n  }\n\n  _updateItem(row, item) {\n    row._item = item;\n    const model = this.__getRowModel(row);\n\n    this._toggleAttribute('selected', model.selected, row);\n    this._a11yUpdateRowSelected(row, model.selected);\n    this._a11yUpdateRowLevel(row, model.level);\n    this._toggleAttribute('expanded', model.expanded, row);\n    if (this._rowDetailsTemplate || this.rowDetailsRenderer) {\n      this._toggleDetailsCell(row, item);\n    }\n    this._generateCellClassNames(row, model);\n    this._filterDragAndDrop(row, model);\n\n    Array.from(row.children).forEach(cell => {\n      if (cell._renderer) {\n        const owner = cell._column || this;\n        cell._renderer.call(owner, cell._content, owner, model);\n      } else if (cell._instance) {\n        cell._instance.__detailsOpened__ = model.detailsOpened;\n        cell._instance.__selected__ = model.selected;\n        cell._instance.__level__ = model.level;\n        cell._instance.__expanded__ = model.expanded;\n        cell._instance.setProperties(model);\n      }\n    });\n\n    this._debouncerUpdateHeights = Debouncer.debounce(this._debouncerUpdateHeights,\n      timeOut.after(1), () => {\n        this._updateMetrics();\n        this._positionItems();\n        this._updateScrollerSize();\n      }\n    );\n  }\n\n  _resizeHandler() {\n    this._updateDetailsCellHeights();\n    this._accessIronListAPI(super._resizeHandler, true);\n    this._updateHeaderFooterMetrics();\n  }\n\n  _updateHeaderFooterMetrics() {\n    const headerHeight = this.$.header.clientHeight + 'px';\n    const footerHeight = this.$.footer.clientHeight + 'px';\n    [this.$.outersizer, this.$.fixedsizer, this.$.items].forEach(element => {\n      element.style.borderTopWidth = headerHeight;\n      element.style.borderBottomWidth = footerHeight;\n    });\n\n    afterNextRender(this.$.header, () => {\n      if (this._pendingScrollToIndex) {\n        this._scrollToIndex(this._pendingScrollToIndex);\n      }\n    });\n  }\n\n  _onAnimationEnd(e) {\n    // ShadyCSS applies scoping suffixes to animation names\n    if (e.animationName.indexOf('vaadin-grid-appear') === 0) {\n      this._render();\n      this._updateHeaderFooterMetrics();\n      e.stopPropagation();\n      this.notifyResize();\n      this.__setInitialColumnWidths();\n    }\n  }\n\n  _toggleAttribute(name, bool, node) {\n    if (node.hasAttribute(name) === !bool) {\n      if (bool) {\n        node.setAttribute(name, '');\n      } else {\n        node.removeAttribute(name);\n      }\n    }\n  }\n\n  __getRowModel(row) {\n    return {\n      index: row.index,\n      item: row._item,\n      level: this._getIndexLevel(row.index),\n      expanded: this._isExpanded(row._item),\n      selected: this._isSelected(row._item),\n      detailsOpened:\n        !!(this._rowDetailsTemplate || this.rowDetailsRenderer) && this._isDetailsOpened(row._item)\n    };\n  }\n\n  /**\n   * Manually invoke existing renderers for all the columns\n   * (header, footer and body cells) and opened row details.\n   */\n  render() {\n    if (this._columnTree) {\n      // header and footer renderers\n      this._columnTree.forEach(level => {\n        level.forEach(column => column._renderHeaderAndFooter());\n      });\n\n      // body and row details renderers\n      this._update();\n    }\n  }\n\n  /**\n   * Updates the computed metrics and positioning of internal grid parts\n   * (row/details cell positioning etc). Needs to be invoked whenever the sizing of grid\n   * content changes asynchronously to ensure consistent appearance (e.g. when a\n   * contained image whose bounds aren't known beforehand finishes loading).\n   */\n  notifyResize() {\n    super.notifyResize();\n  }\n\n  _heightByRowsChanged(value, oldValue) {\n    if (value || oldValue) {\n      this.notifyResize();\n    }\n  }\n\n  __forceReflow() {\n    this._debouncerForceReflow = Debouncer.debounce(this._debouncerForceReflow,\n      animationFrame, () => {\n        this.$.scroller.style.overflow = 'hidden';\n        setTimeout(() => this.$.scroller.style.overflow = '');\n      }\n    );\n  }\n}\n\n/**\n * Fired when the columns in the grid are reordered.\n *\n * @event column-reorder\n * @param {Object} detail\n * @param {Object} detail.columns the columns in the new order\n */\n\ncustomElements.define(GridElement.is, GridElement);\nexport { GridElement };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,oCAAoC;AAE3C,SAASA,aAAa,QAAQ,wDAAwD;AACtF,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,eAAe,QAAQ,oCAAoC;AACpE,SAASC,sBAAsB,QAAQ,4CAA4C;AACnF,SAASC,mBAAmB,QAAQ,wCAAwC;AAC5E,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,mBAAmB,QAAQ,wCAAwC;AAC5E,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,eAAe,QAAQ,oCAAoC;AACpE,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,SAASC,uBAAuB,QAAQ,4CAA4C;AACpF,SAASC,qBAAqB,QAAQ,0CAA0C;AAChF,OAAO,yBAAyB;AAChC,OAAO,iCAAiC;AACxC,OAAO,yBAAyB;AAChC,SAASC,YAAY,QAAQ,sDAAsD;AACnF,SAASC,IAAI,QAAQ,wCAAwC;AAC7D,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,6CAA6C;AAC/F,SAASC,SAAS,QAAQ,wCAAwC;AAClE,SAASC,OAAO,EAAEC,cAAc,QAAQ,qCAAqC;AAE7E,MAAMC,YAAY,GAAG,CAAC,MAAM;EAC1B,IAAI;IACFC,QAAQ,CAACC,WAAW,CAAC,YAAY,CAAC;IAClC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC,EAAE,CAAC;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SACfX,YAAY,CACVlB,aAAa,CACXM,iBAAiB,CACfF,sBAAsB,CACpBG,mBAAmB,CACjBJ,eAAe,CACbQ,WAAW,CACTC,cAAc,CACZC,SAAS,CACPH,eAAe,CACbM,uBAAuB,CACrBd,SAAS,CACPO,WAAW,CACTQ,qBAAqB,CACnBZ,mBAAmB,CACjBG,iBAAiB,CACfO,gBAAgB,CACdD,YAAY,CACVb,eAAe,CAAC,CAAC,CAAC,CA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}