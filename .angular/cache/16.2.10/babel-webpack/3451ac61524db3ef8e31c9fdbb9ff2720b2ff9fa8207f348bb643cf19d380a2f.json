{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { iterateChildren } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const RowDetailsMixin = superClass => class RowDetailsMixin extends superClass {\n  static get properties() {\n    return {\n      /**\n       * An array containing references to items with open row details.\n       * @type {!Array<!GridItem>}\n       */\n      detailsOpenedItems: {\n        type: Array,\n        value: () => []\n      },\n      /**\n       * Custom function for rendering the content of the row details.\n       * Receives three arguments:\n       *\n       * - `root` The row details content DOM element. Append your content to it.\n       * - `grid` The `<vaadin-grid>` element.\n       * - `model` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `model.index` The index of the item.\n       *   - `model.item` The item.\n       *   - `model.level` The number of the item's tree sublevel, starts from 0.\n       *   - `model.expanded` True if the item's tree sublevel is expanded.\n       *   - `model.selected` True if the item is selected.\n       *\n       * @type {GridRowDetailsRenderer | null | undefined}\n       */\n      rowDetailsRenderer: Function,\n      /**\n       * @type {!Array<!HTMLElement> | undefined}\n       * @protected\n       */\n      _detailsCells: {\n        type: Array\n      }\n    };\n  }\n  static get observers() {\n    return ['_detailsOpenedItemsChanged(detailsOpenedItems.*, rowDetailsRenderer)', '_rowDetailsRendererChanged(rowDetailsRenderer)'];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this._detailsCellResizeObserver = new ResizeObserver(entries => {\n      entries.forEach(({\n        target: cell\n      }) => {\n        this._updateDetailsCellHeight(cell.parentElement);\n      });\n\n      // This workaround is needed until Safari also supports\n      // ResizeObserver.observe with {box: 'border-box'}\n      this.__virtualizer.__adapter._resizeHandler();\n    });\n  }\n\n  /** @private */\n  _rowDetailsRendererChanged(rowDetailsRenderer) {\n    if (!rowDetailsRenderer) {\n      return;\n    }\n    if (this._columnTree) {\n      // Only update the rows if the column tree has already been initialized\n      iterateChildren(this.$.items, row => {\n        if (!row.querySelector('[part~=details-cell]')) {\n          this._updateRow(row, this._columnTree[this._columnTree.length - 1]);\n          const isDetailsOpened = this._isDetailsOpened(row._item);\n          this._toggleDetailsCell(row, isDetailsOpened);\n        }\n      });\n    }\n  }\n\n  /** @private */\n  _detailsOpenedItemsChanged(changeRecord, rowDetailsRenderer) {\n    // Skip to avoid duplicate work of both `.splices` and `.length` updates.\n    if (changeRecord.path === 'detailsOpenedItems.length' || !changeRecord.value) {\n      return;\n    }\n    iterateChildren(this.$.items, row => {\n      // Re-renders the row to possibly close the previously opened details.\n      if (row.hasAttribute('details-opened')) {\n        this._updateItem(row, row._item);\n        return;\n      }\n\n      // Re-renders the row to open the details when a row details renderer is provided.\n      if (rowDetailsRenderer && this._isDetailsOpened(row._item)) {\n        this._updateItem(row, row._item);\n      }\n    });\n  }\n\n  /**\n   * @param {!HTMLElement} cell\n   * @protected\n   */\n  _configureDetailsCell(cell) {\n    cell.setAttribute('part', 'cell details-cell');\n    // Freeze the details cell, so that it does not scroll horizontally\n    // with the normal cells. This way it looks less weird.\n    cell.toggleAttribute('frozen', true);\n    this._detailsCellResizeObserver.observe(cell);\n  }\n\n  /**\n   * @param {!HTMLElement} row\n   * @param {!GridItem} item\n   * @protected\n   */\n  _toggleDetailsCell(row, detailsOpened) {\n    const cell = row.querySelector('[part~=\"details-cell\"]');\n    if (!cell) {\n      return;\n    }\n    cell.hidden = !detailsOpened;\n    if (cell.hidden) {\n      return;\n    }\n\n    // Assigns a renderer when the details cell is opened.\n    // The details cell content is rendered later in the `_updateItem` method.\n    if (this.rowDetailsRenderer) {\n      cell._renderer = this.rowDetailsRenderer;\n    }\n  }\n\n  /** @protected */\n  _updateDetailsCellHeight(row) {\n    const cell = row.querySelector('[part~=\"details-cell\"]');\n    if (!cell) {\n      return;\n    }\n    this.__updateDetailsRowPadding(row, cell);\n    // Ensure the row has correct padding after frame (the resize observer might miss it)\n    requestAnimationFrame(() => this.__updateDetailsRowPadding(row, cell));\n  }\n\n  /** @private */\n  __updateDetailsRowPadding(row, cell) {\n    if (cell.hidden) {\n      row.style.removeProperty('padding-bottom');\n    } else {\n      row.style.setProperty('padding-bottom', `${cell.offsetHeight}px`);\n    }\n  }\n\n  /** @protected */\n  _updateDetailsCellHeights() {\n    iterateChildren(this.$.items, row => {\n      this._updateDetailsCellHeight(row);\n    });\n  }\n\n  /**\n   * @param {!GridItem} item\n   * @return {boolean}\n   * @protected\n   */\n  _isDetailsOpened(item) {\n    return this.detailsOpenedItems && this._getItemIndexInArray(item, this.detailsOpenedItems) !== -1;\n  }\n\n  /**\n   * Open the details row of a given item.\n   * @param {!GridItem} item\n   */\n  openItemDetails(item) {\n    if (!this._isDetailsOpened(item)) {\n      this.detailsOpenedItems = [...this.detailsOpenedItems, item];\n    }\n  }\n\n  /**\n   * Close the details row of a given item.\n   * @param {!GridItem} item\n   */\n  closeItemDetails(item) {\n    if (this._isDetailsOpened(item)) {\n      this.detailsOpenedItems = this.detailsOpenedItems.filter(i => !this._itemsEqual(i, item));\n    }\n  }\n};","map":{"version":3,"names":["iterateChildren","RowDetailsMixin","superClass","properties","detailsOpenedItems","type","Array","value","rowDetailsRenderer","Function","_detailsCells","observers","ready","_detailsCellResizeObserver","ResizeObserver","entries","forEach","target","cell","_updateDetailsCellHeight","parentElement","__virtualizer","__adapter","_resizeHandler","_rowDetailsRendererChanged","_columnTree","$","items","row","querySelector","_updateRow","length","isDetailsOpened","_isDetailsOpened","_item","_toggleDetailsCell","_detailsOpenedItemsChanged","changeRecord","path","hasAttribute","_updateItem","_configureDetailsCell","setAttribute","toggleAttribute","observe","detailsOpened","hidden","_renderer","__updateDetailsRowPadding","requestAnimationFrame","style","removeProperty","setProperty","offsetHeight","_updateDetailsCellHeights","item","_getItemIndexInArray","openItemDetails","closeItemDetails","filter","i","_itemsEqual"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/grid/src/vaadin-grid-row-details-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { iterateChildren } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const RowDetailsMixin = (superClass) =>\n  class RowDetailsMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * An array containing references to items with open row details.\n         * @type {!Array<!GridItem>}\n         */\n        detailsOpenedItems: {\n          type: Array,\n          value: () => [],\n        },\n\n        /**\n         * Custom function for rendering the content of the row details.\n         * Receives three arguments:\n         *\n         * - `root` The row details content DOM element. Append your content to it.\n         * - `grid` The `<vaadin-grid>` element.\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.level` The number of the item's tree sublevel, starts from 0.\n         *   - `model.expanded` True if the item's tree sublevel is expanded.\n         *   - `model.selected` True if the item is selected.\n         *\n         * @type {GridRowDetailsRenderer | null | undefined}\n         */\n        rowDetailsRenderer: Function,\n\n        /**\n         * @type {!Array<!HTMLElement> | undefined}\n         * @protected\n         */\n        _detailsCells: {\n          type: Array,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '_detailsOpenedItemsChanged(detailsOpenedItems.*, rowDetailsRenderer)',\n        '_rowDetailsRendererChanged(rowDetailsRenderer)',\n      ];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this._detailsCellResizeObserver = new ResizeObserver((entries) => {\n        entries.forEach(({ target: cell }) => {\n          this._updateDetailsCellHeight(cell.parentElement);\n        });\n\n        // This workaround is needed until Safari also supports\n        // ResizeObserver.observe with {box: 'border-box'}\n        this.__virtualizer.__adapter._resizeHandler();\n      });\n    }\n\n    /** @private */\n    _rowDetailsRendererChanged(rowDetailsRenderer) {\n      if (!rowDetailsRenderer) {\n        return;\n      }\n\n      if (this._columnTree) {\n        // Only update the rows if the column tree has already been initialized\n        iterateChildren(this.$.items, (row) => {\n          if (!row.querySelector('[part~=details-cell]')) {\n            this._updateRow(row, this._columnTree[this._columnTree.length - 1]);\n            const isDetailsOpened = this._isDetailsOpened(row._item);\n            this._toggleDetailsCell(row, isDetailsOpened);\n          }\n        });\n      }\n    }\n\n    /** @private */\n    _detailsOpenedItemsChanged(changeRecord, rowDetailsRenderer) {\n      // Skip to avoid duplicate work of both `.splices` and `.length` updates.\n      if (changeRecord.path === 'detailsOpenedItems.length' || !changeRecord.value) {\n        return;\n      }\n\n      iterateChildren(this.$.items, (row) => {\n        // Re-renders the row to possibly close the previously opened details.\n        if (row.hasAttribute('details-opened')) {\n          this._updateItem(row, row._item);\n          return;\n        }\n\n        // Re-renders the row to open the details when a row details renderer is provided.\n        if (rowDetailsRenderer && this._isDetailsOpened(row._item)) {\n          this._updateItem(row, row._item);\n        }\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} cell\n     * @protected\n     */\n    _configureDetailsCell(cell) {\n      cell.setAttribute('part', 'cell details-cell');\n      // Freeze the details cell, so that it does not scroll horizontally\n      // with the normal cells. This way it looks less weird.\n      cell.toggleAttribute('frozen', true);\n\n      this._detailsCellResizeObserver.observe(cell);\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {!GridItem} item\n     * @protected\n     */\n    _toggleDetailsCell(row, detailsOpened) {\n      const cell = row.querySelector('[part~=\"details-cell\"]');\n      if (!cell) {\n        return;\n      }\n\n      cell.hidden = !detailsOpened;\n\n      if (cell.hidden) {\n        return;\n      }\n\n      // Assigns a renderer when the details cell is opened.\n      // The details cell content is rendered later in the `_updateItem` method.\n      if (this.rowDetailsRenderer) {\n        cell._renderer = this.rowDetailsRenderer;\n      }\n    }\n\n    /** @protected */\n    _updateDetailsCellHeight(row) {\n      const cell = row.querySelector('[part~=\"details-cell\"]');\n      if (!cell) {\n        return;\n      }\n\n      this.__updateDetailsRowPadding(row, cell);\n      // Ensure the row has correct padding after frame (the resize observer might miss it)\n      requestAnimationFrame(() => this.__updateDetailsRowPadding(row, cell));\n    }\n\n    /** @private */\n    __updateDetailsRowPadding(row, cell) {\n      if (cell.hidden) {\n        row.style.removeProperty('padding-bottom');\n      } else {\n        row.style.setProperty('padding-bottom', `${cell.offsetHeight}px`);\n      }\n    }\n\n    /** @protected */\n    _updateDetailsCellHeights() {\n      iterateChildren(this.$.items, (row) => {\n        this._updateDetailsCellHeight(row);\n      });\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @return {boolean}\n     * @protected\n     */\n    _isDetailsOpened(item) {\n      return this.detailsOpenedItems && this._getItemIndexInArray(item, this.detailsOpenedItems) !== -1;\n    }\n\n    /**\n     * Open the details row of a given item.\n     * @param {!GridItem} item\n     */\n    openItemDetails(item) {\n      if (!this._isDetailsOpened(item)) {\n        this.detailsOpenedItems = [...this.detailsOpenedItems, item];\n      }\n    }\n\n    /**\n     * Close the details row of a given item.\n     * @param {!GridItem} item\n     */\n    closeItemDetails(item) {\n      if (this._isDetailsOpened(item)) {\n        this.detailsOpenedItems = this.detailsOpenedItems.filter((i) => !this._itemsEqual(i, item));\n      }\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}