{"ast":null,"code":"/**\n * Returns a sub-property of an object\n *\n * @param {string} path dot-separated path to the sub property\n * @param {*} object\n * @returns {*}\n */\nfunction get(path, object) {\n  return path.split('.').reduce((obj, property) => obj[property], object);\n}\n\n/**\n * Check array of filters/sorters for paths validity, console.warn invalid items\n * @param {!Array<!GridFilterDefinition | !GridSorterDefinition>} arrayToCheck The array of filters/sorters to check\n * @param {string} action The name of action to include in warning (filtering, sorting)\n * @param {!Array<!GridItem>} items\n */\nfunction checkPaths(arrayToCheck, action, items) {\n  if (items.length === 0) {\n    return false;\n  }\n  let result = true;\n  arrayToCheck.forEach(({\n    path\n  }) => {\n    // Skip simple paths\n    if (!path || path.indexOf('.') === -1) {\n      return;\n    }\n    const parentProperty = path.replace(/\\.[^.]*$/u, ''); // A.b.c -> a.b\n    if (get(parentProperty, items[0]) === undefined) {\n      console.warn(`Path \"${path}\" used for ${action} does not exist in all of the items, ${action} is disabled.`);\n      result = false;\n    }\n  });\n  return result;\n}\n\n/**\n * @param {unknown} value\n * @return {string}\n */\nfunction normalizeEmptyValue(value) {\n  if ([undefined, null].indexOf(value) >= 0) {\n    return '';\n  } else if (isNaN(value)) {\n    return value.toString();\n  }\n  return value;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @return {number}\n */\nfunction compare(a, b) {\n  a = normalizeEmptyValue(a);\n  b = normalizeEmptyValue(b);\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n * Sorts the given array of items based on the sorting rules and returns the result.\n *\n * @param {Array<any>} items\n * @param {Array<GridSorterDefinition>} items\n * @return {Array<any>}\n */\nfunction multiSort(items, sortOrders) {\n  return items.sort((a, b) => {\n    return sortOrders.map(sortOrder => {\n      if (sortOrder.direction === 'asc') {\n        return compare(get(sortOrder.path, a), get(sortOrder.path, b));\n      } else if (sortOrder.direction === 'desc') {\n        return compare(get(sortOrder.path, b), get(sortOrder.path, a));\n      }\n      return 0;\n    }).reduce((p, n) => {\n      return p !== 0 ? p : n;\n    }, 0);\n  });\n}\n\n/**\n * @param {!Array<!GridItem>} items\n * @return {!Array<!GridItem>}\n */\nfunction filter(items, filters) {\n  return items.filter(item => {\n    return filters.every(filter => {\n      const value = normalizeEmptyValue(get(filter.path, item));\n      const filterValueLowercase = normalizeEmptyValue(filter.value).toString().toLowerCase();\n      return value.toString().toLowerCase().includes(filterValueLowercase);\n    });\n  });\n}\n\n/**\n * WARNING: This API is still intended for internal purposes only and\n * may change any time.\n *\n * Creates a new grid compatible data provider that serves the items\n * from the given array as data when requested by the grid.\n *\n * @param {Array<any>} items\n * @return {GridDataProvider<any>}\n */\nexport const createArrayDataProvider = allItems => {\n  return (params, callback) => {\n    let items = allItems ? [...allItems] : [];\n    if (params.filters && checkPaths(params.filters, 'filtering', items)) {\n      items = filter(items, params.filters);\n    }\n    if (Array.isArray(params.sortOrders) && params.sortOrders.length && checkPaths(params.sortOrders, 'sorting', items)) {\n      items = multiSort(items, params.sortOrders);\n    }\n    const count = Math.min(items.length, params.pageSize);\n    const start = params.page * count;\n    const end = start + count;\n    const slice = items.slice(start, end);\n    callback(slice, items.length);\n  };\n};","map":{"version":3,"names":["get","path","object","split","reduce","obj","property","checkPaths","arrayToCheck","action","items","length","result","forEach","indexOf","parentProperty","replace","undefined","console","warn","normalizeEmptyValue","value","isNaN","toString","compare","a","b","multiSort","sortOrders","sort","map","sortOrder","direction","p","n","filter","filters","item","every","filterValueLowercase","toLowerCase","includes","createArrayDataProvider","allItems","params","callback","Array","isArray","count","Math","min","pageSize","start","page","end","slice"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/grid/src/array-data-provider.js"],"sourcesContent":["/**\n * Returns a sub-property of an object\n *\n * @param {string} path dot-separated path to the sub property\n * @param {*} object\n * @returns {*}\n */\nfunction get(path, object) {\n  return path.split('.').reduce((obj, property) => obj[property], object);\n}\n\n/**\n * Check array of filters/sorters for paths validity, console.warn invalid items\n * @param {!Array<!GridFilterDefinition | !GridSorterDefinition>} arrayToCheck The array of filters/sorters to check\n * @param {string} action The name of action to include in warning (filtering, sorting)\n * @param {!Array<!GridItem>} items\n */\nfunction checkPaths(arrayToCheck, action, items) {\n  if (items.length === 0) {\n    return false;\n  }\n\n  let result = true;\n\n  arrayToCheck.forEach(({ path }) => {\n    // Skip simple paths\n    if (!path || path.indexOf('.') === -1) {\n      return;\n    }\n\n    const parentProperty = path.replace(/\\.[^.]*$/u, ''); // A.b.c -> a.b\n    if (get(parentProperty, items[0]) === undefined) {\n      console.warn(`Path \"${path}\" used for ${action} does not exist in all of the items, ${action} is disabled.`);\n      result = false;\n    }\n  });\n\n  return result;\n}\n\n/**\n * @param {unknown} value\n * @return {string}\n */\nfunction normalizeEmptyValue(value) {\n  if ([undefined, null].indexOf(value) >= 0) {\n    return '';\n  } else if (isNaN(value)) {\n    return value.toString();\n  }\n  return value;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @return {number}\n */\nfunction compare(a, b) {\n  a = normalizeEmptyValue(a);\n  b = normalizeEmptyValue(b);\n\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n * Sorts the given array of items based on the sorting rules and returns the result.\n *\n * @param {Array<any>} items\n * @param {Array<GridSorterDefinition>} items\n * @return {Array<any>}\n */\nfunction multiSort(items, sortOrders) {\n  return items.sort((a, b) => {\n    return sortOrders\n      .map((sortOrder) => {\n        if (sortOrder.direction === 'asc') {\n          return compare(get(sortOrder.path, a), get(sortOrder.path, b));\n        } else if (sortOrder.direction === 'desc') {\n          return compare(get(sortOrder.path, b), get(sortOrder.path, a));\n        }\n        return 0;\n      })\n      .reduce((p, n) => {\n        return p !== 0 ? p : n;\n      }, 0);\n  });\n}\n\n/**\n * @param {!Array<!GridItem>} items\n * @return {!Array<!GridItem>}\n */\nfunction filter(items, filters) {\n  return items.filter((item) => {\n    return filters.every((filter) => {\n      const value = normalizeEmptyValue(get(filter.path, item));\n      const filterValueLowercase = normalizeEmptyValue(filter.value).toString().toLowerCase();\n      return value.toString().toLowerCase().includes(filterValueLowercase);\n    });\n  });\n}\n\n/**\n * WARNING: This API is still intended for internal purposes only and\n * may change any time.\n *\n * Creates a new grid compatible data provider that serves the items\n * from the given array as data when requested by the grid.\n *\n * @param {Array<any>} items\n * @return {GridDataProvider<any>}\n */\nexport const createArrayDataProvider = (allItems) => {\n  return (params, callback) => {\n    let items = allItems ? [...allItems] : [];\n\n    if (params.filters && checkPaths(params.filters, 'filtering', items)) {\n      items = filter(items, params.filters);\n    }\n\n    if (\n      Array.isArray(params.sortOrders) &&\n      params.sortOrders.length &&\n      checkPaths(params.sortOrders, 'sorting', items)\n    ) {\n      items = multiSort(items, params.sortOrders);\n    }\n\n    const count = Math.min(items.length, params.pageSize);\n    const start = params.page * count;\n    const end = start + count;\n    const slice = items.slice(start, end);\n    callback(slice, items.length);\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}