{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { animationFrame } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { updateCellState } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const ColumnBaseMixin = superClass => class ColumnBaseMixin extends superClass {\n  static get properties() {\n    return {\n      /**\n       * When set to true, the column is user-resizable.\n       * @default false\n       */\n      resizable: {\n        type: Boolean,\n        value() {\n          if (this.localName === 'vaadin-grid-column-group') {\n            return;\n          }\n          const parent = this.parentNode;\n          if (parent && parent.localName === 'vaadin-grid-column-group') {\n            return parent.resizable || false;\n          }\n          return false;\n        }\n      },\n      /**\n       * When true, the column is frozen. When a column inside of a column group is frozen,\n       * all of the sibling columns inside the group will get frozen also.\n       * @type {boolean}\n       */\n      frozen: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * When true, the column is frozen to end of grid.\n       *\n       * When a column inside of a column group is frozen to end, all of the sibling columns\n       * inside the group will get frozen to end also.\n       *\n       * Column can not be set as `frozen` and `frozenToEnd` at the same time.\n       * @attr {boolean} frozen-to-end\n       * @type {boolean}\n       */\n      frozenToEnd: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * When true, the cells for this column will be rendered with the `role` attribute\n       * set as `rowheader`, instead of the `gridcell` role value used by default.\n       *\n       * When a column is set as row header, its cells will be announced by screen readers\n       * while navigating to help user identify the current row as uniquely as possible.\n       *\n       * @attr {boolean} row-header\n       * @type {boolean}\n       */\n      rowHeader: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * When set to true, the cells for this column are hidden.\n       */\n      hidden: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Text content to display in the header cell of the column.\n       */\n      header: {\n        type: String\n      },\n      /**\n       * Aligns the columns cell content horizontally.\n       * Supported values: \"start\", \"center\" and \"end\".\n       * @attr {start|center|end} text-align\n       * @type {GridColumnTextAlign | null | undefined}\n       */\n      textAlign: {\n        type: String\n      },\n      /**\n       * @type {boolean}\n       * @protected\n       */\n      _lastFrozen: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * @type {boolean}\n       * @protected\n       */\n      _bodyContentHidden: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * @type {boolean}\n       * @protected\n       */\n      _firstFrozenToEnd: {\n        type: Boolean,\n        value: false\n      },\n      /** @protected */\n      _order: Number,\n      /** @private */\n      _reorderStatus: Boolean,\n      /**\n       * @type {Array<!HTMLElement>}\n       * @protected\n       */\n      _emptyCells: Array,\n      /** @private */\n      _headerCell: Object,\n      /** @private */\n      _footerCell: Object,\n      /** @protected */\n      _grid: Object,\n      /**\n       * By default, the Polymer doesn't invoke the observer\n       * during initialization if all of its dependencies are `undefined`.\n       * This internal property can be used to force initial invocation of an observer\n       * even the other dependencies of the observer are `undefined`.\n       *\n       * @private\n       */\n      __initialized: {\n        type: Boolean,\n        value: true\n      },\n      /**\n       * Custom function for rendering the header content.\n       * Receives two arguments:\n       *\n       * - `root` The header cell content DOM element. Append your content to it.\n       * - `column` The `<vaadin-grid-column>` element.\n       *\n       * @type {GridHeaderFooterRenderer | null | undefined}\n       */\n      headerRenderer: Function,\n      /**\n       * Represents the final header renderer computed on the set of observable arguments.\n       * It is supposed to be used internally when rendering the header cell content.\n       *\n       * @protected\n       * @type {GridHeaderFooterRenderer | undefined}\n       */\n      _headerRenderer: {\n        type: Function,\n        computed: '_computeHeaderRenderer(headerRenderer, header, __initialized)'\n      },\n      /**\n       * Custom function for rendering the footer content.\n       * Receives two arguments:\n       *\n       * - `root` The footer cell content DOM element. Append your content to it.\n       * - `column` The `<vaadin-grid-column>` element.\n       *\n       * @type {GridHeaderFooterRenderer | null | undefined}\n       */\n      footerRenderer: Function,\n      /**\n       * Represents the final footer renderer computed on the set of observable arguments.\n       * It is supposed to be used internally when rendering the footer cell content.\n       *\n       * @protected\n       * @type {GridHeaderFooterRenderer | undefined}\n       */\n      _footerRenderer: {\n        type: Function,\n        computed: '_computeFooterRenderer(footerRenderer, __initialized)'\n      },\n      /**\n       * An internal property that is mainly used by `vaadin-template-renderer`\n       * to identify grid column elements.\n       *\n       * @private\n       */\n      __gridColumnElement: {\n        type: Boolean,\n        value: true\n      }\n    };\n  }\n  static get observers() {\n    return ['_widthChanged(width, _headerCell, _footerCell, _cells.*)', '_frozenChanged(frozen, _headerCell, _footerCell, _cells.*)', '_frozenToEndChanged(frozenToEnd, _headerCell, _footerCell, _cells.*)', '_flexGrowChanged(flexGrow, _headerCell, _footerCell, _cells.*)', '_textAlignChanged(textAlign, _cells.*, _headerCell, _footerCell)', '_orderChanged(_order, _headerCell, _footerCell, _cells.*)', '_lastFrozenChanged(_lastFrozen)', '_firstFrozenToEndChanged(_firstFrozenToEnd)', '_onRendererOrBindingChanged(_renderer, _cells, _bodyContentHidden, _cells.*, path)', '_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header)', '_onFooterRendererOrBindingChanged(_footerRenderer, _footerCell)', '_resizableChanged(resizable, _headerCell)', '_reorderStatusChanged(_reorderStatus, _headerCell, _footerCell, _cells.*)', '_hiddenChanged(hidden, _headerCell, _footerCell, _cells.*)', '_rowHeaderChanged(rowHeader, _cells.*)'];\n  }\n\n  /**\n   * @return {!Grid | undefined}\n   * @protected\n   */\n  get _grid() {\n    if (!this._gridValue) {\n      this._gridValue = this._findHostGrid();\n    }\n    return this._gridValue;\n  }\n\n  /**\n   * @return {!Array<!HTMLElement>}\n   * @protected\n   */\n  get _allCells() {\n    return [].concat(this._cells || []).concat(this._emptyCells || []).concat(this._headerCell).concat(this._footerCell).filter(cell => cell);\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    // Adds the column cells to the grid after the column is attached\n    requestAnimationFrame(() => {\n      // Skip if the column has been detached\n      if (!this._grid) {\n        return;\n      }\n      this._allCells.forEach(cell => {\n        if (!cell._content.parentNode) {\n          this._grid.appendChild(cell._content);\n        }\n      });\n    });\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    // Removes the column cells from the grid after the column is detached\n    requestAnimationFrame(() => {\n      // Skip if the column has been attached again\n      if (this._grid) {\n        return;\n      }\n      this._allCells.forEach(cell => {\n        if (cell._content.parentNode) {\n          cell._content.parentNode.removeChild(cell._content);\n        }\n      });\n    });\n    this._gridValue = undefined;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    processTemplates(this);\n  }\n\n  /**\n   * @return {!Grid | undefined}\n   * @protected\n   */\n  _findHostGrid() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n    let el = this;\n    // Custom elements extending grid must have a specific localName\n    while (el && !/^vaadin.*grid(-pro)?$/u.test(el.localName)) {\n      el = el.assignedSlot ? el.assignedSlot.parentNode : el.parentNode;\n    }\n    return el || undefined;\n  }\n\n  /** @protected */\n  _renderHeaderAndFooter() {\n    this._renderHeaderCellContent(this._headerRenderer, this._headerCell);\n    this._renderFooterCellContent(this._footerRenderer, this._footerCell);\n  }\n\n  /** @private */\n  _flexGrowChanged(flexGrow) {\n    if (this.parentElement && this.parentElement._columnPropChanged) {\n      this.parentElement._columnPropChanged('flexGrow');\n    }\n    this._allCells.forEach(cell => {\n      cell.style.flexGrow = flexGrow;\n    });\n  }\n\n  /** @private */\n  _orderChanged(order) {\n    this._allCells.forEach(cell => {\n      cell.style.order = order;\n    });\n  }\n\n  /** @private */\n  _widthChanged(width) {\n    if (this.parentElement && this.parentElement._columnPropChanged) {\n      this.parentElement._columnPropChanged('width');\n    }\n    this._allCells.forEach(cell => {\n      cell.style.width = width;\n    });\n  }\n\n  /** @private */\n  _frozenChanged(frozen) {\n    if (this.parentElement && this.parentElement._columnPropChanged) {\n      this.parentElement._columnPropChanged('frozen', frozen);\n    }\n    this._allCells.forEach(cell => {\n      updateCellState(cell, 'frozen', frozen);\n    });\n    if (this._grid && this._grid._frozenCellsChanged) {\n      this._grid._frozenCellsChanged();\n    }\n  }\n\n  /** @private */\n  _frozenToEndChanged(frozenToEnd) {\n    if (this.parentElement && this.parentElement._columnPropChanged) {\n      this.parentElement._columnPropChanged('frozenToEnd', frozenToEnd);\n    }\n    this._allCells.forEach(cell => {\n      // Skip sizer cells to keep correct scrollWidth.\n      if (this._grid && cell.parentElement === this._grid.$.sizer) {\n        return;\n      }\n      updateCellState(cell, 'frozen-to-end', frozenToEnd);\n    });\n    if (this._grid && this._grid._frozenCellsChanged) {\n      this._grid._frozenCellsChanged();\n    }\n  }\n\n  /** @private */\n  _lastFrozenChanged(lastFrozen) {\n    this._allCells.forEach(cell => {\n      updateCellState(cell, 'last-frozen', lastFrozen);\n    });\n    if (this.parentElement && this.parentElement._columnPropChanged) {\n      this.parentElement._lastFrozen = lastFrozen;\n    }\n  }\n\n  /** @private */\n  _firstFrozenToEndChanged(firstFrozenToEnd) {\n    this._allCells.forEach(cell => {\n      // Skip sizer cells to keep correct scrollWidth.\n      if (this._grid && cell.parentElement === this._grid.$.sizer) {\n        return;\n      }\n      updateCellState(cell, 'first-frozen-to-end', firstFrozenToEnd);\n    });\n    if (this.parentElement && this.parentElement._columnPropChanged) {\n      this.parentElement._firstFrozenToEnd = firstFrozenToEnd;\n    }\n  }\n\n  /** @private */\n  _rowHeaderChanged(rowHeader, cells) {\n    if (!cells.value) {\n      return;\n    }\n    cells.value.forEach(cell => {\n      cell.setAttribute('role', rowHeader ? 'rowheader' : 'gridcell');\n    });\n  }\n\n  /**\n   * @param {string} path\n   * @return {string}\n   * @protected\n   */\n  _generateHeader(path) {\n    return path.substr(path.lastIndexOf('.') + 1).replace(/([A-Z])/gu, '-$1').toLowerCase().replace(/-/gu, ' ').replace(/^./u, match => match.toUpperCase());\n  }\n\n  /** @private */\n  _reorderStatusChanged(reorderStatus) {\n    const prevStatus = this.__previousReorderStatus;\n    const oldPart = prevStatus ? `reorder-${prevStatus}-cell` : '';\n    const newPart = `reorder-${reorderStatus}-cell`;\n    this._allCells.forEach(cell => {\n      updateCellState(cell, 'reorder-status', reorderStatus, newPart, oldPart);\n    });\n    this.__previousReorderStatus = reorderStatus;\n  }\n\n  /** @private */\n  _resizableChanged(resizable, headerCell) {\n    if (resizable === undefined || headerCell === undefined) {\n      return;\n    }\n    if (headerCell) {\n      [headerCell].concat(this._emptyCells).forEach(cell => {\n        if (cell) {\n          const existingHandle = cell.querySelector('[part~=\"resize-handle\"]');\n          if (existingHandle) {\n            cell.removeChild(existingHandle);\n          }\n          if (resizable) {\n            const handle = document.createElement('div');\n            handle.setAttribute('part', 'resize-handle');\n            cell.appendChild(handle);\n          }\n        }\n      });\n    }\n  }\n\n  /** @private */\n  _textAlignChanged(textAlign) {\n    if (textAlign === undefined || this._grid === undefined) {\n      return;\n    }\n    if (['start', 'end', 'center'].indexOf(textAlign) === -1) {\n      console.warn('textAlign can only be set as \"start\", \"end\" or \"center\"');\n      return;\n    }\n    let textAlignFallback;\n    if (getComputedStyle(this._grid).direction === 'ltr') {\n      if (textAlign === 'start') {\n        textAlignFallback = 'left';\n      } else if (textAlign === 'end') {\n        textAlignFallback = 'right';\n      }\n    } else if (textAlign === 'start') {\n      textAlignFallback = 'right';\n    } else if (textAlign === 'end') {\n      textAlignFallback = 'left';\n    }\n    this._allCells.forEach(cell => {\n      cell._content.style.textAlign = textAlign;\n      if (getComputedStyle(cell._content).textAlign !== textAlign) {\n        cell._content.style.textAlign = textAlignFallback;\n      }\n    });\n  }\n\n  /** @private */\n  _hiddenChanged(hidden) {\n    if (this.parentElement && this.parentElement._columnPropChanged) {\n      this.parentElement._columnPropChanged('hidden', hidden);\n    }\n    if (!!hidden !== !!this._previousHidden && this._grid) {\n      if (hidden === true) {\n        this._allCells.forEach(cell => {\n          if (cell._content.parentNode) {\n            cell._content.parentNode.removeChild(cell._content);\n          }\n        });\n      }\n      this._grid._debouncerHiddenChanged = Debouncer.debounce(this._grid._debouncerHiddenChanged, animationFrame, () => {\n        if (this._grid && this._grid._renderColumnTree) {\n          this._grid._renderColumnTree(this._grid._columnTree);\n        }\n      });\n      if (this._grid._debounceUpdateFrozenColumn) {\n        this._grid._debounceUpdateFrozenColumn();\n      }\n      if (this._grid._resetKeyboardNavigation) {\n        this._grid._resetKeyboardNavigation();\n      }\n    }\n    this._previousHidden = hidden;\n  }\n\n  /** @protected */\n  _runRenderer(renderer, cell, model) {\n    const args = [cell._content, this];\n    if (model && model.item) {\n      args.push(model);\n    }\n    renderer.apply(this, args);\n  }\n\n  /**\n   * Renders the content to the given cells using a renderer.\n   *\n   * @private\n   */\n  __renderCellsContent(renderer, cells) {\n    // Skip if the column is hidden or not attached to a grid.\n    if (this.hidden || !this._grid) {\n      return;\n    }\n    cells.forEach(cell => {\n      if (!cell.parentElement) {\n        return;\n      }\n      const model = this._grid.__getRowModel(cell.parentElement);\n      if (!renderer) {\n        return;\n      }\n      if (cell._renderer !== renderer) {\n        this._clearCellContent(cell);\n      }\n      cell._renderer = renderer;\n      if (model.item || renderer === this._headerRenderer || renderer === this._footerRenderer) {\n        this._runRenderer(renderer, cell, model);\n      }\n    });\n  }\n\n  /**\n   * Clears the content of a cell.\n   *\n   * @protected\n   */\n  _clearCellContent(cell) {\n    cell._content.innerHTML = '';\n    // Whenever a Lit-based renderer is used, it assigns a Lit part to the node it was rendered into.\n    // When clearing the rendered content, this part needs to be manually disposed of.\n    // Otherwise, using a Lit-based renderer on the same node will throw an exception or render nothing afterward.\n    delete cell._content._$litPart$;\n  }\n\n  /**\n   * Renders the header cell content using a renderer,\n   * and then updates the visibility of the parent row depending on\n   * whether all its children cells are empty or not.\n   *\n   * @protected\n   */\n  _renderHeaderCellContent(headerRenderer, headerCell) {\n    if (!headerCell || !headerRenderer) {\n      return;\n    }\n    this.__renderCellsContent(headerRenderer, [headerCell]);\n    if (this._grid && headerCell.parentElement) {\n      this._grid.__debounceUpdateHeaderFooterRowVisibility(headerCell.parentElement);\n    }\n  }\n\n  /** @protected */\n  _onHeaderRendererOrBindingChanged(headerRenderer, headerCell, ..._bindings) {\n    this._renderHeaderCellContent(headerRenderer, headerCell);\n  }\n\n  /**\n   * Renders the content of body cells using a renderer.\n   *\n   * @protected\n   */\n  _renderBodyCellsContent(renderer, cells) {\n    if (!cells || !renderer) {\n      return;\n    }\n    this.__renderCellsContent(renderer, cells);\n  }\n\n  /** @protected */\n  _onRendererOrBindingChanged(renderer, cells, ..._bindings) {\n    this._renderBodyCellsContent(renderer, cells);\n  }\n\n  /**\n   * Renders the footer cell content using a renderer\n   * and then updates the visibility of the parent row depending on\n   * whether all its children cells are empty or not.\n   *\n   * @protected\n   */\n  _renderFooterCellContent(footerRenderer, footerCell) {\n    if (!footerCell || !footerRenderer) {\n      return;\n    }\n    this.__renderCellsContent(footerRenderer, [footerCell]);\n    if (this._grid && footerCell.parentElement) {\n      this._grid.__debounceUpdateHeaderFooterRowVisibility(footerCell.parentElement);\n    }\n  }\n\n  /** @protected */\n  _onFooterRendererOrBindingChanged(footerRenderer, footerCell) {\n    this._renderFooterCellContent(footerRenderer, footerCell);\n  }\n\n  /** @private */\n  __setTextContent(node, textContent) {\n    if (node.textContent !== textContent) {\n      node.textContent = textContent;\n    }\n  }\n\n  /**\n   * Renders the text header to the header cell.\n   *\n   * @private\n   */\n  __textHeaderRenderer() {\n    this.__setTextContent(this._headerCell._content, this.header);\n  }\n\n  /**\n   * Computes the property name based on the path and renders it to the header cell.\n   * If the path is not defined, then nothing is rendered.\n   *\n   * @protected\n   */\n  _defaultHeaderRenderer() {\n    if (!this.path) {\n      return;\n    }\n    this.__setTextContent(this._headerCell._content, this._generateHeader(this.path));\n  }\n\n  /**\n   * Computes the item property value based on the path and renders it to the body cell.\n   * If the path is not defined, then nothing is rendered.\n   *\n   * @protected\n   */\n  _defaultRenderer(root, _owner, {\n    item\n  }) {\n    if (!this.path) {\n      return;\n    }\n    this.__setTextContent(root, get(this.path, item));\n  }\n\n  /**\n   * By default, nothing is rendered to the footer cell.\n   *\n   * @protected\n   */\n  _defaultFooterRenderer() {}\n\n  /**\n   * Computes the final header renderer for the `_headerRenderer` computed property.\n   * All the arguments are observable by the Polymer, it re-calls the method\n   * once an argument is changed to update the property value.\n   *\n   * @protected\n   * @return {GridHeaderFooterRenderer | undefined}\n   */\n  _computeHeaderRenderer(headerRenderer, header) {\n    if (headerRenderer) {\n      return headerRenderer;\n    }\n    if (header !== undefined && header !== null) {\n      return this.__textHeaderRenderer;\n    }\n    return this._defaultHeaderRenderer;\n  }\n\n  /**\n   * Computes the final renderer for the `_renderer` property.\n   * All the arguments are observable by the Polymer, it re-calls the method\n   * once an argument is changed to update the property value.\n   *\n   * @protected\n   * @return {GridBodyRenderer | undefined}\n   */\n  _computeRenderer(renderer) {\n    if (renderer) {\n      return renderer;\n    }\n    return this._defaultRenderer;\n  }\n\n  /**\n   * Computes the final footer renderer for the `_footerRenderer` property.\n   * All the arguments are observable by the Polymer, it re-calls the method\n   * once an argument is changed to update the property value.\n   *\n   * @protected\n   * @return {GridHeaderFooterRenderer | undefined}\n   */\n  _computeFooterRenderer(footerRenderer) {\n    if (footerRenderer) {\n      return footerRenderer;\n    }\n    return this._defaultFooterRenderer;\n  }\n};\n\n/**\n * A `<vaadin-grid-column>` is used to configure how a column in `<vaadin-grid>`\n * should look like.\n *\n * See [`<vaadin-grid>`](#/elements/vaadin-grid) documentation for instructions on how\n * to configure the `<vaadin-grid-column>`.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ColumnBaseMixin\n */\nclass GridColumn extends ColumnBaseMixin(DirMixin(PolymerElement)) {\n  static get is() {\n    return 'vaadin-grid-column';\n  }\n  static get properties() {\n    return {\n      /**\n       * Width of the cells for this column.\n       */\n      width: {\n        type: String,\n        value: '100px'\n      },\n      /**\n       * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.\n       * @attr {number} flex-grow\n       * @type {number}\n       */\n      flexGrow: {\n        type: Number,\n        value: 1\n      },\n      /**\n       * Custom function for rendering the cell content.\n       * Receives three arguments:\n       *\n       * - `root` The cell content DOM element. Append your content to it.\n       * - `column` The `<vaadin-grid-column>` element.\n       * - `model` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `model.index` The index of the item.\n       *   - `model.item` The item.\n       *   - `model.expanded` Sublevel toggle state.\n       *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `model.selected` Selected state.\n       *   - `model.detailsOpened` Details opened state.\n       *\n       * @type {GridBodyRenderer | null | undefined}\n       */\n      renderer: Function,\n      /**\n       * Represents the final renderer computed on the set of observable arguments.\n       * It is supposed to be used internally when rendering the content of a body cell.\n       *\n       * @protected\n       * @type {GridBodyRenderer | undefined}\n       */\n      _renderer: {\n        type: Function,\n        computed: '_computeRenderer(renderer, __initialized)'\n      },\n      /**\n       * Path to an item sub-property whose value gets displayed in the column body cells.\n       * The property name is also shown in the column header if an explicit header or renderer isn't defined.\n       */\n      path: {\n        type: String\n      },\n      /**\n       * Automatically sets the width of the column based on the column contents when this is set to `true`.\n       *\n       * For performance reasons the column width is calculated automatically only once when the grid items\n       * are rendered for the first time and the calculation only considers the rows which are currently\n       * rendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\n       * content changes, the column width might not match the contents anymore.\n       *\n       * Hidden columns are ignored in the calculation and their widths are not automatically updated when\n       * you show a column that was initially hidden.\n       *\n       * You can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n       *\n       * The column width may still grow larger when `flexGrow` is not 0.\n       * @attr {boolean} auto-width\n       * @type {boolean}\n       */\n      autoWidth: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * When true, wraps the cell's slot into an element with role=\"button\", and sets\n       * the tabindex attribute on the button element, instead of the cell itself.\n       * This is needed to keep focus in sync with VoiceOver cursor when navigating\n       * with Control + Option + arrow keys: focusing the `<td>` element does not fire\n       * a focus event, but focusing an element with role=\"button\" inside a cell fires it.\n       * @protected\n       */\n      _focusButtonMode: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * @type {Array<!HTMLElement>}\n       * @protected\n       */\n      _cells: Array\n    };\n  }\n}\ndefineCustomElement(GridColumn);\nexport { GridColumn };","map":{"version":3,"names":["PolymerElement","animationFrame","Debouncer","defineCustomElement","DirMixin","get","processTemplates","updateCellState","ColumnBaseMixin","superClass","properties","resizable","type","Boolean","value","localName","parent","parentNode","frozen","frozenToEnd","rowHeader","hidden","header","String","textAlign","_lastFrozen","_bodyContentHidden","_firstFrozenToEnd","_order","Number","_reorderStatus","_emptyCells","Array","_headerCell","Object","_footerCell","_grid","__initialized","headerRenderer","Function","_headerRenderer","computed","footerRenderer","_footerRenderer","__gridColumnElement","observers","_gridValue","_findHostGrid","_allCells","concat","_cells","filter","cell","connectedCallback","requestAnimationFrame","forEach","_content","appendChild","disconnectedCallback","removeChild","undefined","ready","el","test","assignedSlot","_renderHeaderAndFooter","_renderHeaderCellContent","_renderFooterCellContent","_flexGrowChanged","flexGrow","parentElement","_columnPropChanged","style","_orderChanged","order","_widthChanged","width","_frozenChanged","_frozenCellsChanged","_frozenToEndChanged","$","sizer","_lastFrozenChanged","lastFrozen","_firstFrozenToEndChanged","firstFrozenToEnd","_rowHeaderChanged","cells","setAttribute","_generateHeader","path","substr","lastIndexOf","replace","toLowerCase","match","toUpperCase","_reorderStatusChanged","reorderStatus","prevStatus","__previousReorderStatus","oldPart","newPart","_resizableChanged","headerCell","existingHandle","querySelector","handle","document","createElement","_textAlignChanged","indexOf","console","warn","textAlignFallback","getComputedStyle","direction","_hiddenChanged","_previousHidden","_debouncerHiddenChanged","debounce","_renderColumnTree","_columnTree","_debounceUpdateFrozenColumn","_resetKeyboardNavigation","_runRenderer","renderer","model","args","item","push","apply","__renderCellsContent","__getRowModel","_renderer","_clearCellContent","innerHTML","_$litPart$","__debounceUpdateHeaderFooterRowVisibility","_onHeaderRendererOrBindingChanged","_bindings","_renderBodyCellsContent","_onRendererOrBindingChanged","footerCell","_onFooterRendererOrBindingChanged","__setTextContent","node","textContent","__textHeaderRenderer","_defaultHeaderRenderer","_defaultRenderer","root","_owner","_defaultFooterRenderer","_computeHeaderRenderer","_computeRenderer","_computeFooterRenderer","GridColumn","is","autoWidth","_focusButtonMode"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/grid/src/vaadin-grid-column.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { animationFrame } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { updateCellState } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const ColumnBaseMixin = (superClass) =>\n  class ColumnBaseMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * When set to true, the column is user-resizable.\n         * @default false\n         */\n        resizable: {\n          type: Boolean,\n          value() {\n            if (this.localName === 'vaadin-grid-column-group') {\n              return;\n            }\n\n            const parent = this.parentNode;\n            if (parent && parent.localName === 'vaadin-grid-column-group') {\n              return parent.resizable || false;\n            }\n            return false;\n          },\n        },\n\n        /**\n         * When true, the column is frozen. When a column inside of a column group is frozen,\n         * all of the sibling columns inside the group will get frozen also.\n         * @type {boolean}\n         */\n        frozen: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When true, the column is frozen to end of grid.\n         *\n         * When a column inside of a column group is frozen to end, all of the sibling columns\n         * inside the group will get frozen to end also.\n         *\n         * Column can not be set as `frozen` and `frozenToEnd` at the same time.\n         * @attr {boolean} frozen-to-end\n         * @type {boolean}\n         */\n        frozenToEnd: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When true, the cells for this column will be rendered with the `role` attribute\n         * set as `rowheader`, instead of the `gridcell` role value used by default.\n         *\n         * When a column is set as row header, its cells will be announced by screen readers\n         * while navigating to help user identify the current row as uniquely as possible.\n         *\n         * @attr {boolean} row-header\n         * @type {boolean}\n         */\n        rowHeader: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When set to true, the cells for this column are hidden.\n         */\n        hidden: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Text content to display in the header cell of the column.\n         */\n        header: {\n          type: String,\n        },\n\n        /**\n         * Aligns the columns cell content horizontally.\n         * Supported values: \"start\", \"center\" and \"end\".\n         * @attr {start|center|end} text-align\n         * @type {GridColumnTextAlign | null | undefined}\n         */\n        textAlign: {\n          type: String,\n        },\n\n        /**\n         * @type {boolean}\n         * @protected\n         */\n        _lastFrozen: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * @type {boolean}\n         * @protected\n         */\n        _bodyContentHidden: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * @type {boolean}\n         * @protected\n         */\n        _firstFrozenToEnd: {\n          type: Boolean,\n          value: false,\n        },\n\n        /** @protected */\n        _order: Number,\n\n        /** @private */\n        _reorderStatus: Boolean,\n\n        /**\n         * @type {Array<!HTMLElement>}\n         * @protected\n         */\n        _emptyCells: Array,\n\n        /** @private */\n        _headerCell: Object,\n\n        /** @private */\n        _footerCell: Object,\n\n        /** @protected */\n        _grid: Object,\n\n        /**\n         * By default, the Polymer doesn't invoke the observer\n         * during initialization if all of its dependencies are `undefined`.\n         * This internal property can be used to force initial invocation of an observer\n         * even the other dependencies of the observer are `undefined`.\n         *\n         * @private\n         */\n        __initialized: {\n          type: Boolean,\n          value: true,\n        },\n\n        /**\n         * Custom function for rendering the header content.\n         * Receives two arguments:\n         *\n         * - `root` The header cell content DOM element. Append your content to it.\n         * - `column` The `<vaadin-grid-column>` element.\n         *\n         * @type {GridHeaderFooterRenderer | null | undefined}\n         */\n        headerRenderer: Function,\n\n        /**\n         * Represents the final header renderer computed on the set of observable arguments.\n         * It is supposed to be used internally when rendering the header cell content.\n         *\n         * @protected\n         * @type {GridHeaderFooterRenderer | undefined}\n         */\n        _headerRenderer: {\n          type: Function,\n          computed: '_computeHeaderRenderer(headerRenderer, header, __initialized)',\n        },\n\n        /**\n         * Custom function for rendering the footer content.\n         * Receives two arguments:\n         *\n         * - `root` The footer cell content DOM element. Append your content to it.\n         * - `column` The `<vaadin-grid-column>` element.\n         *\n         * @type {GridHeaderFooterRenderer | null | undefined}\n         */\n        footerRenderer: Function,\n\n        /**\n         * Represents the final footer renderer computed on the set of observable arguments.\n         * It is supposed to be used internally when rendering the footer cell content.\n         *\n         * @protected\n         * @type {GridHeaderFooterRenderer | undefined}\n         */\n        _footerRenderer: {\n          type: Function,\n          computed: '_computeFooterRenderer(footerRenderer, __initialized)',\n        },\n\n        /**\n         * An internal property that is mainly used by `vaadin-template-renderer`\n         * to identify grid column elements.\n         *\n         * @private\n         */\n        __gridColumnElement: {\n          type: Boolean,\n          value: true,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '_widthChanged(width, _headerCell, _footerCell, _cells.*)',\n        '_frozenChanged(frozen, _headerCell, _footerCell, _cells.*)',\n        '_frozenToEndChanged(frozenToEnd, _headerCell, _footerCell, _cells.*)',\n        '_flexGrowChanged(flexGrow, _headerCell, _footerCell, _cells.*)',\n        '_textAlignChanged(textAlign, _cells.*, _headerCell, _footerCell)',\n        '_orderChanged(_order, _headerCell, _footerCell, _cells.*)',\n        '_lastFrozenChanged(_lastFrozen)',\n        '_firstFrozenToEndChanged(_firstFrozenToEnd)',\n        '_onRendererOrBindingChanged(_renderer, _cells, _bodyContentHidden, _cells.*, path)',\n        '_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header)',\n        '_onFooterRendererOrBindingChanged(_footerRenderer, _footerCell)',\n        '_resizableChanged(resizable, _headerCell)',\n        '_reorderStatusChanged(_reorderStatus, _headerCell, _footerCell, _cells.*)',\n        '_hiddenChanged(hidden, _headerCell, _footerCell, _cells.*)',\n        '_rowHeaderChanged(rowHeader, _cells.*)',\n      ];\n    }\n\n    /**\n     * @return {!Grid | undefined}\n     * @protected\n     */\n    get _grid() {\n      if (!this._gridValue) {\n        this._gridValue = this._findHostGrid();\n      }\n      return this._gridValue;\n    }\n\n    /**\n     * @return {!Array<!HTMLElement>}\n     * @protected\n     */\n    get _allCells() {\n      return []\n        .concat(this._cells || [])\n        .concat(this._emptyCells || [])\n        .concat(this._headerCell)\n        .concat(this._footerCell)\n        .filter((cell) => cell);\n    }\n\n    /** @protected */\n    connectedCallback() {\n      super.connectedCallback();\n\n      // Adds the column cells to the grid after the column is attached\n      requestAnimationFrame(() => {\n        // Skip if the column has been detached\n        if (!this._grid) {\n          return;\n        }\n\n        this._allCells.forEach((cell) => {\n          if (!cell._content.parentNode) {\n            this._grid.appendChild(cell._content);\n          }\n        });\n      });\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // Removes the column cells from the grid after the column is detached\n      requestAnimationFrame(() => {\n        // Skip if the column has been attached again\n        if (this._grid) {\n          return;\n        }\n\n        this._allCells.forEach((cell) => {\n          if (cell._content.parentNode) {\n            cell._content.parentNode.removeChild(cell._content);\n          }\n        });\n      });\n\n      this._gridValue = undefined;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      processTemplates(this);\n    }\n\n    /**\n     * @return {!Grid | undefined}\n     * @protected\n     */\n    _findHostGrid() {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n      let el = this;\n      // Custom elements extending grid must have a specific localName\n      while (el && !/^vaadin.*grid(-pro)?$/u.test(el.localName)) {\n        el = el.assignedSlot ? el.assignedSlot.parentNode : el.parentNode;\n      }\n      return el || undefined;\n    }\n\n    /** @protected */\n    _renderHeaderAndFooter() {\n      this._renderHeaderCellContent(this._headerRenderer, this._headerCell);\n      this._renderFooterCellContent(this._footerRenderer, this._footerCell);\n    }\n\n    /** @private */\n    _flexGrowChanged(flexGrow) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('flexGrow');\n      }\n\n      this._allCells.forEach((cell) => {\n        cell.style.flexGrow = flexGrow;\n      });\n    }\n\n    /** @private */\n    _orderChanged(order) {\n      this._allCells.forEach((cell) => {\n        cell.style.order = order;\n      });\n    }\n\n    /** @private */\n    _widthChanged(width) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('width');\n      }\n\n      this._allCells.forEach((cell) => {\n        cell.style.width = width;\n      });\n    }\n\n    /** @private */\n    _frozenChanged(frozen) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('frozen', frozen);\n      }\n\n      this._allCells.forEach((cell) => {\n        updateCellState(cell, 'frozen', frozen);\n      });\n\n      if (this._grid && this._grid._frozenCellsChanged) {\n        this._grid._frozenCellsChanged();\n      }\n    }\n\n    /** @private */\n    _frozenToEndChanged(frozenToEnd) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('frozenToEnd', frozenToEnd);\n      }\n\n      this._allCells.forEach((cell) => {\n        // Skip sizer cells to keep correct scrollWidth.\n        if (this._grid && cell.parentElement === this._grid.$.sizer) {\n          return;\n        }\n\n        updateCellState(cell, 'frozen-to-end', frozenToEnd);\n      });\n\n      if (this._grid && this._grid._frozenCellsChanged) {\n        this._grid._frozenCellsChanged();\n      }\n    }\n\n    /** @private */\n    _lastFrozenChanged(lastFrozen) {\n      this._allCells.forEach((cell) => {\n        updateCellState(cell, 'last-frozen', lastFrozen);\n      });\n\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._lastFrozen = lastFrozen;\n      }\n    }\n\n    /** @private */\n    _firstFrozenToEndChanged(firstFrozenToEnd) {\n      this._allCells.forEach((cell) => {\n        // Skip sizer cells to keep correct scrollWidth.\n        if (this._grid && cell.parentElement === this._grid.$.sizer) {\n          return;\n        }\n\n        updateCellState(cell, 'first-frozen-to-end', firstFrozenToEnd);\n      });\n\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._firstFrozenToEnd = firstFrozenToEnd;\n      }\n    }\n\n    /** @private */\n    _rowHeaderChanged(rowHeader, cells) {\n      if (!cells.value) {\n        return;\n      }\n\n      cells.value.forEach((cell) => {\n        cell.setAttribute('role', rowHeader ? 'rowheader' : 'gridcell');\n      });\n    }\n\n    /**\n     * @param {string} path\n     * @return {string}\n     * @protected\n     */\n    _generateHeader(path) {\n      return path\n        .substr(path.lastIndexOf('.') + 1)\n        .replace(/([A-Z])/gu, '-$1')\n        .toLowerCase()\n        .replace(/-/gu, ' ')\n        .replace(/^./u, (match) => match.toUpperCase());\n    }\n\n    /** @private */\n    _reorderStatusChanged(reorderStatus) {\n      const prevStatus = this.__previousReorderStatus;\n      const oldPart = prevStatus ? `reorder-${prevStatus}-cell` : '';\n      const newPart = `reorder-${reorderStatus}-cell`;\n\n      this._allCells.forEach((cell) => {\n        updateCellState(cell, 'reorder-status', reorderStatus, newPart, oldPart);\n      });\n\n      this.__previousReorderStatus = reorderStatus;\n    }\n\n    /** @private */\n    _resizableChanged(resizable, headerCell) {\n      if (resizable === undefined || headerCell === undefined) {\n        return;\n      }\n\n      if (headerCell) {\n        [headerCell].concat(this._emptyCells).forEach((cell) => {\n          if (cell) {\n            const existingHandle = cell.querySelector('[part~=\"resize-handle\"]');\n            if (existingHandle) {\n              cell.removeChild(existingHandle);\n            }\n\n            if (resizable) {\n              const handle = document.createElement('div');\n              handle.setAttribute('part', 'resize-handle');\n              cell.appendChild(handle);\n            }\n          }\n        });\n      }\n    }\n\n    /** @private */\n    _textAlignChanged(textAlign) {\n      if (textAlign === undefined || this._grid === undefined) {\n        return;\n      }\n      if (['start', 'end', 'center'].indexOf(textAlign) === -1) {\n        console.warn('textAlign can only be set as \"start\", \"end\" or \"center\"');\n        return;\n      }\n\n      let textAlignFallback;\n      if (getComputedStyle(this._grid).direction === 'ltr') {\n        if (textAlign === 'start') {\n          textAlignFallback = 'left';\n        } else if (textAlign === 'end') {\n          textAlignFallback = 'right';\n        }\n      } else if (textAlign === 'start') {\n        textAlignFallback = 'right';\n      } else if (textAlign === 'end') {\n        textAlignFallback = 'left';\n      }\n\n      this._allCells.forEach((cell) => {\n        cell._content.style.textAlign = textAlign;\n        if (getComputedStyle(cell._content).textAlign !== textAlign) {\n          cell._content.style.textAlign = textAlignFallback;\n        }\n      });\n    }\n\n    /** @private */\n    _hiddenChanged(hidden) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('hidden', hidden);\n      }\n\n      if (!!hidden !== !!this._previousHidden && this._grid) {\n        if (hidden === true) {\n          this._allCells.forEach((cell) => {\n            if (cell._content.parentNode) {\n              cell._content.parentNode.removeChild(cell._content);\n            }\n          });\n        }\n        this._grid._debouncerHiddenChanged = Debouncer.debounce(\n          this._grid._debouncerHiddenChanged,\n          animationFrame,\n          () => {\n            if (this._grid && this._grid._renderColumnTree) {\n              this._grid._renderColumnTree(this._grid._columnTree);\n            }\n          },\n        );\n\n        if (this._grid._debounceUpdateFrozenColumn) {\n          this._grid._debounceUpdateFrozenColumn();\n        }\n\n        if (this._grid._resetKeyboardNavigation) {\n          this._grid._resetKeyboardNavigation();\n        }\n      }\n      this._previousHidden = hidden;\n    }\n\n    /** @protected */\n    _runRenderer(renderer, cell, model) {\n      const args = [cell._content, this];\n      if (model && model.item) {\n        args.push(model);\n      }\n\n      renderer.apply(this, args);\n    }\n\n    /**\n     * Renders the content to the given cells using a renderer.\n     *\n     * @private\n     */\n    __renderCellsContent(renderer, cells) {\n      // Skip if the column is hidden or not attached to a grid.\n      if (this.hidden || !this._grid) {\n        return;\n      }\n\n      cells.forEach((cell) => {\n        if (!cell.parentElement) {\n          return;\n        }\n\n        const model = this._grid.__getRowModel(cell.parentElement);\n\n        if (!renderer) {\n          return;\n        }\n\n        if (cell._renderer !== renderer) {\n          this._clearCellContent(cell);\n        }\n\n        cell._renderer = renderer;\n\n        if (model.item || renderer === this._headerRenderer || renderer === this._footerRenderer) {\n          this._runRenderer(renderer, cell, model);\n        }\n      });\n    }\n\n    /**\n     * Clears the content of a cell.\n     *\n     * @protected\n     */\n    _clearCellContent(cell) {\n      cell._content.innerHTML = '';\n      // Whenever a Lit-based renderer is used, it assigns a Lit part to the node it was rendered into.\n      // When clearing the rendered content, this part needs to be manually disposed of.\n      // Otherwise, using a Lit-based renderer on the same node will throw an exception or render nothing afterward.\n      delete cell._content._$litPart$;\n    }\n\n    /**\n     * Renders the header cell content using a renderer,\n     * and then updates the visibility of the parent row depending on\n     * whether all its children cells are empty or not.\n     *\n     * @protected\n     */\n    _renderHeaderCellContent(headerRenderer, headerCell) {\n      if (!headerCell || !headerRenderer) {\n        return;\n      }\n\n      this.__renderCellsContent(headerRenderer, [headerCell]);\n      if (this._grid && headerCell.parentElement) {\n        this._grid.__debounceUpdateHeaderFooterRowVisibility(headerCell.parentElement);\n      }\n    }\n\n    /** @protected */\n    _onHeaderRendererOrBindingChanged(headerRenderer, headerCell, ..._bindings) {\n      this._renderHeaderCellContent(headerRenderer, headerCell);\n    }\n\n    /**\n     * Renders the content of body cells using a renderer.\n     *\n     * @protected\n     */\n    _renderBodyCellsContent(renderer, cells) {\n      if (!cells || !renderer) {\n        return;\n      }\n\n      this.__renderCellsContent(renderer, cells);\n    }\n\n    /** @protected */\n    _onRendererOrBindingChanged(renderer, cells, ..._bindings) {\n      this._renderBodyCellsContent(renderer, cells);\n    }\n\n    /**\n     * Renders the footer cell content using a renderer\n     * and then updates the visibility of the parent row depending on\n     * whether all its children cells are empty or not.\n     *\n     * @protected\n     */\n    _renderFooterCellContent(footerRenderer, footerCell) {\n      if (!footerCell || !footerRenderer) {\n        return;\n      }\n\n      this.__renderCellsContent(footerRenderer, [footerCell]);\n      if (this._grid && footerCell.parentElement) {\n        this._grid.__debounceUpdateHeaderFooterRowVisibility(footerCell.parentElement);\n      }\n    }\n\n    /** @protected */\n    _onFooterRendererOrBindingChanged(footerRenderer, footerCell) {\n      this._renderFooterCellContent(footerRenderer, footerCell);\n    }\n\n    /** @private */\n    __setTextContent(node, textContent) {\n      if (node.textContent !== textContent) {\n        node.textContent = textContent;\n      }\n    }\n\n    /**\n     * Renders the text header to the header cell.\n     *\n     * @private\n     */\n    __textHeaderRenderer() {\n      this.__setTextContent(this._headerCell._content, this.header);\n    }\n\n    /**\n     * Computes the property name based on the path and renders it to the header cell.\n     * If the path is not defined, then nothing is rendered.\n     *\n     * @protected\n     */\n    _defaultHeaderRenderer() {\n      if (!this.path) {\n        return;\n      }\n\n      this.__setTextContent(this._headerCell._content, this._generateHeader(this.path));\n    }\n\n    /**\n     * Computes the item property value based on the path and renders it to the body cell.\n     * If the path is not defined, then nothing is rendered.\n     *\n     * @protected\n     */\n    _defaultRenderer(root, _owner, { item }) {\n      if (!this.path) {\n        return;\n      }\n\n      this.__setTextContent(root, get(this.path, item));\n    }\n\n    /**\n     * By default, nothing is rendered to the footer cell.\n     *\n     * @protected\n     */\n    _defaultFooterRenderer() {}\n\n    /**\n     * Computes the final header renderer for the `_headerRenderer` computed property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridHeaderFooterRenderer | undefined}\n     */\n    _computeHeaderRenderer(headerRenderer, header) {\n      if (headerRenderer) {\n        return headerRenderer;\n      }\n\n      if (header !== undefined && header !== null) {\n        return this.__textHeaderRenderer;\n      }\n\n      return this._defaultHeaderRenderer;\n    }\n\n    /**\n     * Computes the final renderer for the `_renderer` property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridBodyRenderer | undefined}\n     */\n    _computeRenderer(renderer) {\n      if (renderer) {\n        return renderer;\n      }\n\n      return this._defaultRenderer;\n    }\n\n    /**\n     * Computes the final footer renderer for the `_footerRenderer` property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridHeaderFooterRenderer | undefined}\n     */\n    _computeFooterRenderer(footerRenderer) {\n      if (footerRenderer) {\n        return footerRenderer;\n      }\n\n      return this._defaultFooterRenderer;\n    }\n  };\n\n/**\n * A `<vaadin-grid-column>` is used to configure how a column in `<vaadin-grid>`\n * should look like.\n *\n * See [`<vaadin-grid>`](#/elements/vaadin-grid) documentation for instructions on how\n * to configure the `<vaadin-grid-column>`.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ColumnBaseMixin\n */\nclass GridColumn extends ColumnBaseMixin(DirMixin(PolymerElement)) {\n  static get is() {\n    return 'vaadin-grid-column';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Width of the cells for this column.\n       */\n      width: {\n        type: String,\n        value: '100px',\n      },\n\n      /**\n       * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.\n       * @attr {number} flex-grow\n       * @type {number}\n       */\n      flexGrow: {\n        type: Number,\n        value: 1,\n      },\n\n      /**\n       * Custom function for rendering the cell content.\n       * Receives three arguments:\n       *\n       * - `root` The cell content DOM element. Append your content to it.\n       * - `column` The `<vaadin-grid-column>` element.\n       * - `model` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `model.index` The index of the item.\n       *   - `model.item` The item.\n       *   - `model.expanded` Sublevel toggle state.\n       *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `model.selected` Selected state.\n       *   - `model.detailsOpened` Details opened state.\n       *\n       * @type {GridBodyRenderer | null | undefined}\n       */\n      renderer: Function,\n\n      /**\n       * Represents the final renderer computed on the set of observable arguments.\n       * It is supposed to be used internally when rendering the content of a body cell.\n       *\n       * @protected\n       * @type {GridBodyRenderer | undefined}\n       */\n      _renderer: {\n        type: Function,\n        computed: '_computeRenderer(renderer, __initialized)',\n      },\n\n      /**\n       * Path to an item sub-property whose value gets displayed in the column body cells.\n       * The property name is also shown in the column header if an explicit header or renderer isn't defined.\n       */\n      path: {\n        type: String,\n      },\n\n      /**\n       * Automatically sets the width of the column based on the column contents when this is set to `true`.\n       *\n       * For performance reasons the column width is calculated automatically only once when the grid items\n       * are rendered for the first time and the calculation only considers the rows which are currently\n       * rendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\n       * content changes, the column width might not match the contents anymore.\n       *\n       * Hidden columns are ignored in the calculation and their widths are not automatically updated when\n       * you show a column that was initially hidden.\n       *\n       * You can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n       *\n       * The column width may still grow larger when `flexGrow` is not 0.\n       * @attr {boolean} auto-width\n       * @type {boolean}\n       */\n      autoWidth: {\n        type: Boolean,\n        value: false,\n      },\n\n      /**\n       * When true, wraps the cell's slot into an element with role=\"button\", and sets\n       * the tabindex attribute on the button element, instead of the cell itself.\n       * This is needed to keep focus in sync with VoiceOver cursor when navigating\n       * with Control + Option + arrow keys: focusing the `<td>` element does not fire\n       * a focus event, but focusing an element with role=\"button\" inside a cell fires it.\n       * @protected\n       */\n      _focusButtonMode: {\n        type: Boolean,\n        value: false,\n      },\n\n      /**\n       * @type {Array<!HTMLElement>}\n       * @protected\n       */\n      _cells: Array,\n    };\n  }\n}\n\ndefineCustomElement(GridColumn);\n\nexport { GridColumn };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}