{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin that manages keyboard handling.\n * The mixin subscribes to the keyboard events while an actual implementation\n * for the event handlers is left to the client (a component or another mixin).\n *\n * @polymerMixin\n */\nexport const KeyboardMixin = dedupingMixin(superclass => class KeyboardMixinClass extends superclass {\n  /** @protected */\n  ready() {\n    super.ready();\n    this.addEventListener('keydown', event => {\n      this._onKeyDown(event);\n    });\n    this.addEventListener('keyup', event => {\n      this._onKeyUp(event);\n    });\n  }\n\n  /**\n   * A handler for the `keydown` event. By default, it calls\n   * separate methods for handling \"Enter\" and \"Escape\" keys.\n   * Override the method to implement your own behavior.\n   *\n   * @param {KeyboardEvent} event\n   * @protected\n   */\n  _onKeyDown(event) {\n    switch (event.key) {\n      case 'Enter':\n        this._onEnter(event);\n        break;\n      case 'Escape':\n        this._onEscape(event);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * A handler for the `keyup` event. By default, it does nothing.\n   * Override the method to implement your own behavior.\n   *\n   * @param {KeyboardEvent} _event\n   * @protected\n   */\n  _onKeyUp(_event) {\n    // To be implemented.\n  }\n\n  /**\n   * A handler for the \"Enter\" key. By default, it does nothing.\n   * Override the method to implement your own behavior.\n   *\n   * @param {KeyboardEvent} _event\n   * @protected\n   */\n  _onEnter(_event) {\n    // To be implemented.\n  }\n\n  /**\n   * A handler for the \"Escape\" key. By default, it does nothing.\n   * Override the method to implement your own behavior.\n   *\n   * @param {KeyboardEvent} _event\n   * @protected\n   */\n  _onEscape(_event) {\n    // To be implemented.\n  }\n});","map":{"version":3,"names":["dedupingMixin","KeyboardMixin","superclass","KeyboardMixinClass","ready","addEventListener","event","_onKeyDown","_onKeyUp","key","_onEnter","_onEscape","_event"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/a11y-base/src/keyboard-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin that manages keyboard handling.\n * The mixin subscribes to the keyboard events while an actual implementation\n * for the event handlers is left to the client (a component or another mixin).\n *\n * @polymerMixin\n */\nexport const KeyboardMixin = dedupingMixin(\n  (superclass) =>\n    class KeyboardMixinClass extends superclass {\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this.addEventListener('keydown', (event) => {\n          this._onKeyDown(event);\n        });\n\n        this.addEventListener('keyup', (event) => {\n          this._onKeyUp(event);\n        });\n      }\n\n      /**\n       * A handler for the `keydown` event. By default, it calls\n       * separate methods for handling \"Enter\" and \"Escape\" keys.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} event\n       * @protected\n       */\n      _onKeyDown(event) {\n        switch (event.key) {\n          case 'Enter':\n            this._onEnter(event);\n            break;\n          case 'Escape':\n            this._onEscape(event);\n            break;\n          default:\n            break;\n        }\n      }\n\n      /**\n       * A handler for the `keyup` event. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onKeyUp(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Enter\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onEnter(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Escape\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onEscape(_event) {\n        // To be implemented.\n      }\n    },\n);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,qCAAqC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGD,aAAa,CACvCE,UAAU,IACT,MAAMC,kBAAkB,SAASD,UAAU,CAAC;EAC1C;EACAE,KAAKA,CAAA,EAAG;IACN,KAAK,CAACA,KAAK,CAAC,CAAC;IAEb,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;MAC1C,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAI,CAACD,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK;MACxC,IAAI,CAACE,QAAQ,CAACF,KAAK,CAAC;IACtB,CAAC,CAAC;EACJ;;EAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;EACMC,UAAUA,CAACD,KAAK,EAAE;IAChB,QAAQA,KAAK,CAACG,GAAG;MACf,KAAK,OAAO;QACV,IAAI,CAACC,QAAQ,CAACJ,KAAK,CAAC;QACpB;MACF,KAAK,QAAQ;QACX,IAAI,CAACK,SAAS,CAACL,KAAK,CAAC;QACrB;MACF;QACE;IACJ;EACF;;EAEA;AACN;AACA;AACA;AACA;AACA;AACA;EACME,QAAQA,CAACI,MAAM,EAAE;IACf;EAAA;;EAGF;AACN;AACA;AACA;AACA;AACA;AACA;EACMF,QAAQA,CAACE,MAAM,EAAE;IACf;EAAA;;EAGF;AACN;AACA;AACA;AACA;AACA;AACA;EACMD,SAASA,CAACC,MAAM,EAAE;IAChB;EAAA;AAEJ,CACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}