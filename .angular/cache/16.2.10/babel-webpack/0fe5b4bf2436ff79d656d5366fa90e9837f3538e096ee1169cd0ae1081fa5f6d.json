{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to store the reference to an input element\n * and add input and change event listeners to it.\n *\n * @polymerMixin\n */\nexport const InputMixin = dedupingMixin(superclass => class InputMixinClass extends superclass {\n  static get properties() {\n    return {\n      /**\n       * A reference to the input element controlled by the mixin.\n       * Any component implementing this mixin is expected to provide it\n       * by using `this._setInputElement(input)` Polymer API.\n       *\n       * A typical case is using `InputController` that does this automatically.\n       * However, the input element does not have to always be native <input>:\n       * as an example, <vaadin-combo-box-light> accepts other components.\n       *\n       * @protected\n       * @type {!HTMLElement}\n       */\n      inputElement: {\n        type: Object,\n        readOnly: true,\n        observer: '_inputElementChanged'\n      },\n      /**\n       * String used to define input type.\n       * @protected\n       */\n      type: {\n        type: String,\n        readOnly: true\n      },\n      /**\n       * The value of the field.\n       */\n      value: {\n        type: String,\n        value: '',\n        observer: '_valueChanged',\n        notify: true,\n        sync: true\n      },\n      /**\n       * Whether the input element has a non-empty value.\n       *\n       * @protected\n       */\n      _hasInputValue: {\n        type: Boolean,\n        value: false,\n        observer: '_hasInputValueChanged'\n      }\n    };\n  }\n  constructor() {\n    super();\n    this._boundOnInput = this.__onInput.bind(this);\n    this._boundOnChange = this._onChange.bind(this);\n  }\n\n  /**\n   * Indicates whether the value is different from the default one.\n   * Override if the `value` property has a type other than `string`.\n   *\n   * @protected\n   */\n  get _hasValue() {\n    return this.value != null && this.value !== '';\n  }\n\n  /**\n   * A property for accessing the input element's value.\n   *\n   * Override this getter if the property is different from the default `value` one.\n   *\n   * @protected\n   * @return {string}\n   */\n  get _inputElementValueProperty() {\n    return 'value';\n  }\n\n  /**\n   * The input element's value.\n   *\n   * @protected\n   * @return {string}\n   */\n  get _inputElementValue() {\n    return this.inputElement ? this.inputElement[this._inputElementValueProperty] : undefined;\n  }\n\n  /**\n   * The input element's value.\n   *\n   * @protected\n   */\n  set _inputElementValue(value) {\n    if (this.inputElement) {\n      this.inputElement[this._inputElementValueProperty] = value;\n    }\n  }\n\n  /**\n   * Clear the value of the field.\n   */\n  clear() {\n    this._hasInputValue = false;\n    this.value = '';\n\n    // Clear the input immediately without waiting for the observer.\n    // Otherwise, when using Lit, the old value would be restored.\n    this._inputElementValue = '';\n  }\n\n  /**\n   * Add event listeners to the input element instance.\n   * Override this method to add custom listeners.\n   * @param {!HTMLElement} input\n   * @protected\n   */\n  _addInputListeners(input) {\n    input.addEventListener('input', this._boundOnInput);\n    input.addEventListener('change', this._boundOnChange);\n  }\n\n  /**\n   * Remove event listeners from the input element instance.\n   * @param {!HTMLElement} input\n   * @protected\n   */\n  _removeInputListeners(input) {\n    input.removeEventListener('input', this._boundOnInput);\n    input.removeEventListener('change', this._boundOnChange);\n  }\n\n  /**\n   * A method to forward the value property set on the field\n   * programmatically back to the input element value.\n   * Override this method to perform additional checks,\n   * for example to skip this in certain conditions.\n   * @param {string} value\n   * @protected\n   */\n  _forwardInputValue(value) {\n    // Value might be set before an input element is initialized.\n    // This case should be handled separately by a component that\n    // implements this mixin, for example in `connectedCallback`.\n    if (!this.inputElement) {\n      return;\n    }\n    this._inputElementValue = value != null ? value : '';\n  }\n\n  /**\n   * @param {HTMLElement | undefined} input\n   * @param {HTMLElement | undefined} oldInput\n   * @protected\n   */\n  _inputElementChanged(input, oldInput) {\n    if (input) {\n      this._addInputListeners(input);\n    } else if (oldInput) {\n      this._removeInputListeners(oldInput);\n    }\n  }\n\n  /**\n   * Observer to notify about the change of private property.\n   *\n   * @private\n   */\n  _hasInputValueChanged(hasValue, oldHasValue) {\n    if (hasValue || oldHasValue) {\n      this.dispatchEvent(new CustomEvent('has-input-value-changed'));\n    }\n  }\n\n  /**\n   * An input event listener used to update `_hasInputValue` property.\n   * Do not override this method.\n   *\n   * @param {Event} event\n   * @private\n   */\n  __onInput(event) {\n    this._setHasInputValue(event);\n    this._onInput(event);\n  }\n\n  /**\n   * An input event listener used to update the field value.\n   *\n   * @param {Event} event\n   * @protected\n   */\n  _onInput(event) {\n    // In the case a custom web component is passed as `inputElement`,\n    // the actual native input element, on which the event occurred,\n    // can be inside shadow trees.\n    const target = event.composedPath()[0];\n    // Ignore fake input events e.g. used by clear button.\n    this.__userInput = event.isTrusted;\n    this.value = target.value;\n    this.__userInput = false;\n  }\n\n  /**\n   * A change event listener.\n   * Override this method with an actual implementation.\n   * @param {Event} _event\n   * @protected\n   */\n  _onChange(_event) {}\n\n  /**\n   * Toggle the has-value attribute based on the value property.\n   *\n   * @param {boolean} hasValue\n   * @protected\n   */\n  _toggleHasValue(hasValue) {\n    this.toggleAttribute('has-value', hasValue);\n  }\n\n  /**\n   * Observer called when a value property changes.\n   * @param {string | undefined} newVal\n   * @param {string | undefined} oldVal\n   * @protected\n   */\n  _valueChanged(newVal, oldVal) {\n    this._toggleHasValue(this._hasValue);\n\n    // Setting initial value to empty string, do nothing.\n    if (newVal === '' && oldVal === undefined) {\n      return;\n    }\n\n    // Value is set by the user, no need to sync it back to input.\n    if (this.__userInput) {\n      return;\n    }\n\n    // Setting a value programmatically, sync it to input element.\n    this._forwardInputValue(newVal);\n  }\n\n  /**\n   * Sets the `_hasInputValue` property based on the `input` event.\n   *\n   * @param {InputEvent} event\n   * @protected\n   */\n  _setHasInputValue(event) {\n    // In the case a custom web component is passed as `inputElement`,\n    // the actual native input element, on which the event occurred,\n    // can be inside shadow trees.\n    const target = event.composedPath()[0];\n    this._hasInputValue = target.value.length > 0;\n  }\n});","map":{"version":3,"names":["dedupingMixin","InputMixin","superclass","InputMixinClass","properties","inputElement","type","Object","readOnly","observer","String","value","notify","sync","_hasInputValue","Boolean","constructor","_boundOnInput","__onInput","bind","_boundOnChange","_onChange","_hasValue","_inputElementValueProperty","_inputElementValue","undefined","clear","_addInputListeners","input","addEventListener","_removeInputListeners","removeEventListener","_forwardInputValue","_inputElementChanged","oldInput","_hasInputValueChanged","hasValue","oldHasValue","dispatchEvent","CustomEvent","event","_setHasInputValue","_onInput","target","composedPath","__userInput","isTrusted","_event","_toggleHasValue","toggleAttribute","_valueChanged","newVal","oldVal","length"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/field-base/src/input-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to store the reference to an input element\n * and add input and change event listeners to it.\n *\n * @polymerMixin\n */\nexport const InputMixin = dedupingMixin(\n  (superclass) =>\n    class InputMixinClass extends superclass {\n      static get properties() {\n        return {\n          /**\n           * A reference to the input element controlled by the mixin.\n           * Any component implementing this mixin is expected to provide it\n           * by using `this._setInputElement(input)` Polymer API.\n           *\n           * A typical case is using `InputController` that does this automatically.\n           * However, the input element does not have to always be native <input>:\n           * as an example, <vaadin-combo-box-light> accepts other components.\n           *\n           * @protected\n           * @type {!HTMLElement}\n           */\n          inputElement: {\n            type: Object,\n            readOnly: true,\n            observer: '_inputElementChanged',\n          },\n\n          /**\n           * String used to define input type.\n           * @protected\n           */\n          type: {\n            type: String,\n            readOnly: true,\n          },\n\n          /**\n           * The value of the field.\n           */\n          value: {\n            type: String,\n            value: '',\n            observer: '_valueChanged',\n            notify: true,\n            sync: true,\n          },\n\n          /**\n           * Whether the input element has a non-empty value.\n           *\n           * @protected\n           */\n          _hasInputValue: {\n            type: Boolean,\n            value: false,\n            observer: '_hasInputValueChanged',\n          },\n        };\n      }\n\n      constructor() {\n        super();\n\n        this._boundOnInput = this.__onInput.bind(this);\n        this._boundOnChange = this._onChange.bind(this);\n      }\n\n      /**\n       * Indicates whether the value is different from the default one.\n       * Override if the `value` property has a type other than `string`.\n       *\n       * @protected\n       */\n      get _hasValue() {\n        return this.value != null && this.value !== '';\n      }\n\n      /**\n       * A property for accessing the input element's value.\n       *\n       * Override this getter if the property is different from the default `value` one.\n       *\n       * @protected\n       * @return {string}\n       */\n      get _inputElementValueProperty() {\n        return 'value';\n      }\n\n      /**\n       * The input element's value.\n       *\n       * @protected\n       * @return {string}\n       */\n      get _inputElementValue() {\n        return this.inputElement ? this.inputElement[this._inputElementValueProperty] : undefined;\n      }\n\n      /**\n       * The input element's value.\n       *\n       * @protected\n       */\n      set _inputElementValue(value) {\n        if (this.inputElement) {\n          this.inputElement[this._inputElementValueProperty] = value;\n        }\n      }\n\n      /**\n       * Clear the value of the field.\n       */\n      clear() {\n        this._hasInputValue = false;\n\n        this.value = '';\n\n        // Clear the input immediately without waiting for the observer.\n        // Otherwise, when using Lit, the old value would be restored.\n        this._inputElementValue = '';\n      }\n\n      /**\n       * Add event listeners to the input element instance.\n       * Override this method to add custom listeners.\n       * @param {!HTMLElement} input\n       * @protected\n       */\n      _addInputListeners(input) {\n        input.addEventListener('input', this._boundOnInput);\n        input.addEventListener('change', this._boundOnChange);\n      }\n\n      /**\n       * Remove event listeners from the input element instance.\n       * @param {!HTMLElement} input\n       * @protected\n       */\n      _removeInputListeners(input) {\n        input.removeEventListener('input', this._boundOnInput);\n        input.removeEventListener('change', this._boundOnChange);\n      }\n\n      /**\n       * A method to forward the value property set on the field\n       * programmatically back to the input element value.\n       * Override this method to perform additional checks,\n       * for example to skip this in certain conditions.\n       * @param {string} value\n       * @protected\n       */\n      _forwardInputValue(value) {\n        // Value might be set before an input element is initialized.\n        // This case should be handled separately by a component that\n        // implements this mixin, for example in `connectedCallback`.\n        if (!this.inputElement) {\n          return;\n        }\n\n        this._inputElementValue = value != null ? value : '';\n      }\n\n      /**\n       * @param {HTMLElement | undefined} input\n       * @param {HTMLElement | undefined} oldInput\n       * @protected\n       */\n      _inputElementChanged(input, oldInput) {\n        if (input) {\n          this._addInputListeners(input);\n        } else if (oldInput) {\n          this._removeInputListeners(oldInput);\n        }\n      }\n\n      /**\n       * Observer to notify about the change of private property.\n       *\n       * @private\n       */\n      _hasInputValueChanged(hasValue, oldHasValue) {\n        if (hasValue || oldHasValue) {\n          this.dispatchEvent(new CustomEvent('has-input-value-changed'));\n        }\n      }\n\n      /**\n       * An input event listener used to update `_hasInputValue` property.\n       * Do not override this method.\n       *\n       * @param {Event} event\n       * @private\n       */\n      __onInput(event) {\n        this._setHasInputValue(event);\n        this._onInput(event);\n      }\n\n      /**\n       * An input event listener used to update the field value.\n       *\n       * @param {Event} event\n       * @protected\n       */\n      _onInput(event) {\n        // In the case a custom web component is passed as `inputElement`,\n        // the actual native input element, on which the event occurred,\n        // can be inside shadow trees.\n        const target = event.composedPath()[0];\n        // Ignore fake input events e.g. used by clear button.\n        this.__userInput = event.isTrusted;\n        this.value = target.value;\n        this.__userInput = false;\n      }\n\n      /**\n       * A change event listener.\n       * Override this method with an actual implementation.\n       * @param {Event} _event\n       * @protected\n       */\n      _onChange(_event) {}\n\n      /**\n       * Toggle the has-value attribute based on the value property.\n       *\n       * @param {boolean} hasValue\n       * @protected\n       */\n      _toggleHasValue(hasValue) {\n        this.toggleAttribute('has-value', hasValue);\n      }\n\n      /**\n       * Observer called when a value property changes.\n       * @param {string | undefined} newVal\n       * @param {string | undefined} oldVal\n       * @protected\n       */\n      _valueChanged(newVal, oldVal) {\n        this._toggleHasValue(this._hasValue);\n\n        // Setting initial value to empty string, do nothing.\n        if (newVal === '' && oldVal === undefined) {\n          return;\n        }\n\n        // Value is set by the user, no need to sync it back to input.\n        if (this.__userInput) {\n          return;\n        }\n\n        // Setting a value programmatically, sync it to input element.\n        this._forwardInputValue(newVal);\n      }\n\n      /**\n       * Sets the `_hasInputValue` property based on the `input` event.\n       *\n       * @param {InputEvent} event\n       * @protected\n       */\n      _setHasInputValue(event) {\n        // In the case a custom web component is passed as `inputElement`,\n        // the actual native input element, on which the event occurred,\n        // can be inside shadow trees.\n        const target = event.composedPath()[0];\n        this._hasInputValue = target.value.length > 0;\n      }\n    },\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}