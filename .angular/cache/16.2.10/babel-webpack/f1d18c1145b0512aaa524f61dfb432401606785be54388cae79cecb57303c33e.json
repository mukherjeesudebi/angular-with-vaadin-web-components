{"ast":null,"code":"/**\n@license\nCopyright (c) 2018 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\n/**\n * @polymerMixin\n */\nexport const StylingMixin = superClass => class StylingMixin extends superClass {\n  static get properties() {\n    return {\n      /**\n       * A function that allows generating CSS class names for grid cells\n       * based on their row and column. The return value should be the generated\n       * class name as a string, or multiple class names separated by whitespace\n       * characters.\n       *\n       * Receives two arguments:\n       * - `column` The `<vaadin-grid-column>` element.\n       * - `rowData` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `rowData.index` The index of the item.\n       *   - `rowData.item` The item.\n       *   - `rowData.expanded` Sublevel toggle state.\n       *   - `rowData.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `rowData.selected` Selected state.\n       */\n      cellClassNameGenerator: Function\n    };\n  }\n  static get observers() {\n    return ['__cellClassNameGeneratorChanged(cellClassNameGenerator)'];\n  }\n  __cellClassNameGeneratorChanged(cellClassGenerator) {\n    this.generateCellClassNames();\n  }\n\n  /**\n   * Runs the `cellClassNameGenerator` for the visible cells.\n   * If the generator depends on varying conditions, you need to\n   * call this function manually in order to update the styles when\n   * the conditions change.\n   */\n  generateCellClassNames() {\n    Array.from(this.$.items.children).filter(row => !row.hidden).forEach(row => this._generateCellClassNames(row, this.__getRowModel(row)));\n  }\n  _generateCellClassNames(row, rowData) {\n    Array.from(row.children).forEach(cell => {\n      if (cell.__generatedClasses) {\n        cell.__generatedClasses.forEach(className => cell.classList.remove(className));\n      }\n      if (this.cellClassNameGenerator) {\n        const result = this.cellClassNameGenerator(cell._column, rowData);\n        cell.__generatedClasses = result && result.split(' ').filter(className => className.length > 0);\n        if (cell.__generatedClasses) {\n          cell.__generatedClasses.forEach(className => cell.classList.add(className));\n        }\n      }\n    });\n  }\n};","map":{"version":3,"names":["StylingMixin","superClass","properties","cellClassNameGenerator","Function","observers","__cellClassNameGeneratorChanged","cellClassGenerator","generateCellClassNames","Array","from","$","items","children","filter","row","hidden","forEach","_generateCellClassNames","__getRowModel","rowData","cell","__generatedClasses","className","classList","remove","result","_column","split","length","add"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/vaadin-grid/src/vaadin-grid-styling-mixin.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2018 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\n/**\n * @polymerMixin\n */\nexport const StylingMixin = superClass => class StylingMixin extends superClass {\n\n  static get properties() {\n    return {\n      /**\n       * A function that allows generating CSS class names for grid cells\n       * based on their row and column. The return value should be the generated\n       * class name as a string, or multiple class names separated by whitespace\n       * characters.\n       *\n       * Receives two arguments:\n       * - `column` The `<vaadin-grid-column>` element.\n       * - `rowData` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `rowData.index` The index of the item.\n       *   - `rowData.item` The item.\n       *   - `rowData.expanded` Sublevel toggle state.\n       *   - `rowData.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `rowData.selected` Selected state.\n       */\n      cellClassNameGenerator: Function\n    };\n  }\n\n  static get observers() {\n    return [\n      '__cellClassNameGeneratorChanged(cellClassNameGenerator)'\n    ];\n  }\n\n  __cellClassNameGeneratorChanged(cellClassGenerator) {\n    this.generateCellClassNames();\n  }\n\n  /**\n   * Runs the `cellClassNameGenerator` for the visible cells.\n   * If the generator depends on varying conditions, you need to\n   * call this function manually in order to update the styles when\n   * the conditions change.\n   */\n  generateCellClassNames() {\n    Array.from(this.$.items.children).filter(row => !row.hidden).forEach(\n      row => this._generateCellClassNames(row, this.__getRowModel(row)));\n  }\n\n  _generateCellClassNames(row, rowData) {\n    Array.from(row.children).forEach(cell => {\n      if (cell.__generatedClasses) {\n        cell.__generatedClasses.forEach(className => cell.classList.remove(className));\n      }\n      if (this.cellClassNameGenerator) {\n        const result = this.cellClassNameGenerator(cell._column, rowData);\n        cell.__generatedClasses = result && result.split(' ').filter(className => className.length > 0);\n        if (cell.__generatedClasses) {\n          cell.__generatedClasses.forEach(className => cell.classList.add(className));\n        }\n      }\n    });\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAGC,UAAU,IAAI,MAAMD,YAAY,SAASC,UAAU,CAAC;EAE9E,WAAWC,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACMC,sBAAsB,EAAEC;IAC1B,CAAC;EACH;EAEA,WAAWC,SAASA,CAAA,EAAG;IACrB,OAAO,CACL,yDAAyD,CAC1D;EACH;EAEAC,+BAA+BA,CAACC,kBAAkB,EAAE;IAClD,IAAI,CAACC,sBAAsB,CAAC,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEA,sBAAsBA,CAAA,EAAG;IACvBC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACC,CAAC,CAACC,KAAK,CAACC,QAAQ,CAAC,CAACC,MAAM,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,MAAM,CAAC,CAACC,OAAO,CAClEF,GAAG,IAAI,IAAI,CAACG,uBAAuB,CAACH,GAAG,EAAE,IAAI,CAACI,aAAa,CAACJ,GAAG,CAAC,CAAC,CAAC;EACtE;EAEAG,uBAAuBA,CAACH,GAAG,EAAEK,OAAO,EAAE;IACpCX,KAAK,CAACC,IAAI,CAACK,GAAG,CAACF,QAAQ,CAAC,CAACI,OAAO,CAACI,IAAI,IAAI;MACvC,IAAIA,IAAI,CAACC,kBAAkB,EAAE;QAC3BD,IAAI,CAACC,kBAAkB,CAACL,OAAO,CAACM,SAAS,IAAIF,IAAI,CAACG,SAAS,CAACC,MAAM,CAACF,SAAS,CAAC,CAAC;MAChF;MACA,IAAI,IAAI,CAACpB,sBAAsB,EAAE;QAC/B,MAAMuB,MAAM,GAAG,IAAI,CAACvB,sBAAsB,CAACkB,IAAI,CAACM,OAAO,EAAEP,OAAO,CAAC;QACjEC,IAAI,CAACC,kBAAkB,GAAGI,MAAM,IAAIA,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAACd,MAAM,CAACS,SAAS,IAAIA,SAAS,CAACM,MAAM,GAAG,CAAC,CAAC;QAC/F,IAAIR,IAAI,CAACC,kBAAkB,EAAE;UAC3BD,IAAI,CAACC,kBAAkB,CAACL,OAAO,CAACM,SAAS,IAAIF,IAAI,CAACG,SAAS,CAACM,GAAG,CAACP,SAAS,CAAC,CAAC;QAC7E;MACF;IACF,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}