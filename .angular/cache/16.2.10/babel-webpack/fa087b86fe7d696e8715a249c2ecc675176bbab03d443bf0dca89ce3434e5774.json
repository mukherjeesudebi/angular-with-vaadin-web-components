{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DelegateFocusMixin } from '@vaadin/a11y-base/src/delegate-focus-mixin.js';\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { SlotStylesMixin } from '@vaadin/component-base/src/slot-styles-mixin.js';\nimport { ClearButtonMixin } from './clear-button-mixin.js';\nimport { FieldMixin } from './field-mixin.js';\nimport { InputConstraintsMixin } from './input-constraints-mixin.js';\n\n/**\n * A mixin to provide shared logic for the editable form input controls.\n *\n * @polymerMixin\n * @mixes DelegateFocusMixin\n * @mixes FieldMixin\n * @mixes InputConstraintsMixin\n * @mixes KeyboardMixin\n * @mixes ClearButtonMixin\n * @mixes SlotStylesMixin\n */\nexport const InputControlMixin = superclass => class InputControlMixinClass extends SlotStylesMixin(DelegateFocusMixin(InputConstraintsMixin(FieldMixin(ClearButtonMixin(KeyboardMixin(superclass)))))) {\n  static get properties() {\n    return {\n      /**\n       * A pattern matched against individual characters the user inputs.\n       *\n       * When set, the field will prevent:\n       * - `keydown` events if the entered key doesn't match `/^allowedCharPattern$/`\n       * - `paste` events if the pasted text doesn't match `/^allowedCharPattern*$/`\n       * - `drop` events if the dropped text doesn't match `/^allowedCharPattern*$/`\n       *\n       * For example, to allow entering only numbers and minus signs, use:\n       * `allowedCharPattern = \"[\\\\d-]\"`\n       * @attr {string} allowed-char-pattern\n       */\n      allowedCharPattern: {\n        type: String,\n        observer: '_allowedCharPatternChanged'\n      },\n      /**\n       * If true, the input text gets fully selected when the field is focused using click or touch / tap.\n       */\n      autoselect: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * The name of this field.\n       */\n      name: {\n        type: String,\n        reflectToAttribute: true\n      },\n      /**\n       * A hint to the user of what can be entered in the field.\n       */\n      placeholder: {\n        type: String,\n        reflectToAttribute: true\n      },\n      /**\n       * When present, it specifies that the field is read-only.\n       */\n      readonly: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * The text usually displayed in a tooltip popup when the mouse is over the field.\n       */\n      title: {\n        type: String,\n        reflectToAttribute: true\n      }\n    };\n  }\n  static get delegateAttrs() {\n    return [...super.delegateAttrs, 'name', 'type', 'placeholder', 'readonly', 'invalid', 'title'];\n  }\n  constructor() {\n    super();\n    this._boundOnPaste = this._onPaste.bind(this);\n    this._boundOnDrop = this._onDrop.bind(this);\n    this._boundOnBeforeInput = this._onBeforeInput.bind(this);\n  }\n\n  /** @protected */\n  get slotStyles() {\n    // Needed for Safari, where ::slotted(...)::placeholder does not work\n    return [`\n          :is(input[slot='input'], textarea[slot='textarea'])::placeholder {\n            font: inherit;\n            color: inherit;\n          }\n        `];\n  }\n\n  /**\n   * Override an event listener from `DelegateFocusMixin`.\n   * @param {FocusEvent} event\n   * @protected\n   * @override\n   */\n  _onFocus(event) {\n    super._onFocus(event);\n    if (this.autoselect && this.inputElement) {\n      this.inputElement.select();\n    }\n  }\n\n  /**\n   * Override an event listener inherited from `InputMixin`\n   * to capture native `change` event and make sure that\n   * a new one is dispatched after validation runs.\n   * @param {Event} event\n   * @protected\n   * @override\n   */\n  _onChange(event) {\n    event.stopPropagation();\n    this.validate();\n    this.dispatchEvent(new CustomEvent('change', {\n      detail: {\n        sourceEvent: event\n      },\n      bubbles: event.bubbles,\n      cancelable: event.cancelable\n    }));\n  }\n\n  /**\n   * Override a method from `InputMixin`.\n   * @param {!HTMLElement} input\n   * @protected\n   * @override\n   */\n  _addInputListeners(input) {\n    super._addInputListeners(input);\n    input.addEventListener('paste', this._boundOnPaste);\n    input.addEventListener('drop', this._boundOnDrop);\n    input.addEventListener('beforeinput', this._boundOnBeforeInput);\n  }\n\n  /**\n   * Override a method from `InputMixin`.\n   * @param {!HTMLElement} input\n   * @protected\n   * @override\n   */\n  _removeInputListeners(input) {\n    super._removeInputListeners(input);\n    input.removeEventListener('paste', this._boundOnPaste);\n    input.removeEventListener('drop', this._boundOnDrop);\n    input.removeEventListener('beforeinput', this._boundOnBeforeInput);\n  }\n\n  /**\n   * Override an event listener from `KeyboardMixin`.\n   * @param {!KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    super._onKeyDown(event);\n    if (this.allowedCharPattern && !this.__shouldAcceptKey(event)) {\n      event.preventDefault();\n      this._markInputPrevented();\n    }\n  }\n\n  /** @protected */\n  _markInputPrevented() {\n    // Add input-prevented attribute for 200ms\n    this.setAttribute('input-prevented', '');\n    this._preventInputDebouncer = Debouncer.debounce(this._preventInputDebouncer, timeOut.after(200), () => {\n      this.removeAttribute('input-prevented');\n    });\n  }\n\n  /** @private */\n  __shouldAcceptKey(event) {\n    return event.metaKey || event.ctrlKey || !event.key ||\n    // Allow typing anything if event.key is not supported\n    event.key.length !== 1 ||\n    // Allow \"Backspace\", \"ArrowLeft\" etc.\n    this.__allowedCharRegExp.test(event.key);\n  }\n\n  /** @private */\n  _onPaste(e) {\n    if (this.allowedCharPattern) {\n      const pastedText = e.clipboardData.getData('text');\n      if (!this.__allowedTextRegExp.test(pastedText)) {\n        e.preventDefault();\n        this._markInputPrevented();\n      }\n    }\n  }\n\n  /** @private */\n  _onDrop(e) {\n    if (this.allowedCharPattern) {\n      const draggedText = e.dataTransfer.getData('text');\n      if (!this.__allowedTextRegExp.test(draggedText)) {\n        e.preventDefault();\n        this._markInputPrevented();\n      }\n    }\n  }\n\n  /** @private */\n  _onBeforeInput(e) {\n    // The `beforeinput` event covers all the cases for `allowedCharPattern`: keyboard, pasting and dropping,\n    // but it is still experimental technology so we can't rely on it. It's used here just as an additional check,\n    // because it seems to be the only way to detect and prevent specific keys on mobile devices.\n    // See https://github.com/vaadin/vaadin-text-field/issues/429\n    if (this.allowedCharPattern && e.data && !this.__allowedTextRegExp.test(e.data)) {\n      e.preventDefault();\n      this._markInputPrevented();\n    }\n  }\n\n  /** @private */\n  _allowedCharPatternChanged(charPattern) {\n    if (charPattern) {\n      try {\n        this.__allowedCharRegExp = new RegExp(`^${charPattern}$`, 'u');\n        this.__allowedTextRegExp = new RegExp(`^${charPattern}*$`, 'u');\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  /**\n   * Fired when the user commits a value change.\n   *\n   * @event change\n   */\n\n  /**\n   * Fired when the value is changed by the user: on every typing keystroke,\n   * and the value is cleared using the clear button.\n   *\n   * @event input\n   */\n};","map":{"version":3,"names":["DelegateFocusMixin","KeyboardMixin","timeOut","Debouncer","SlotStylesMixin","ClearButtonMixin","FieldMixin","InputConstraintsMixin","InputControlMixin","superclass","InputControlMixinClass","properties","allowedCharPattern","type","String","observer","autoselect","Boolean","value","name","reflectToAttribute","placeholder","readonly","title","delegateAttrs","constructor","_boundOnPaste","_onPaste","bind","_boundOnDrop","_onDrop","_boundOnBeforeInput","_onBeforeInput","slotStyles","_onFocus","event","inputElement","select","_onChange","stopPropagation","validate","dispatchEvent","CustomEvent","detail","sourceEvent","bubbles","cancelable","_addInputListeners","input","addEventListener","_removeInputListeners","removeEventListener","_onKeyDown","__shouldAcceptKey","preventDefault","_markInputPrevented","setAttribute","_preventInputDebouncer","debounce","after","removeAttribute","metaKey","ctrlKey","key","length","__allowedCharRegExp","test","e","pastedText","clipboardData","getData","__allowedTextRegExp","draggedText","dataTransfer","data","_allowedCharPatternChanged","charPattern","RegExp","console","error"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/field-base/src/input-control-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DelegateFocusMixin } from '@vaadin/a11y-base/src/delegate-focus-mixin.js';\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { SlotStylesMixin } from '@vaadin/component-base/src/slot-styles-mixin.js';\nimport { ClearButtonMixin } from './clear-button-mixin.js';\nimport { FieldMixin } from './field-mixin.js';\nimport { InputConstraintsMixin } from './input-constraints-mixin.js';\n\n/**\n * A mixin to provide shared logic for the editable form input controls.\n *\n * @polymerMixin\n * @mixes DelegateFocusMixin\n * @mixes FieldMixin\n * @mixes InputConstraintsMixin\n * @mixes KeyboardMixin\n * @mixes ClearButtonMixin\n * @mixes SlotStylesMixin\n */\nexport const InputControlMixin = (superclass) =>\n  class InputControlMixinClass extends SlotStylesMixin(\n    DelegateFocusMixin(InputConstraintsMixin(FieldMixin(ClearButtonMixin(KeyboardMixin(superclass))))),\n  ) {\n    static get properties() {\n      return {\n        /**\n         * A pattern matched against individual characters the user inputs.\n         *\n         * When set, the field will prevent:\n         * - `keydown` events if the entered key doesn't match `/^allowedCharPattern$/`\n         * - `paste` events if the pasted text doesn't match `/^allowedCharPattern*$/`\n         * - `drop` events if the dropped text doesn't match `/^allowedCharPattern*$/`\n         *\n         * For example, to allow entering only numbers and minus signs, use:\n         * `allowedCharPattern = \"[\\\\d-]\"`\n         * @attr {string} allowed-char-pattern\n         */\n        allowedCharPattern: {\n          type: String,\n          observer: '_allowedCharPatternChanged',\n        },\n\n        /**\n         * If true, the input text gets fully selected when the field is focused using click or touch / tap.\n         */\n        autoselect: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * The name of this field.\n         */\n        name: {\n          type: String,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * A hint to the user of what can be entered in the field.\n         */\n        placeholder: {\n          type: String,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * When present, it specifies that the field is read-only.\n         */\n        readonly: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * The text usually displayed in a tooltip popup when the mouse is over the field.\n         */\n        title: {\n          type: String,\n          reflectToAttribute: true,\n        },\n      };\n    }\n\n    static get delegateAttrs() {\n      return [...super.delegateAttrs, 'name', 'type', 'placeholder', 'readonly', 'invalid', 'title'];\n    }\n\n    constructor() {\n      super();\n\n      this._boundOnPaste = this._onPaste.bind(this);\n      this._boundOnDrop = this._onDrop.bind(this);\n      this._boundOnBeforeInput = this._onBeforeInput.bind(this);\n    }\n\n    /** @protected */\n    get slotStyles() {\n      // Needed for Safari, where ::slotted(...)::placeholder does not work\n      return [\n        `\n          :is(input[slot='input'], textarea[slot='textarea'])::placeholder {\n            font: inherit;\n            color: inherit;\n          }\n        `,\n      ];\n    }\n\n    /**\n     * Override an event listener from `DelegateFocusMixin`.\n     * @param {FocusEvent} event\n     * @protected\n     * @override\n     */\n    _onFocus(event) {\n      super._onFocus(event);\n\n      if (this.autoselect && this.inputElement) {\n        this.inputElement.select();\n      }\n    }\n\n    /**\n     * Override an event listener inherited from `InputMixin`\n     * to capture native `change` event and make sure that\n     * a new one is dispatched after validation runs.\n     * @param {Event} event\n     * @protected\n     * @override\n     */\n    _onChange(event) {\n      event.stopPropagation();\n\n      this.validate();\n\n      this.dispatchEvent(\n        new CustomEvent('change', {\n          detail: {\n            sourceEvent: event,\n          },\n          bubbles: event.bubbles,\n          cancelable: event.cancelable,\n        }),\n      );\n    }\n\n    /**\n     * Override a method from `InputMixin`.\n     * @param {!HTMLElement} input\n     * @protected\n     * @override\n     */\n    _addInputListeners(input) {\n      super._addInputListeners(input);\n\n      input.addEventListener('paste', this._boundOnPaste);\n      input.addEventListener('drop', this._boundOnDrop);\n      input.addEventListener('beforeinput', this._boundOnBeforeInput);\n    }\n\n    /**\n     * Override a method from `InputMixin`.\n     * @param {!HTMLElement} input\n     * @protected\n     * @override\n     */\n    _removeInputListeners(input) {\n      super._removeInputListeners(input);\n\n      input.removeEventListener('paste', this._boundOnPaste);\n      input.removeEventListener('drop', this._boundOnDrop);\n      input.removeEventListener('beforeinput', this._boundOnBeforeInput);\n    }\n\n    /**\n     * Override an event listener from `KeyboardMixin`.\n     * @param {!KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyDown(event) {\n      super._onKeyDown(event);\n\n      if (this.allowedCharPattern && !this.__shouldAcceptKey(event)) {\n        event.preventDefault();\n        this._markInputPrevented();\n      }\n    }\n\n    /** @protected */\n    _markInputPrevented() {\n      // Add input-prevented attribute for 200ms\n      this.setAttribute('input-prevented', '');\n      this._preventInputDebouncer = Debouncer.debounce(this._preventInputDebouncer, timeOut.after(200), () => {\n        this.removeAttribute('input-prevented');\n      });\n    }\n\n    /** @private */\n    __shouldAcceptKey(event) {\n      return (\n        event.metaKey ||\n        event.ctrlKey ||\n        !event.key || // Allow typing anything if event.key is not supported\n        event.key.length !== 1 || // Allow \"Backspace\", \"ArrowLeft\" etc.\n        this.__allowedCharRegExp.test(event.key)\n      );\n    }\n\n    /** @private */\n    _onPaste(e) {\n      if (this.allowedCharPattern) {\n        const pastedText = e.clipboardData.getData('text');\n        if (!this.__allowedTextRegExp.test(pastedText)) {\n          e.preventDefault();\n          this._markInputPrevented();\n        }\n      }\n    }\n\n    /** @private */\n    _onDrop(e) {\n      if (this.allowedCharPattern) {\n        const draggedText = e.dataTransfer.getData('text');\n        if (!this.__allowedTextRegExp.test(draggedText)) {\n          e.preventDefault();\n          this._markInputPrevented();\n        }\n      }\n    }\n\n    /** @private */\n    _onBeforeInput(e) {\n      // The `beforeinput` event covers all the cases for `allowedCharPattern`: keyboard, pasting and dropping,\n      // but it is still experimental technology so we can't rely on it. It's used here just as an additional check,\n      // because it seems to be the only way to detect and prevent specific keys on mobile devices.\n      // See https://github.com/vaadin/vaadin-text-field/issues/429\n      if (this.allowedCharPattern && e.data && !this.__allowedTextRegExp.test(e.data)) {\n        e.preventDefault();\n        this._markInputPrevented();\n      }\n    }\n\n    /** @private */\n    _allowedCharPatternChanged(charPattern) {\n      if (charPattern) {\n        try {\n          this.__allowedCharRegExp = new RegExp(`^${charPattern}$`, 'u');\n          this.__allowedTextRegExp = new RegExp(`^${charPattern}*$`, 'u');\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    /**\n     * Fired when the user commits a value change.\n     *\n     * @event change\n     */\n\n    /**\n     * Fired when the value is changed by the user: on every typing keystroke,\n     * and the value is cleared using the clear button.\n     *\n     * @event input\n     */\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}