{"ast":null,"code":"/**\n@license\nCopyright (c) 2018 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\n/**\n * @polymerMixin\n */\nexport const EventContextMixin = superClass => class EventContextMixin extends superClass {\n  /**\n   * Returns an object with context information about the event target:\n   * - `item`: the data object corresponding to the targeted row (not specified when targeting header or footer)\n   * - `column`: the column element corresponding to the targeted cell (not specified when targeting row details)\n   * - `section`: whether the event targeted the body, header, footer or details of the grid\n   *\n   * These additional properties are included when `item` is specified:\n   * - `index`: the index of the item\n   * - `selected`: the selected state of the item\n   * - `detailsOpened`: whether the row details are open for the item\n   * - `expanded`: the expanded state of the tree toggle\n   * - `level`: the tree hierarchy level\n   *\n   * The returned object is populated only when a grid cell, header, footer or row details is found in `event.composedPath()`.\n   * This means mostly mouse and keyboard events. If such a grid part is not found in the path, an empty object is returned.\n   * This may be the case eg. if the event is fired on the `<vaadin-grid>` element and not any deeper in the DOM, or if\n   * the event targets the empty part of the grid body.\n   */\n  getEventContext(event) {\n    const context = {};\n    const path = event.composedPath();\n    const cell = path[path.indexOf(this.$.table) - 3];\n    if (!cell) {\n      return context;\n    }\n    context.section = ['body', 'header', 'footer', 'details'].filter(section => cell.getAttribute('part').indexOf(section) > -1)[0];\n    if (cell._column) {\n      context.column = cell._column;\n    }\n    if (context.section === 'body' || context.section === 'details') {\n      Object.assign(context, this.__getRowModel(cell.parentElement));\n    }\n    return context;\n  }\n};","map":{"version":3,"names":["EventContextMixin","superClass","getEventContext","event","context","path","composedPath","cell","indexOf","$","table","section","filter","getAttribute","_column","column","Object","assign","__getRowModel","parentElement"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/vaadin-grid/src/vaadin-grid-event-context-mixin.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2018 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\n/**\n * @polymerMixin\n */\nexport const EventContextMixin = superClass => class EventContextMixin extends superClass {\n\n  /**\n   * Returns an object with context information about the event target:\n   * - `item`: the data object corresponding to the targeted row (not specified when targeting header or footer)\n   * - `column`: the column element corresponding to the targeted cell (not specified when targeting row details)\n   * - `section`: whether the event targeted the body, header, footer or details of the grid\n   *\n   * These additional properties are included when `item` is specified:\n   * - `index`: the index of the item\n   * - `selected`: the selected state of the item\n   * - `detailsOpened`: whether the row details are open for the item\n   * - `expanded`: the expanded state of the tree toggle\n   * - `level`: the tree hierarchy level\n   *\n   * The returned object is populated only when a grid cell, header, footer or row details is found in `event.composedPath()`.\n   * This means mostly mouse and keyboard events. If such a grid part is not found in the path, an empty object is returned.\n   * This may be the case eg. if the event is fired on the `<vaadin-grid>` element and not any deeper in the DOM, or if\n   * the event targets the empty part of the grid body.\n   */\n  getEventContext(event) {\n\n    const context = {};\n\n    const path = event.composedPath();\n    const cell = path[path.indexOf(this.$.table) - 3];\n\n    if (!cell) {\n      return context;\n    }\n\n    context.section = ['body', 'header', 'footer', 'details']\n      .filter(section => cell.getAttribute('part').indexOf(section) > -1)[0];\n\n    if (cell._column) {\n      context.column = cell._column;\n    }\n\n    if (context.section === 'body' || context.section === 'details') {\n      Object.assign(context, this.__getRowModel(cell.parentElement));\n    }\n\n    return context;\n  }\n\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAGC,UAAU,IAAI,MAAMD,iBAAiB,SAASC,UAAU,CAAC;EAExF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,eAAeA,CAACC,KAAK,EAAE;IAErB,MAAMC,OAAO,GAAG,CAAC,CAAC;IAElB,MAAMC,IAAI,GAAGF,KAAK,CAACG,YAAY,CAAC,CAAC;IACjC,MAAMC,IAAI,GAAGF,IAAI,CAACA,IAAI,CAACG,OAAO,CAAC,IAAI,CAACC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEjD,IAAI,CAACH,IAAI,EAAE;MACT,OAAOH,OAAO;IAChB;IAEAA,OAAO,CAACO,OAAO,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CACtDC,MAAM,CAACD,OAAO,IAAIJ,IAAI,CAACM,YAAY,CAAC,MAAM,CAAC,CAACL,OAAO,CAACG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAExE,IAAIJ,IAAI,CAACO,OAAO,EAAE;MAChBV,OAAO,CAACW,MAAM,GAAGR,IAAI,CAACO,OAAO;IAC/B;IAEA,IAAIV,OAAO,CAACO,OAAO,KAAK,MAAM,IAAIP,OAAO,CAACO,OAAO,KAAK,SAAS,EAAE;MAC/DK,MAAM,CAACC,MAAM,CAACb,OAAO,EAAE,IAAI,CAACc,aAAa,CAACX,IAAI,CAACY,aAAa,CAAC,CAAC;IAChE;IAEA,OAAOf,OAAO;EAChB;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}