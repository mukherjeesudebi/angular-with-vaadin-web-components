{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const SelectionMixin = superClass => class SelectionMixin extends superClass {\n  static get properties() {\n    return {\n      /**\n       * An array that contains the selected items.\n       * @type {!Array<!GridItem>}\n       */\n      selectedItems: {\n        type: Object,\n        notify: true,\n        value: () => []\n      },\n      /**\n       * Set of selected item ids\n       * @private\n       */\n      __selectedKeys: {\n        type: Object,\n        computed: '__computeSelectedKeys(itemIdPath, selectedItems.*)'\n      }\n    };\n  }\n  static get observers() {\n    return ['__selectedItemsChanged(itemIdPath, selectedItems.*)'];\n  }\n\n  /**\n   * @param {!GridItem} item\n   * @return {boolean}\n   * @protected\n   */\n  _isSelected(item) {\n    return this.__selectedKeys.has(this.getItemId(item));\n  }\n\n  /**\n   * Selects the given item.\n   *\n   * @method selectItem\n   * @param {!GridItem} item The item object\n   */\n  selectItem(item) {\n    if (!this._isSelected(item)) {\n      this.selectedItems = [...this.selectedItems, item];\n    }\n  }\n\n  /**\n   * Deselects the given item if it is already selected.\n   *\n   * @method deselect\n   * @param {!GridItem} item The item object\n   */\n  deselectItem(item) {\n    if (this._isSelected(item)) {\n      this.selectedItems = this.selectedItems.filter(i => !this._itemsEqual(i, item));\n    }\n  }\n\n  /**\n   * Toggles the selected state of the given item.\n   *\n   * @method toggle\n   * @param {!GridItem} item The item object\n   * @protected\n   */\n  _toggleItem(item) {\n    if (!this._isSelected(item)) {\n      this.selectItem(item);\n    } else {\n      this.deselectItem(item);\n    }\n  }\n\n  /** @private */\n  __selectedItemsChanged() {\n    this.requestContentUpdate();\n  }\n\n  /** @private */\n  __computeSelectedKeys(itemIdPath, selectedItems) {\n    const selected = selectedItems.base || [];\n    const selectedKeys = new Set();\n    selected.forEach(item => {\n      selectedKeys.add(this.getItemId(item));\n    });\n    return selectedKeys;\n  }\n\n  /**\n   * Fired when the `selectedItems` property changes.\n   *\n   * @event selected-items-changed\n   */\n};","map":{"version":3,"names":["SelectionMixin","superClass","properties","selectedItems","type","Object","notify","value","__selectedKeys","computed","observers","_isSelected","item","has","getItemId","selectItem","deselectItem","filter","i","_itemsEqual","_toggleItem","__selectedItemsChanged","requestContentUpdate","__computeSelectedKeys","itemIdPath","selected","base","selectedKeys","Set","forEach","add"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/grid/src/vaadin-grid-selection-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const SelectionMixin = (superClass) =>\n  class SelectionMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * An array that contains the selected items.\n         * @type {!Array<!GridItem>}\n         */\n        selectedItems: {\n          type: Object,\n          notify: true,\n          value: () => [],\n        },\n\n        /**\n         * Set of selected item ids\n         * @private\n         */\n        __selectedKeys: {\n          type: Object,\n          computed: '__computeSelectedKeys(itemIdPath, selectedItems.*)',\n        },\n      };\n    }\n\n    static get observers() {\n      return ['__selectedItemsChanged(itemIdPath, selectedItems.*)'];\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @return {boolean}\n     * @protected\n     */\n    _isSelected(item) {\n      return this.__selectedKeys.has(this.getItemId(item));\n    }\n\n    /**\n     * Selects the given item.\n     *\n     * @method selectItem\n     * @param {!GridItem} item The item object\n     */\n    selectItem(item) {\n      if (!this._isSelected(item)) {\n        this.selectedItems = [...this.selectedItems, item];\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @method deselect\n     * @param {!GridItem} item The item object\n     */\n    deselectItem(item) {\n      if (this._isSelected(item)) {\n        this.selectedItems = this.selectedItems.filter((i) => !this._itemsEqual(i, item));\n      }\n    }\n\n    /**\n     * Toggles the selected state of the given item.\n     *\n     * @method toggle\n     * @param {!GridItem} item The item object\n     * @protected\n     */\n    _toggleItem(item) {\n      if (!this._isSelected(item)) {\n        this.selectItem(item);\n      } else {\n        this.deselectItem(item);\n      }\n    }\n\n    /** @private */\n    __selectedItemsChanged() {\n      this.requestContentUpdate();\n    }\n\n    /** @private */\n    __computeSelectedKeys(itemIdPath, selectedItems) {\n      const selected = selectedItems.base || [];\n      const selectedKeys = new Set();\n      selected.forEach((item) => {\n        selectedKeys.add(this.getItemId(item));\n      });\n\n      return selectedKeys;\n    }\n\n    /**\n     * Fired when the `selectedItems` property changes.\n     *\n     * @event selected-items-changed\n     */\n  };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAIC,UAAU,IACvC,MAAMD,cAAc,SAASC,UAAU,CAAC;EACtC,WAAWC,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACR;AACA;AACA;MACQC,aAAa,EAAE;QACbC,IAAI,EAAEC,MAAM;QACZC,MAAM,EAAE,IAAI;QACZC,KAAK,EAAEA,CAAA,KAAM;MACf,CAAC;MAED;AACR;AACA;AACA;MACQC,cAAc,EAAE;QACdJ,IAAI,EAAEC,MAAM;QACZI,QAAQ,EAAE;MACZ;IACF,CAAC;EACH;EAEA,WAAWC,SAASA,CAAA,EAAG;IACrB,OAAO,CAAC,qDAAqD,CAAC;EAChE;;EAEA;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAACC,IAAI,EAAE;IAChB,OAAO,IAAI,CAACJ,cAAc,CAACK,GAAG,CAAC,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;EACtD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIG,UAAUA,CAACH,IAAI,EAAE;IACf,IAAI,CAAC,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,EAAE;MAC3B,IAAI,CAACT,aAAa,GAAG,CAAC,GAAG,IAAI,CAACA,aAAa,EAAES,IAAI,CAAC;IACpD;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACII,YAAYA,CAACJ,IAAI,EAAE;IACjB,IAAI,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,EAAE;MAC1B,IAAI,CAACT,aAAa,GAAG,IAAI,CAACA,aAAa,CAACc,MAAM,CAAEC,CAAC,IAAK,CAAC,IAAI,CAACC,WAAW,CAACD,CAAC,EAAEN,IAAI,CAAC,CAAC;IACnF;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIQ,WAAWA,CAACR,IAAI,EAAE;IAChB,IAAI,CAAC,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,EAAE;MAC3B,IAAI,CAACG,UAAU,CAACH,IAAI,CAAC;IACvB,CAAC,MAAM;MACL,IAAI,CAACI,YAAY,CAACJ,IAAI,CAAC;IACzB;EACF;;EAEA;EACAS,sBAAsBA,CAAA,EAAG;IACvB,IAAI,CAACC,oBAAoB,CAAC,CAAC;EAC7B;;EAEA;EACAC,qBAAqBA,CAACC,UAAU,EAAErB,aAAa,EAAE;IAC/C,MAAMsB,QAAQ,GAAGtB,aAAa,CAACuB,IAAI,IAAI,EAAE;IACzC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC9BH,QAAQ,CAACI,OAAO,CAAEjB,IAAI,IAAK;MACzBe,YAAY,CAACG,GAAG,CAAC,IAAI,CAAChB,SAAS,CAACF,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,OAAOe,YAAY;EACrB;;EAEA;AACJ;AACA;AACA;AACA;AACE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}