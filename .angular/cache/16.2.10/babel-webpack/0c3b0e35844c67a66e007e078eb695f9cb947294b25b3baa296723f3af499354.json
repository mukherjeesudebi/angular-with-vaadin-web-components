{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { CheckboxMixin } from './vaadin-checkbox-mixin.js';\nimport { checkboxStyles } from './vaadin-checkbox-styles.js';\nregisterStyles('vaadin-checkbox', checkboxStyles, {\n  moduleId: 'vaadin-checkbox-styles'\n});\n\n/**\n * `<vaadin-checkbox>` is an input field representing a binary choice.\n *\n * ```html\n * <vaadin-checkbox label=\"I accept the terms and conditions\"></vaadin-checkbox>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name   | Description\n * ------------|-------------\n * `checkbox`  | The element representing a stylable custom checkbox.\n *\n * The following state attributes are available for styling:\n *\n * Attribute       | Description\n * ----------------|-------------\n * `active`        | Set when the checkbox is activated with mouse, touch or the keyboard.\n * `checked`       | Set when the checkbox is checked.\n * `disabled`      | Set when the checkbox is disabled.\n * `focus-ring`    | Set when the checkbox is focused using the keyboard.\n * `focused`       | Set when the checkbox is focused.\n * `indeterminate` | Set when the checkbox is in the indeterminate state.\n * `has-label`     | Set when the checkbox has a label.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @fires {CustomEvent} checked-changed - Fired when the `checked` property changes.\n * @fires {CustomEvent} indeterminate-changed - Fired when the `indeterminate` property changes.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes CheckboxMixin\n * @mixes ThemableMixin\n * @mixes ElementMixin\n */\nexport class Checkbox extends CheckboxMixin(ElementMixin(ThemableMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-checkbox';\n  }\n  static get template() {\n    return html`\n      <div class=\"vaadin-checkbox-container\">\n        <div part=\"checkbox\" aria-hidden=\"true\"></div>\n        <slot name=\"input\"></slot>\n        <slot name=\"label\"></slot>\n      </div>\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this._tooltipController = new TooltipController(this);\n    this._tooltipController.setAriaTarget(this.inputElement);\n    this.addController(this._tooltipController);\n  }\n}\ndefineCustomElement(Checkbox);","map":{"version":3,"names":["html","PolymerElement","defineCustomElement","ElementMixin","TooltipController","registerStyles","ThemableMixin","CheckboxMixin","checkboxStyles","moduleId","Checkbox","is","template","ready","_tooltipController","setAriaTarget","inputElement","addController"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/checkbox/src/vaadin-checkbox.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { CheckboxMixin } from './vaadin-checkbox-mixin.js';\nimport { checkboxStyles } from './vaadin-checkbox-styles.js';\n\nregisterStyles('vaadin-checkbox', checkboxStyles, { moduleId: 'vaadin-checkbox-styles' });\n\n/**\n * `<vaadin-checkbox>` is an input field representing a binary choice.\n *\n * ```html\n * <vaadin-checkbox label=\"I accept the terms and conditions\"></vaadin-checkbox>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name   | Description\n * ------------|-------------\n * `checkbox`  | The element representing a stylable custom checkbox.\n *\n * The following state attributes are available for styling:\n *\n * Attribute       | Description\n * ----------------|-------------\n * `active`        | Set when the checkbox is activated with mouse, touch or the keyboard.\n * `checked`       | Set when the checkbox is checked.\n * `disabled`      | Set when the checkbox is disabled.\n * `focus-ring`    | Set when the checkbox is focused using the keyboard.\n * `focused`       | Set when the checkbox is focused.\n * `indeterminate` | Set when the checkbox is in the indeterminate state.\n * `has-label`     | Set when the checkbox has a label.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @fires {CustomEvent} checked-changed - Fired when the `checked` property changes.\n * @fires {CustomEvent} indeterminate-changed - Fired when the `indeterminate` property changes.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes CheckboxMixin\n * @mixes ThemableMixin\n * @mixes ElementMixin\n */\nexport class Checkbox extends CheckboxMixin(ElementMixin(ThemableMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-checkbox';\n  }\n\n  static get template() {\n    return html`\n      <div class=\"vaadin-checkbox-container\">\n        <div part=\"checkbox\" aria-hidden=\"true\"></div>\n        <slot name=\"input\"></slot>\n        <slot name=\"label\"></slot>\n      </div>\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._tooltipController = new TooltipController(this);\n    this._tooltipController.setAriaTarget(this.inputElement);\n    this.addController(this._tooltipController);\n  }\n}\n\ndefineCustomElement(Checkbox);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,EAAEC,cAAc,QAAQ,qCAAqC;AAC1E,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,SAASC,YAAY,QAAQ,6CAA6C;AAC1E,SAASC,iBAAiB,QAAQ,kDAAkD;AACpF,SAASC,cAAc,EAAEC,aAAa,QAAQ,wDAAwD;AACtG,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,cAAc,QAAQ,6BAA6B;AAE5DH,cAAc,CAAC,iBAAiB,EAAEG,cAAc,EAAE;EAAEC,QAAQ,EAAE;AAAyB,CAAC,CAAC;;AAEzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,SAASH,aAAa,CAACJ,YAAY,CAACG,aAAa,CAACL,cAAc,CAAC,CAAC,CAAC,CAAC;EACvF,WAAWU,EAAEA,CAAA,EAAG;IACd,OAAO,iBAAiB;EAC1B;EAEA,WAAWC,QAAQA,CAAA,EAAG;IACpB,OAAOZ,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACH;;EAEA;EACAa,KAAKA,CAAA,EAAG;IACN,KAAK,CAACA,KAAK,CAAC,CAAC;IAEb,IAAI,CAACC,kBAAkB,GAAG,IAAIV,iBAAiB,CAAC,IAAI,CAAC;IACrD,IAAI,CAACU,kBAAkB,CAACC,aAAa,CAAC,IAAI,CAACC,YAAY,CAAC;IACxD,IAAI,CAACC,aAAa,CAAC,IAAI,CAACH,kBAAkB,CAAC;EAC7C;AACF;AAEAZ,mBAAmB,CAACQ,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}