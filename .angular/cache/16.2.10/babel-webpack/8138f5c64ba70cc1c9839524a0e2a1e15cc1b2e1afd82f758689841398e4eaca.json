{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { FocusMixin } from './focus-mixin.js';\nimport { TabindexMixin } from './tabindex-mixin.js';\n\n/**\n * A mixin to forward focus to an element in the light DOM.\n *\n * @polymerMixin\n * @mixes FocusMixin\n * @mixes TabindexMixin\n */\nexport const DelegateFocusMixin = dedupingMixin(superclass => class DelegateFocusMixinClass extends FocusMixin(TabindexMixin(superclass)) {\n  static get properties() {\n    return {\n      /**\n       * Specify that this control should have input focus when the page loads.\n       */\n      autofocus: {\n        type: Boolean\n      },\n      /**\n       * A reference to the focusable element controlled by the mixin.\n       * It can be an input, textarea, button or any element with tabindex > -1.\n       *\n       * Any component implementing this mixin is expected to provide it\n       * by using `this._setFocusElement(input)` Polymer API.\n       *\n       * Toggling `tabindex` attribute on the host element propagates its value to `focusElement`.\n       *\n       * @protected\n       * @type {!HTMLElement}\n       */\n      focusElement: {\n        type: Object,\n        readOnly: true,\n        observer: '_focusElementChanged'\n      },\n      /**\n       * Override the property from `TabIndexMixin`\n       * to ensure the `tabindex` attribute of the focus element\n       * will be restored to `0` after re-enabling the element.\n       *\n       * @protected\n       * @override\n       */\n      _lastTabIndex: {\n        value: 0\n      }\n    };\n  }\n  constructor() {\n    super();\n    this._boundOnBlur = this._onBlur.bind(this);\n    this._boundOnFocus = this._onFocus.bind(this);\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    if (this.autofocus && !this.disabled) {\n      requestAnimationFrame(() => {\n        this.focus();\n        this.setAttribute('focus-ring', '');\n      });\n    }\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  focus() {\n    if (this.focusElement && !this.disabled) {\n      this.focusElement.focus();\n    }\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  blur() {\n    if (this.focusElement) {\n      this.focusElement.blur();\n    }\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  click() {\n    if (this.focusElement && !this.disabled) {\n      this.focusElement.click();\n    }\n  }\n\n  /** @protected */\n  _focusElementChanged(element, oldElement) {\n    if (element) {\n      element.disabled = this.disabled;\n      this._addFocusListeners(element);\n      this.__forwardTabIndex(this.tabindex);\n    } else if (oldElement) {\n      this._removeFocusListeners(oldElement);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @protected\n   */\n  _addFocusListeners(element) {\n    element.addEventListener('blur', this._boundOnBlur);\n    element.addEventListener('focus', this._boundOnFocus);\n  }\n\n  /**\n   * @param {HTMLElement} element\n   * @protected\n   */\n  _removeFocusListeners(element) {\n    element.removeEventListener('blur', this._boundOnBlur);\n    element.removeEventListener('focus', this._boundOnFocus);\n  }\n\n  /**\n   * Focus event does not bubble, so we dispatch it manually\n   * on the host element to support adding focus listeners\n   * when the focusable element is placed in light DOM.\n   * @param {FocusEvent} event\n   * @protected\n   */\n  _onFocus(event) {\n    event.stopPropagation();\n    this.dispatchEvent(new Event('focus'));\n  }\n\n  /**\n   * Blur event does not bubble, so we dispatch it manually\n   * on the host element to support adding blur listeners\n   * when the focusable element is placed in light DOM.\n   * @param {FocusEvent} event\n   * @protected\n   */\n  _onBlur(event) {\n    event.stopPropagation();\n    this.dispatchEvent(new Event('blur'));\n  }\n\n  /**\n   * @param {FocusEvent} event\n   * @return {boolean}\n   * @protected\n   * @override\n   */\n  _shouldSetFocus(event) {\n    return event.target === this.focusElement;\n  }\n\n  /**\n   * @param {FocusEvent} event\n   * @return {boolean}\n   * @protected\n   * @override\n   */\n  _shouldRemoveFocus(event) {\n    return event.target === this.focusElement;\n  }\n\n  /**\n   * @param {boolean} disabled\n   * @param {boolean} oldDisabled\n   * @protected\n   * @override\n   */\n  _disabledChanged(disabled, oldDisabled) {\n    super._disabledChanged(disabled, oldDisabled);\n    if (this.focusElement) {\n      this.focusElement.disabled = disabled;\n    }\n    if (disabled) {\n      this.blur();\n    }\n  }\n\n  /**\n   * Override an observer from `TabindexMixin`.\n   * Do not call super to remove tabindex attribute\n   * from the host after it has been forwarded.\n   * @param {string} tabindex\n   * @protected\n   * @override\n   */\n  _tabindexChanged(tabindex) {\n    this.__forwardTabIndex(tabindex);\n  }\n\n  /** @private */\n  __forwardTabIndex(tabindex) {\n    if (tabindex !== undefined && this.focusElement) {\n      this.focusElement.tabIndex = tabindex;\n\n      // Preserve tabindex=\"-1\" on the host element\n      if (tabindex !== -1) {\n        this.tabindex = undefined;\n      }\n    }\n    if (this.disabled && tabindex) {\n      // If tabindex attribute was changed while component was disabled\n      if (tabindex !== -1) {\n        this._lastTabIndex = tabindex;\n      }\n      this.tabindex = undefined;\n    }\n  }\n});","map":{"version":3,"names":["dedupingMixin","FocusMixin","TabindexMixin","DelegateFocusMixin","superclass","DelegateFocusMixinClass","properties","autofocus","type","Boolean","focusElement","Object","readOnly","observer","_lastTabIndex","value","constructor","_boundOnBlur","_onBlur","bind","_boundOnFocus","_onFocus","ready","disabled","requestAnimationFrame","focus","setAttribute","blur","click","_focusElementChanged","element","oldElement","_addFocusListeners","__forwardTabIndex","tabindex","_removeFocusListeners","addEventListener","removeEventListener","event","stopPropagation","dispatchEvent","Event","_shouldSetFocus","target","_shouldRemoveFocus","_disabledChanged","oldDisabled","_tabindexChanged","undefined","tabIndex"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/a11y-base/src/delegate-focus-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { FocusMixin } from './focus-mixin.js';\nimport { TabindexMixin } from './tabindex-mixin.js';\n\n/**\n * A mixin to forward focus to an element in the light DOM.\n *\n * @polymerMixin\n * @mixes FocusMixin\n * @mixes TabindexMixin\n */\nexport const DelegateFocusMixin = dedupingMixin(\n  (superclass) =>\n    class DelegateFocusMixinClass extends FocusMixin(TabindexMixin(superclass)) {\n      static get properties() {\n        return {\n          /**\n           * Specify that this control should have input focus when the page loads.\n           */\n          autofocus: {\n            type: Boolean,\n          },\n\n          /**\n           * A reference to the focusable element controlled by the mixin.\n           * It can be an input, textarea, button or any element with tabindex > -1.\n           *\n           * Any component implementing this mixin is expected to provide it\n           * by using `this._setFocusElement(input)` Polymer API.\n           *\n           * Toggling `tabindex` attribute on the host element propagates its value to `focusElement`.\n           *\n           * @protected\n           * @type {!HTMLElement}\n           */\n          focusElement: {\n            type: Object,\n            readOnly: true,\n            observer: '_focusElementChanged',\n          },\n\n          /**\n           * Override the property from `TabIndexMixin`\n           * to ensure the `tabindex` attribute of the focus element\n           * will be restored to `0` after re-enabling the element.\n           *\n           * @protected\n           * @override\n           */\n          _lastTabIndex: {\n            value: 0,\n          },\n        };\n      }\n\n      constructor() {\n        super();\n\n        this._boundOnBlur = this._onBlur.bind(this);\n        this._boundOnFocus = this._onFocus.bind(this);\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        if (this.autofocus && !this.disabled) {\n          requestAnimationFrame(() => {\n            this.focus();\n            this.setAttribute('focus-ring', '');\n          });\n        }\n      }\n\n      /**\n       * @protected\n       * @override\n       */\n      focus() {\n        if (this.focusElement && !this.disabled) {\n          this.focusElement.focus();\n        }\n      }\n\n      /**\n       * @protected\n       * @override\n       */\n      blur() {\n        if (this.focusElement) {\n          this.focusElement.blur();\n        }\n      }\n\n      /**\n       * @protected\n       * @override\n       */\n      click() {\n        if (this.focusElement && !this.disabled) {\n          this.focusElement.click();\n        }\n      }\n\n      /** @protected */\n      _focusElementChanged(element, oldElement) {\n        if (element) {\n          element.disabled = this.disabled;\n          this._addFocusListeners(element);\n          this.__forwardTabIndex(this.tabindex);\n        } else if (oldElement) {\n          this._removeFocusListeners(oldElement);\n        }\n      }\n\n      /**\n       * @param {HTMLElement} element\n       * @protected\n       */\n      _addFocusListeners(element) {\n        element.addEventListener('blur', this._boundOnBlur);\n        element.addEventListener('focus', this._boundOnFocus);\n      }\n\n      /**\n       * @param {HTMLElement} element\n       * @protected\n       */\n      _removeFocusListeners(element) {\n        element.removeEventListener('blur', this._boundOnBlur);\n        element.removeEventListener('focus', this._boundOnFocus);\n      }\n\n      /**\n       * Focus event does not bubble, so we dispatch it manually\n       * on the host element to support adding focus listeners\n       * when the focusable element is placed in light DOM.\n       * @param {FocusEvent} event\n       * @protected\n       */\n      _onFocus(event) {\n        event.stopPropagation();\n        this.dispatchEvent(new Event('focus'));\n      }\n\n      /**\n       * Blur event does not bubble, so we dispatch it manually\n       * on the host element to support adding blur listeners\n       * when the focusable element is placed in light DOM.\n       * @param {FocusEvent} event\n       * @protected\n       */\n      _onBlur(event) {\n        event.stopPropagation();\n        this.dispatchEvent(new Event('blur'));\n      }\n\n      /**\n       * @param {FocusEvent} event\n       * @return {boolean}\n       * @protected\n       * @override\n       */\n      _shouldSetFocus(event) {\n        return event.target === this.focusElement;\n      }\n\n      /**\n       * @param {FocusEvent} event\n       * @return {boolean}\n       * @protected\n       * @override\n       */\n      _shouldRemoveFocus(event) {\n        return event.target === this.focusElement;\n      }\n\n      /**\n       * @param {boolean} disabled\n       * @param {boolean} oldDisabled\n       * @protected\n       * @override\n       */\n      _disabledChanged(disabled, oldDisabled) {\n        super._disabledChanged(disabled, oldDisabled);\n\n        if (this.focusElement) {\n          this.focusElement.disabled = disabled;\n        }\n\n        if (disabled) {\n          this.blur();\n        }\n      }\n\n      /**\n       * Override an observer from `TabindexMixin`.\n       * Do not call super to remove tabindex attribute\n       * from the host after it has been forwarded.\n       * @param {string} tabindex\n       * @protected\n       * @override\n       */\n      _tabindexChanged(tabindex) {\n        this.__forwardTabIndex(tabindex);\n      }\n\n      /** @private */\n      __forwardTabIndex(tabindex) {\n        if (tabindex !== undefined && this.focusElement) {\n          this.focusElement.tabIndex = tabindex;\n\n          // Preserve tabindex=\"-1\" on the host element\n          if (tabindex !== -1) {\n            this.tabindex = undefined;\n          }\n        }\n\n        if (this.disabled && tabindex) {\n          // If tabindex attribute was changed while component was disabled\n          if (tabindex !== -1) {\n            this._lastTabIndex = tabindex;\n          }\n          this.tabindex = undefined;\n        }\n      }\n    },\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}