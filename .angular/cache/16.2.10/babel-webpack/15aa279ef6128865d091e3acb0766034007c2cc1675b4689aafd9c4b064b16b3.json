{"ast":null,"code":"/**\n@license\nCopyright (c) 2019 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nconst DropMode = {\n  BETWEEN: 'between',\n  ON_TOP: 'on-top',\n  ON_TOP_OR_BETWEEN: 'on-top-or-between',\n  ON_GRID: 'on-grid'\n};\nconst DropLocation = {\n  ON_TOP: 'on-top',\n  ABOVE: 'above',\n  BELOW: 'below',\n  EMPTY: 'empty'\n};\n\n/**\n * @polymerMixin\n */\nexport const DragAndDropMixin = superClass => class DragAndDropMixin extends superClass {\n  static get properties() {\n    return {\n      /**\n       * Defines the locations within the Grid row where an element can be dropped.\n       *\n       * Possible values are:\n       * - `between`: The drop event can happen between Grid rows.\n       * - `on-top`: The drop event can happen on top of Grid rows.\n       * - `on-top-or-between`: The drop event can happen either on top of or between Grid rows.\n       * - `on-grid`: The drop event will not happen on any specific row, it will show the drop target outline around the whole grid.\n       */\n      dropMode: String,\n      /**\n       * Marks the grid's rows to be available for dragging.\n       */\n      rowsDraggable: Boolean,\n      /**\n       * A function that filters dragging of specific grid rows. The return value should be false\n       * if dragging of the row should be disabled.\n       *\n       * Receives one argument:\n       * - `rowData` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `rowData.index` The index of the item.\n       *   - `rowData.item` The item.\n       *   - `rowData.expanded` Sublevel toggle state.\n       *   - `rowData.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `rowData.selected` Selected state.\n       */\n      dragFilter: Function,\n      /**\n       * A function that filters dropping on specific grid rows. The return value should be false\n       * if dropping on the row should be disabled.\n       *\n       * Receives one argument:\n       * - `rowData` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `rowData.index` The index of the item.\n       *   - `rowData.item` The item.\n       *   - `rowData.expanded` Sublevel toggle state.\n       *   - `rowData.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `rowData.selected` Selected state.\n       */\n      dropFilter: Function,\n      __dndAutoScrollThreshold: {\n        value: 50\n      }\n    };\n  }\n  static get observers() {\n    return ['_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter)'];\n  }\n  ready() {\n    super.ready();\n    this.$.table.addEventListener('dragstart', this._onDragStart.bind(this));\n    this.$.table.addEventListener('dragend', this._onDragEnd.bind(this));\n    this.$.table.addEventListener('dragover', this._onDragOver.bind(this));\n    this.$.table.addEventListener('dragleave', this._onDragLeave.bind(this));\n    this.$.table.addEventListener('drop', this._onDrop.bind(this));\n    this.$.table.addEventListener('dragenter', e => {\n      if (this.dropMode) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    });\n  }\n  _onDragStart(e) {\n    if (this.rowsDraggable) {\n      let row = e.target;\n      if (row.localName === 'vaadin-grid-cell-content') {\n        // The draggable node is the cell content element on browsers that support native shadow\n        row = row.assignedSlot.parentNode.parentNode;\n      }\n      if (row.parentNode !== this.$.items) {\n        return;\n      }\n      e.stopPropagation();\n      this._toggleAttribute('dragging-rows', true, this);\n      if (this._safari) {\n        // Safari doesn't get proper drag images from transformed\n        // elements so we need to switch to top temporarily\n        const transform = row.style.transform;\n        row.style.top = /translateY\\((.*)\\)/.exec(transform)[1];\n        row.style.transform = 'none';\n        requestAnimationFrame(() => {\n          row.style.top = '';\n          row.style.transform = transform;\n        });\n      }\n      const rowRect = row.getBoundingClientRect();\n      if (!window.ShadyDOM) {\n        if (this._ios) {\n          e.dataTransfer.setDragImage(row);\n        } else {\n          e.dataTransfer.setDragImage(row, e.clientX - rowRect.left, e.clientY - rowRect.top);\n        }\n      }\n      let rows = [row];\n      if (this._isSelected(row._item)) {\n        rows = this.__getViewportRows().filter(row => this._isSelected(row._item)).filter(row => !this.dragFilter || this.dragFilter(this.__getRowModel(row)));\n      }\n\n      // Set the default transfer data\n      e.dataTransfer.setData('text', this.__formatDefaultTransferData(rows));\n      row.setAttribute('dragstart', rows.length > 1 ? rows.length : '');\n      this.updateStyles({\n        '--_grid-drag-start-x': `${e.clientX - rowRect.left + 20}px`,\n        '--_grid-drag-start-y': `${e.clientY - rowRect.top + 10}px`\n      });\n      requestAnimationFrame(() => {\n        row.removeAttribute('dragstart');\n        this.updateStyles({\n          '--_grid-drag-start-x': '',\n          '--_grid-drag-start-y': ''\n        });\n      });\n      const event = new CustomEvent('grid-dragstart', {\n        detail: {\n          draggedItems: rows.map(row => row._item),\n          setDragData: (type, data) => e.dataTransfer.setData(type, data),\n          setDraggedItemsCount: count => row.setAttribute('dragstart', count)\n        }\n      });\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n  }\n  _onDragEnd(e) {\n    this._toggleAttribute('dragging-rows', false, this);\n    e.stopPropagation();\n    const event = new CustomEvent('grid-dragend');\n    event.originalEvent = e;\n    this.dispatchEvent(event);\n  }\n  _onDragLeave(e) {\n    e.stopPropagation();\n    this._clearDragStyles();\n  }\n  _onDragOver(e) {\n    if (this.dropMode) {\n      this._dropLocation = undefined;\n      this._dragOverItem = undefined;\n      if (this.__dndAutoScroll(e.clientY)) {\n        this._clearDragStyles();\n        return;\n      }\n      let row = e.composedPath().filter(node => node.localName === 'tr')[0];\n      if (!this._effectiveSize || this.dropMode === DropMode.ON_GRID) {\n        // The grid is empty or \"on-grid\" drop mode was used, always default to \"empty\"\n        this._dropLocation = DropLocation.EMPTY;\n      } else if (!row || row.parentNode !== this.$.items) {\n        // The dragover didn't occur on a body row but the grid has items\n        if (row) {\n          // The dragover occurred over a header/footer row\n          return;\n        } else if (this.dropMode === DropMode.BETWEEN || this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n          // The drop mode allows setting the last row as the drag over item\n          row = Array.from(this.$.items.children).filter(row => !row.hidden).pop();\n          this._dropLocation = DropLocation.BELOW;\n        } else {\n          // Drop mode on-top used but the dragover didn't occur over one of the existing rows\n          return;\n        }\n      } else {\n        // The dragover occurred on a body row, determine the drop location from coordinates\n        const rowRect = row.getBoundingClientRect();\n        this._dropLocation = DropLocation.ON_TOP;\n        if (this.dropMode === DropMode.BETWEEN) {\n          const dropAbove = e.clientY - rowRect.top < rowRect.bottom - e.clientY;\n          this._dropLocation = dropAbove ? DropLocation.ABOVE : DropLocation.BELOW;\n        } else if (this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n          if (e.clientY - rowRect.top < rowRect.height / 3) {\n            this._dropLocation = DropLocation.ABOVE;\n          } else if (e.clientY - rowRect.top > rowRect.height / 3 * 2) {\n            this._dropLocation = DropLocation.BELOW;\n          }\n        }\n      }\n      if (row && row.hasAttribute('drop-disabled')) {\n        this._dropLocation = undefined;\n        return;\n      }\n      e.stopPropagation();\n      e.preventDefault();\n      if (this._dropLocation === DropLocation.EMPTY) {\n        this._toggleAttribute('dragover', true, this);\n      } else if (row) {\n        this._dragOverItem = row._item;\n        if (row.getAttribute('dragover') !== this._dropLocation) {\n          row.setAttribute('dragover', this._dropLocation);\n        }\n      } else {\n        this._clearDragStyles();\n      }\n    }\n  }\n  __dndAutoScroll(clientY) {\n    if (this.__dndAutoScrolling) {\n      return true;\n    }\n    const headerBottom = this.$.header.getBoundingClientRect().bottom;\n    const footerTop = this.$.footer.getBoundingClientRect().top;\n    const topDiff = headerBottom - clientY + this.__dndAutoScrollThreshold;\n    const bottomDiff = clientY - footerTop + this.__dndAutoScrollThreshold;\n    let scrollTopDelta = 0;\n    if (bottomDiff > 0) {\n      scrollTopDelta = bottomDiff * 2;\n    } else if (topDiff > 0) {\n      scrollTopDelta = -topDiff * 2;\n    }\n    if (scrollTopDelta) {\n      const scrollTop = this.$.table.scrollTop;\n      this.$.table.scrollTop += scrollTopDelta;\n      const scrollTopChanged = scrollTop !== this.$.table.scrollTop;\n      if (scrollTopChanged) {\n        this.__dndAutoScrolling = true;\n        // Disallow more auto-scrolls within 20ms\n        setTimeout(() => this.__dndAutoScrolling = false, 20);\n        this._scrollHandler();\n        return true;\n      }\n    }\n  }\n  __getViewportRows() {\n    const headerBottom = this.$.header.getBoundingClientRect().bottom;\n    const footerTop = this.$.footer.getBoundingClientRect().top;\n    return Array.from(this.$.items.children).filter(row => {\n      const rowRect = row.getBoundingClientRect();\n      return rowRect.bottom > headerBottom && rowRect.top < footerTop;\n    });\n  }\n  _clearDragStyles() {\n    this.removeAttribute('dragover');\n    Array.from(this.$.items.children).forEach(row => row.removeAttribute('dragover'));\n  }\n  _onDrop(e) {\n    if (this.dropMode) {\n      e.stopPropagation();\n      e.preventDefault();\n      const dragData = e.dataTransfer.types && Array.from(e.dataTransfer.types).map(type => {\n        return {\n          type,\n          data: e.dataTransfer.getData(type)\n        };\n      });\n      this._clearDragStyles();\n      const event = new CustomEvent('grid-drop', {\n        bubbles: e.bubbles,\n        cancelable: e.cancelable,\n        detail: {\n          dropTargetItem: this._dragOverItem,\n          dropLocation: this._dropLocation,\n          dragData\n        }\n      });\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n  }\n  __formatDefaultTransferData(rows) {\n    return rows.map(row => {\n      return Array.from(row.children).filter(cell => !cell.hidden && cell.getAttribute('part').indexOf('details-cell') === -1).sort((a, b) => {\n        return a._column._order > b._column._order ? 1 : -1;\n      }).map(cell => cell._content.textContent.trim()).filter(content => content).join('\\t');\n    }).join('\\n');\n  }\n  _dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter) {\n    this.filterDragAndDrop();\n  }\n\n  /**\n   * Runs the `dragFilter` and `dropFilter` hooks for the visible cells.\n   * If the filter depends on varying conditions, you may need to\n   * call this function manually in order to update the draggability when\n   * the conditions change.\n   */\n  filterDragAndDrop() {\n    Array.from(this.$.items.children).filter(row => !row.hidden).forEach(row => {\n      this._filterDragAndDrop(row, this.__getRowModel(row));\n    });\n  }\n  _filterDragAndDrop(row, rowData) {\n    const dragDisabled = !this.rowsDraggable || this.dragFilter && !this.dragFilter(rowData);\n    const dropDisabled = !this.dropMode || this.dropFilter && !this.dropFilter(rowData);\n    const draggableElements = window.ShadyDOM ? [row] : Array.from(row.children).map(cell => cell._content);\n    draggableElements.forEach(e => {\n      if (dragDisabled) {\n        e.removeAttribute('draggable');\n      } else {\n        e.setAttribute('draggable', true);\n      }\n    });\n    this._toggleAttribute('drag-disabled', dragDisabled, row);\n    this._toggleAttribute('drop-disabled', dropDisabled, row);\n  }\n\n  /**\n   * Fired when starting to drag grid rows.\n   *\n   * @event grid-dragstart\n   * @param {Object} originalEvent The native dragstart event\n   * @param {Object} detail\n   * @param {Object} detail.draggedItems the items in the visible viewport that are dragged\n   * @param {Function} detail.setDraggedItemsCount Overrides the default number shown in the drag image on multi row drag.\n   * Parameter is of type number.\n   * @param {Function} detail.setDragData Sets dataTransfer data for the drag operation.\n   * Note that \"text\" is the only data type supported by all the browsers the grid currently supports (including IE11).\n   * The function takes two parameters:\n   * - type:string The type of the data\n   * - data:string The data\n   */\n\n  /**\n   * Fired when the dragging of the rows ends.\n   *\n   * @event grid-dragend\n   * @param {Object} originalEvent The native dragend event\n   */\n\n  /**\n   * Fired when a drop occurs on top of the grid.\n   *\n   * @event grid-drop\n   * @param {Object} originalEvent The native drop event\n   * @param {Object} detail\n   * @param {Object} detail.dropTargetItem The item of the grid row on which the drop occurred.\n   * @param {string} detail.dropLocation The position at which the drop event took place relative to a row.\n   * Depending on the dropMode value, the drop location can be one of the following\n   * - `on-top`: when the drop occurred on top of the row\n   * - `above`: when the drop occurred above the row\n   * - `below`: when the drop occurred below the row\n   * - `empty`: when the drop occurred over the grid, not relative to any specific row\n   * @param {string} detail.dragData An array of items with the payload as a string representation as the\n   * `data` property and the type of the data as `type` property.\n   */\n};","map":{"version":3,"names":["DropMode","BETWEEN","ON_TOP","ON_TOP_OR_BETWEEN","ON_GRID","DropLocation","ABOVE","BELOW","EMPTY","DragAndDropMixin","superClass","properties","dropMode","String","rowsDraggable","Boolean","dragFilter","Function","dropFilter","__dndAutoScrollThreshold","value","observers","ready","$","table","addEventListener","_onDragStart","bind","_onDragEnd","_onDragOver","_onDragLeave","_onDrop","e","preventDefault","stopPropagation","row","target","localName","assignedSlot","parentNode","items","_toggleAttribute","_safari","transform","style","top","exec","requestAnimationFrame","rowRect","getBoundingClientRect","window","ShadyDOM","_ios","dataTransfer","setDragImage","clientX","left","clientY","rows","_isSelected","_item","__getViewportRows","filter","__getRowModel","setData","__formatDefaultTransferData","setAttribute","length","updateStyles","removeAttribute","event","CustomEvent","detail","draggedItems","map","setDragData","type","data","setDraggedItemsCount","count","originalEvent","dispatchEvent","_clearDragStyles","_dropLocation","undefined","_dragOverItem","__dndAutoScroll","composedPath","node","_effectiveSize","Array","from","children","hidden","pop","dropAbove","bottom","height","hasAttribute","getAttribute","__dndAutoScrolling","headerBottom","header","footerTop","footer","topDiff","bottomDiff","scrollTopDelta","scrollTop","scrollTopChanged","setTimeout","_scrollHandler","forEach","dragData","types","getData","bubbles","cancelable","dropTargetItem","dropLocation","cell","indexOf","sort","a","b","_column","_order","_content","textContent","trim","content","join","_dragDropAccessChanged","filterDragAndDrop","_filterDragAndDrop","rowData","dragDisabled","dropDisabled","draggableElements"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/vaadin-grid/src/vaadin-grid-drag-and-drop-mixin.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2019 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nconst DropMode = {\n  BETWEEN: 'between',\n  ON_TOP: 'on-top',\n  ON_TOP_OR_BETWEEN: 'on-top-or-between',\n  ON_GRID: 'on-grid'\n};\n\nconst DropLocation = {\n  ON_TOP: 'on-top',\n  ABOVE: 'above',\n  BELOW: 'below',\n  EMPTY: 'empty'\n};\n\n/**\n * @polymerMixin\n */\nexport const DragAndDropMixin = superClass => class DragAndDropMixin extends superClass {\n\n  static get properties() {\n    return {\n      /**\n       * Defines the locations within the Grid row where an element can be dropped.\n       *\n       * Possible values are:\n       * - `between`: The drop event can happen between Grid rows.\n       * - `on-top`: The drop event can happen on top of Grid rows.\n       * - `on-top-or-between`: The drop event can happen either on top of or between Grid rows.\n       * - `on-grid`: The drop event will not happen on any specific row, it will show the drop target outline around the whole grid.\n       */\n      dropMode: String,\n\n      /**\n       * Marks the grid's rows to be available for dragging.\n       */\n      rowsDraggable: Boolean,\n\n      /**\n       * A function that filters dragging of specific grid rows. The return value should be false\n       * if dragging of the row should be disabled.\n       *\n       * Receives one argument:\n       * - `rowData` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `rowData.index` The index of the item.\n       *   - `rowData.item` The item.\n       *   - `rowData.expanded` Sublevel toggle state.\n       *   - `rowData.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `rowData.selected` Selected state.\n       */\n      dragFilter: Function,\n\n      /**\n       * A function that filters dropping on specific grid rows. The return value should be false\n       * if dropping on the row should be disabled.\n       *\n       * Receives one argument:\n       * - `rowData` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `rowData.index` The index of the item.\n       *   - `rowData.item` The item.\n       *   - `rowData.expanded` Sublevel toggle state.\n       *   - `rowData.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `rowData.selected` Selected state.\n       */\n      dropFilter: Function,\n\n      __dndAutoScrollThreshold: {\n        value: 50\n      }\n\n    };\n  }\n\n  static get observers() {\n    return [\n      '_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter)'\n    ];\n  }\n\n  ready() {\n    super.ready();\n    this.$.table.addEventListener('dragstart', this._onDragStart.bind(this));\n    this.$.table.addEventListener('dragend', this._onDragEnd.bind(this));\n    this.$.table.addEventListener('dragover', this._onDragOver.bind(this));\n    this.$.table.addEventListener('dragleave', this._onDragLeave.bind(this));\n    this.$.table.addEventListener('drop', this._onDrop.bind(this));\n    this.$.table.addEventListener('dragenter', e => {\n      if (this.dropMode) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    });\n\n  }\n\n  _onDragStart(e) {\n    if (this.rowsDraggable) {\n      let row = e.target;\n      if (row.localName === 'vaadin-grid-cell-content') {\n        // The draggable node is the cell content element on browsers that support native shadow\n        row = row.assignedSlot.parentNode.parentNode;\n      }\n      if (row.parentNode !== this.$.items) {\n        return;\n      }\n\n      e.stopPropagation();\n      this._toggleAttribute('dragging-rows', true, this);\n\n      if (this._safari) {\n        // Safari doesn't get proper drag images from transformed\n        // elements so we need to switch to top temporarily\n        const transform = row.style.transform;\n        row.style.top = /translateY\\((.*)\\)/.exec(transform)[1];\n        row.style.transform = 'none';\n        requestAnimationFrame(() => {\n          row.style.top = '';\n          row.style.transform = transform;\n        });\n      }\n\n      const rowRect = row.getBoundingClientRect();\n      if (!window.ShadyDOM) {\n        if (this._ios) {\n          e.dataTransfer.setDragImage(row);\n        } else {\n          e.dataTransfer.setDragImage(row, e.clientX - rowRect.left, e.clientY - rowRect.top);\n        }\n\n      }\n\n      let rows = [row];\n      if (this._isSelected(row._item)) {\n        rows = this.__getViewportRows()\n          .filter(row => this._isSelected(row._item))\n          .filter(row => !this.dragFilter || this.dragFilter(this.__getRowModel(row)));\n      }\n\n      // Set the default transfer data\n      e.dataTransfer.setData('text', this.__formatDefaultTransferData(rows));\n\n      row.setAttribute('dragstart', rows.length > 1 ? rows.length : '');\n      this.updateStyles({\n        '--_grid-drag-start-x': `${e.clientX - rowRect.left + 20}px`,\n        '--_grid-drag-start-y': `${e.clientY - rowRect.top + 10}px`\n      });\n\n      requestAnimationFrame(() => {\n        row.removeAttribute('dragstart');\n        this.updateStyles({'--_grid-drag-start-x': '', '--_grid-drag-start-y': ''});\n      });\n\n      const event = new CustomEvent('grid-dragstart', {\n        detail: {\n          draggedItems: rows.map(row => row._item),\n          setDragData: (type, data) => e.dataTransfer.setData(type, data),\n          setDraggedItemsCount: count => row.setAttribute('dragstart', count)\n        }\n      });\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n  }\n\n  _onDragEnd(e) {\n    this._toggleAttribute('dragging-rows', false, this);\n    e.stopPropagation();\n    const event = new CustomEvent('grid-dragend');\n    event.originalEvent = e;\n    this.dispatchEvent(event);\n  }\n\n  _onDragLeave(e) {\n    e.stopPropagation();\n    this._clearDragStyles();\n  }\n\n  _onDragOver(e) {\n\n    if (this.dropMode) {\n      this._dropLocation = undefined;\n      this._dragOverItem = undefined;\n\n      if (this.__dndAutoScroll(e.clientY)) {\n        this._clearDragStyles();\n        return;\n      }\n\n      let row = e.composedPath().filter(node => node.localName === 'tr')[0];\n\n      if (!this._effectiveSize || this.dropMode === DropMode.ON_GRID) {\n        // The grid is empty or \"on-grid\" drop mode was used, always default to \"empty\"\n        this._dropLocation = DropLocation.EMPTY;\n      } else if (!row || row.parentNode !== this.$.items) {\n        // The dragover didn't occur on a body row but the grid has items\n        if (row) {\n          // The dragover occurred over a header/footer row\n          return;\n        } else if (this.dropMode === DropMode.BETWEEN || this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n          // The drop mode allows setting the last row as the drag over item\n          row = Array.from(this.$.items.children).filter(row => !row.hidden).pop();\n          this._dropLocation = DropLocation.BELOW;\n        } else {\n          // Drop mode on-top used but the dragover didn't occur over one of the existing rows\n          return;\n        }\n      } else {\n        // The dragover occurred on a body row, determine the drop location from coordinates\n        const rowRect = row.getBoundingClientRect();\n\n        this._dropLocation = DropLocation.ON_TOP;\n\n        if (this.dropMode === DropMode.BETWEEN) {\n          const dropAbove = e.clientY - rowRect.top < rowRect.bottom - e.clientY;\n          this._dropLocation = dropAbove ? DropLocation.ABOVE : DropLocation.BELOW;\n\n        } else if (this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n          if (e.clientY - rowRect.top < rowRect.height / 3) {\n            this._dropLocation = DropLocation.ABOVE;\n          } else if (e.clientY - rowRect.top > (rowRect.height / 3) * 2) {\n            this._dropLocation = DropLocation.BELOW;\n          }\n        }\n      }\n\n      if (row && row.hasAttribute('drop-disabled')) {\n        this._dropLocation = undefined;\n        return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (this._dropLocation === DropLocation.EMPTY) {\n        this._toggleAttribute('dragover', true, this);\n      } else if (row) {\n        this._dragOverItem = row._item;\n        if (row.getAttribute('dragover') !== this._dropLocation) {\n          row.setAttribute('dragover', this._dropLocation);\n        }\n      } else {\n        this._clearDragStyles();\n      }\n    }\n  }\n\n  __dndAutoScroll(clientY) {\n    if (this.__dndAutoScrolling) {\n      return true;\n    }\n\n    const headerBottom = this.$.header.getBoundingClientRect().bottom;\n    const footerTop = this.$.footer.getBoundingClientRect().top;\n    const topDiff = headerBottom - clientY + this.__dndAutoScrollThreshold;\n    const bottomDiff = clientY - footerTop + this.__dndAutoScrollThreshold;\n    let scrollTopDelta = 0;\n\n    if (bottomDiff > 0) {\n      scrollTopDelta = bottomDiff * 2;\n    } else if (topDiff > 0) {\n      scrollTopDelta = -topDiff * 2;\n    }\n\n    if (scrollTopDelta) {\n      const scrollTop = this.$.table.scrollTop;\n      this.$.table.scrollTop += scrollTopDelta;\n      const scrollTopChanged = scrollTop !== this.$.table.scrollTop;\n      if (scrollTopChanged) {\n        this.__dndAutoScrolling = true;\n        // Disallow more auto-scrolls within 20ms\n        setTimeout(() => this.__dndAutoScrolling = false, 20);\n        this._scrollHandler();\n        return true;\n      }\n    }\n  }\n\n  __getViewportRows() {\n    const headerBottom = this.$.header.getBoundingClientRect().bottom;\n    const footerTop = this.$.footer.getBoundingClientRect().top;\n    return Array.from(this.$.items.children)\n      .filter(row => {\n        const rowRect = row.getBoundingClientRect();\n        return rowRect.bottom > headerBottom && rowRect.top < footerTop;\n      });\n  }\n\n  _clearDragStyles() {\n    this.removeAttribute('dragover');\n    Array.from(this.$.items.children).forEach(row => row.removeAttribute('dragover'));\n  }\n\n  _onDrop(e) {\n    if (this.dropMode) {\n      e.stopPropagation();\n      e.preventDefault();\n\n      const dragData = e.dataTransfer.types && Array.from(e.dataTransfer.types).map(type => {\n        return {\n          type,\n          data: e.dataTransfer.getData(type)\n        };\n      });\n\n      this._clearDragStyles();\n\n      const event = new CustomEvent('grid-drop', {\n        bubbles: e.bubbles,\n        cancelable: e.cancelable,\n        detail: {\n          dropTargetItem: this._dragOverItem,\n          dropLocation: this._dropLocation,\n          dragData\n        }\n      });\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n  }\n\n  __formatDefaultTransferData(rows) {\n    return rows\n      .map(row => {\n        return Array.from(row.children)\n          .filter(cell => !cell.hidden && cell.getAttribute('part').indexOf('details-cell') === -1)\n          .sort((a, b) => {\n            return a._column._order > b._column._order ? 1 : -1;\n          })\n          .map(cell => cell._content.textContent.trim())\n          .filter(content => content)\n          .join('\\t');\n      })\n      .join('\\n');\n  }\n\n  _dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter) {\n    this.filterDragAndDrop();\n  }\n\n  /**\n   * Runs the `dragFilter` and `dropFilter` hooks for the visible cells.\n   * If the filter depends on varying conditions, you may need to\n   * call this function manually in order to update the draggability when\n   * the conditions change.\n   */\n  filterDragAndDrop() {\n    Array.from(this.$.items.children).filter(row => !row.hidden).forEach(\n      row => {\n        this._filterDragAndDrop(row, this.__getRowModel(row));\n      }\n    );\n  }\n\n  _filterDragAndDrop(row, rowData) {\n    const dragDisabled = !this.rowsDraggable || (this.dragFilter && !this.dragFilter(rowData));\n    const dropDisabled = !this.dropMode || (this.dropFilter && !this.dropFilter(rowData));\n\n    const draggableElements = window.ShadyDOM\n      ? [row]\n      : Array.from(row.children).map(cell => cell._content);\n\n    draggableElements.forEach(e => {\n      if (dragDisabled) {\n        e.removeAttribute('draggable');\n      } else {\n        e.setAttribute('draggable', true);\n      }\n    });\n\n    this._toggleAttribute('drag-disabled', dragDisabled, row);\n    this._toggleAttribute('drop-disabled', dropDisabled, row);\n  }\n\n  /**\n   * Fired when starting to drag grid rows.\n   *\n   * @event grid-dragstart\n   * @param {Object} originalEvent The native dragstart event\n   * @param {Object} detail\n   * @param {Object} detail.draggedItems the items in the visible viewport that are dragged\n   * @param {Function} detail.setDraggedItemsCount Overrides the default number shown in the drag image on multi row drag.\n   * Parameter is of type number.\n   * @param {Function} detail.setDragData Sets dataTransfer data for the drag operation.\n   * Note that \"text\" is the only data type supported by all the browsers the grid currently supports (including IE11).\n   * The function takes two parameters:\n   * - type:string The type of the data\n   * - data:string The data\n   */\n\n  /**\n   * Fired when the dragging of the rows ends.\n   *\n   * @event grid-dragend\n   * @param {Object} originalEvent The native dragend event\n   */\n\n  /**\n   * Fired when a drop occurs on top of the grid.\n   *\n   * @event grid-drop\n   * @param {Object} originalEvent The native drop event\n   * @param {Object} detail\n   * @param {Object} detail.dropTargetItem The item of the grid row on which the drop occurred.\n   * @param {string} detail.dropLocation The position at which the drop event took place relative to a row.\n   * Depending on the dropMode value, the drop location can be one of the following\n   * - `on-top`: when the drop occurred on top of the row\n   * - `above`: when the drop occurred above the row\n   * - `below`: when the drop occurred below the row\n   * - `empty`: when the drop occurred over the grid, not relative to any specific row\n   * @param {string} detail.dragData An array of items with the payload as a string representation as the\n   * `data` property and the type of the data as `type` property.\n   */\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG;EACfC,OAAO,EAAE,SAAS;EAClBC,MAAM,EAAE,QAAQ;EAChBC,iBAAiB,EAAE,mBAAmB;EACtCC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,YAAY,GAAG;EACnBH,MAAM,EAAE,QAAQ;EAChBI,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGC,UAAU,IAAI,MAAMD,gBAAgB,SAASC,UAAU,CAAC;EAEtF,WAAWC,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACMC,QAAQ,EAAEC,MAAM;MAEhB;AACN;AACA;MACMC,aAAa,EAAEC,OAAO;MAEtB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACMC,UAAU,EAAEC,QAAQ;MAEpB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACMC,UAAU,EAAED,QAAQ;MAEpBE,wBAAwB,EAAE;QACxBC,KAAK,EAAE;MACT;IAEF,CAAC;EACH;EAEA,WAAWC,SAASA,CAAA,EAAG;IACrB,OAAO,CACL,yEAAyE,CAC1E;EACH;EAEAC,KAAKA,CAAA,EAAG;IACN,KAAK,CAACA,KAAK,CAAC,CAAC;IACb,IAAI,CAACC,CAAC,CAACC,KAAK,CAACC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxE,IAAI,CAACJ,CAAC,CAACC,KAAK,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACG,UAAU,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC;IACpE,IAAI,CAACJ,CAAC,CAACC,KAAK,CAACC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACI,WAAW,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC;IACtE,IAAI,CAACJ,CAAC,CAACC,KAAK,CAACC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACK,YAAY,CAACH,IAAI,CAAC,IAAI,CAAC,CAAC;IACxE,IAAI,CAACJ,CAAC,CAACC,KAAK,CAACC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACM,OAAO,CAACJ,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9D,IAAI,CAACJ,CAAC,CAACC,KAAK,CAACC,gBAAgB,CAAC,WAAW,EAAEO,CAAC,IAAI;MAC9C,IAAI,IAAI,CAACpB,QAAQ,EAAE;QACjBoB,CAAC,CAACC,cAAc,CAAC,CAAC;QAClBD,CAAC,CAACE,eAAe,CAAC,CAAC;MACrB;IACF,CAAC,CAAC;EAEJ;EAEAR,YAAYA,CAACM,CAAC,EAAE;IACd,IAAI,IAAI,CAAClB,aAAa,EAAE;MACtB,IAAIqB,GAAG,GAAGH,CAAC,CAACI,MAAM;MAClB,IAAID,GAAG,CAACE,SAAS,KAAK,0BAA0B,EAAE;QAChD;QACAF,GAAG,GAAGA,GAAG,CAACG,YAAY,CAACC,UAAU,CAACA,UAAU;MAC9C;MACA,IAAIJ,GAAG,CAACI,UAAU,KAAK,IAAI,CAAChB,CAAC,CAACiB,KAAK,EAAE;QACnC;MACF;MAEAR,CAAC,CAACE,eAAe,CAAC,CAAC;MACnB,IAAI,CAACO,gBAAgB,CAAC,eAAe,EAAE,IAAI,EAAE,IAAI,CAAC;MAElD,IAAI,IAAI,CAACC,OAAO,EAAE;QAChB;QACA;QACA,MAAMC,SAAS,GAAGR,GAAG,CAACS,KAAK,CAACD,SAAS;QACrCR,GAAG,CAACS,KAAK,CAACC,GAAG,GAAG,oBAAoB,CAACC,IAAI,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC;QACvDR,GAAG,CAACS,KAAK,CAACD,SAAS,GAAG,MAAM;QAC5BI,qBAAqB,CAAC,MAAM;UAC1BZ,GAAG,CAACS,KAAK,CAACC,GAAG,GAAG,EAAE;UAClBV,GAAG,CAACS,KAAK,CAACD,SAAS,GAAGA,SAAS;QACjC,CAAC,CAAC;MACJ;MAEA,MAAMK,OAAO,GAAGb,GAAG,CAACc,qBAAqB,CAAC,CAAC;MAC3C,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;QACpB,IAAI,IAAI,CAACC,IAAI,EAAE;UACbpB,CAAC,CAACqB,YAAY,CAACC,YAAY,CAACnB,GAAG,CAAC;QAClC,CAAC,MAAM;UACLH,CAAC,CAACqB,YAAY,CAACC,YAAY,CAACnB,GAAG,EAAEH,CAAC,CAACuB,OAAO,GAAGP,OAAO,CAACQ,IAAI,EAAExB,CAAC,CAACyB,OAAO,GAAGT,OAAO,CAACH,GAAG,CAAC;QACrF;MAEF;MAEA,IAAIa,IAAI,GAAG,CAACvB,GAAG,CAAC;MAChB,IAAI,IAAI,CAACwB,WAAW,CAACxB,GAAG,CAACyB,KAAK,CAAC,EAAE;QAC/BF,IAAI,GAAG,IAAI,CAACG,iBAAiB,CAAC,CAAC,CAC5BC,MAAM,CAAC3B,GAAG,IAAI,IAAI,CAACwB,WAAW,CAACxB,GAAG,CAACyB,KAAK,CAAC,CAAC,CAC1CE,MAAM,CAAC3B,GAAG,IAAI,CAAC,IAAI,CAACnB,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC,IAAI,CAAC+C,aAAa,CAAC5B,GAAG,CAAC,CAAC,CAAC;MAChF;;MAEA;MACAH,CAAC,CAACqB,YAAY,CAACW,OAAO,CAAC,MAAM,EAAE,IAAI,CAACC,2BAA2B,CAACP,IAAI,CAAC,CAAC;MAEtEvB,GAAG,CAAC+B,YAAY,CAAC,WAAW,EAAER,IAAI,CAACS,MAAM,GAAG,CAAC,GAAGT,IAAI,CAACS,MAAM,GAAG,EAAE,CAAC;MACjE,IAAI,CAACC,YAAY,CAAC;QAChB,sBAAsB,EAAG,GAAEpC,CAAC,CAACuB,OAAO,GAAGP,OAAO,CAACQ,IAAI,GAAG,EAAG,IAAG;QAC5D,sBAAsB,EAAG,GAAExB,CAAC,CAACyB,OAAO,GAAGT,OAAO,CAACH,GAAG,GAAG,EAAG;MAC1D,CAAC,CAAC;MAEFE,qBAAqB,CAAC,MAAM;QAC1BZ,GAAG,CAACkC,eAAe,CAAC,WAAW,CAAC;QAChC,IAAI,CAACD,YAAY,CAAC;UAAC,sBAAsB,EAAE,EAAE;UAAE,sBAAsB,EAAE;QAAE,CAAC,CAAC;MAC7E,CAAC,CAAC;MAEF,MAAME,KAAK,GAAG,IAAIC,WAAW,CAAC,gBAAgB,EAAE;QAC9CC,MAAM,EAAE;UACNC,YAAY,EAAEf,IAAI,CAACgB,GAAG,CAACvC,GAAG,IAAIA,GAAG,CAACyB,KAAK,CAAC;UACxCe,WAAW,EAAEA,CAACC,IAAI,EAAEC,IAAI,KAAK7C,CAAC,CAACqB,YAAY,CAACW,OAAO,CAACY,IAAI,EAAEC,IAAI,CAAC;UAC/DC,oBAAoB,EAAEC,KAAK,IAAI5C,GAAG,CAAC+B,YAAY,CAAC,WAAW,EAAEa,KAAK;QACpE;MACF,CAAC,CAAC;MACFT,KAAK,CAACU,aAAa,GAAGhD,CAAC;MACvB,IAAI,CAACiD,aAAa,CAACX,KAAK,CAAC;IAC3B;EACF;EAEA1C,UAAUA,CAACI,CAAC,EAAE;IACZ,IAAI,CAACS,gBAAgB,CAAC,eAAe,EAAE,KAAK,EAAE,IAAI,CAAC;IACnDT,CAAC,CAACE,eAAe,CAAC,CAAC;IACnB,MAAMoC,KAAK,GAAG,IAAIC,WAAW,CAAC,cAAc,CAAC;IAC7CD,KAAK,CAACU,aAAa,GAAGhD,CAAC;IACvB,IAAI,CAACiD,aAAa,CAACX,KAAK,CAAC;EAC3B;EAEAxC,YAAYA,CAACE,CAAC,EAAE;IACdA,CAAC,CAACE,eAAe,CAAC,CAAC;IACnB,IAAI,CAACgD,gBAAgB,CAAC,CAAC;EACzB;EAEArD,WAAWA,CAACG,CAAC,EAAE;IAEb,IAAI,IAAI,CAACpB,QAAQ,EAAE;MACjB,IAAI,CAACuE,aAAa,GAAGC,SAAS;MAC9B,IAAI,CAACC,aAAa,GAAGD,SAAS;MAE9B,IAAI,IAAI,CAACE,eAAe,CAACtD,CAAC,CAACyB,OAAO,CAAC,EAAE;QACnC,IAAI,CAACyB,gBAAgB,CAAC,CAAC;QACvB;MACF;MAEA,IAAI/C,GAAG,GAAGH,CAAC,CAACuD,YAAY,CAAC,CAAC,CAACzB,MAAM,CAAC0B,IAAI,IAAIA,IAAI,CAACnD,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;MAErE,IAAI,CAAC,IAAI,CAACoD,cAAc,IAAI,IAAI,CAAC7E,QAAQ,KAAKZ,QAAQ,CAACI,OAAO,EAAE;QAC9D;QACA,IAAI,CAAC+E,aAAa,GAAG9E,YAAY,CAACG,KAAK;MACzC,CAAC,MAAM,IAAI,CAAC2B,GAAG,IAAIA,GAAG,CAACI,UAAU,KAAK,IAAI,CAAChB,CAAC,CAACiB,KAAK,EAAE;QAClD;QACA,IAAIL,GAAG,EAAE;UACP;UACA;QACF,CAAC,MAAM,IAAI,IAAI,CAACvB,QAAQ,KAAKZ,QAAQ,CAACC,OAAO,IAAI,IAAI,CAACW,QAAQ,KAAKZ,QAAQ,CAACG,iBAAiB,EAAE;UAC7F;UACAgC,GAAG,GAAGuD,KAAK,CAACC,IAAI,CAAC,IAAI,CAACpE,CAAC,CAACiB,KAAK,CAACoD,QAAQ,CAAC,CAAC9B,MAAM,CAAC3B,GAAG,IAAI,CAACA,GAAG,CAAC0D,MAAM,CAAC,CAACC,GAAG,CAAC,CAAC;UACxE,IAAI,CAACX,aAAa,GAAG9E,YAAY,CAACE,KAAK;QACzC,CAAC,MAAM;UACL;UACA;QACF;MACF,CAAC,MAAM;QACL;QACA,MAAMyC,OAAO,GAAGb,GAAG,CAACc,qBAAqB,CAAC,CAAC;QAE3C,IAAI,CAACkC,aAAa,GAAG9E,YAAY,CAACH,MAAM;QAExC,IAAI,IAAI,CAACU,QAAQ,KAAKZ,QAAQ,CAACC,OAAO,EAAE;UACtC,MAAM8F,SAAS,GAAG/D,CAAC,CAACyB,OAAO,GAAGT,OAAO,CAACH,GAAG,GAAGG,OAAO,CAACgD,MAAM,GAAGhE,CAAC,CAACyB,OAAO;UACtE,IAAI,CAAC0B,aAAa,GAAGY,SAAS,GAAG1F,YAAY,CAACC,KAAK,GAAGD,YAAY,CAACE,KAAK;QAE1E,CAAC,MAAM,IAAI,IAAI,CAACK,QAAQ,KAAKZ,QAAQ,CAACG,iBAAiB,EAAE;UACvD,IAAI6B,CAAC,CAACyB,OAAO,GAAGT,OAAO,CAACH,GAAG,GAAGG,OAAO,CAACiD,MAAM,GAAG,CAAC,EAAE;YAChD,IAAI,CAACd,aAAa,GAAG9E,YAAY,CAACC,KAAK;UACzC,CAAC,MAAM,IAAI0B,CAAC,CAACyB,OAAO,GAAGT,OAAO,CAACH,GAAG,GAAIG,OAAO,CAACiD,MAAM,GAAG,CAAC,GAAI,CAAC,EAAE;YAC7D,IAAI,CAACd,aAAa,GAAG9E,YAAY,CAACE,KAAK;UACzC;QACF;MACF;MAEA,IAAI4B,GAAG,IAAIA,GAAG,CAAC+D,YAAY,CAAC,eAAe,CAAC,EAAE;QAC5C,IAAI,CAACf,aAAa,GAAGC,SAAS;QAC9B;MACF;MAEApD,CAAC,CAACE,eAAe,CAAC,CAAC;MACnBF,CAAC,CAACC,cAAc,CAAC,CAAC;MAElB,IAAI,IAAI,CAACkD,aAAa,KAAK9E,YAAY,CAACG,KAAK,EAAE;QAC7C,IAAI,CAACiC,gBAAgB,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC;MAC/C,CAAC,MAAM,IAAIN,GAAG,EAAE;QACd,IAAI,CAACkD,aAAa,GAAGlD,GAAG,CAACyB,KAAK;QAC9B,IAAIzB,GAAG,CAACgE,YAAY,CAAC,UAAU,CAAC,KAAK,IAAI,CAAChB,aAAa,EAAE;UACvDhD,GAAG,CAAC+B,YAAY,CAAC,UAAU,EAAE,IAAI,CAACiB,aAAa,CAAC;QAClD;MACF,CAAC,MAAM;QACL,IAAI,CAACD,gBAAgB,CAAC,CAAC;MACzB;IACF;EACF;EAEAI,eAAeA,CAAC7B,OAAO,EAAE;IACvB,IAAI,IAAI,CAAC2C,kBAAkB,EAAE;MAC3B,OAAO,IAAI;IACb;IAEA,MAAMC,YAAY,GAAG,IAAI,CAAC9E,CAAC,CAAC+E,MAAM,CAACrD,qBAAqB,CAAC,CAAC,CAAC+C,MAAM;IACjE,MAAMO,SAAS,GAAG,IAAI,CAAChF,CAAC,CAACiF,MAAM,CAACvD,qBAAqB,CAAC,CAAC,CAACJ,GAAG;IAC3D,MAAM4D,OAAO,GAAGJ,YAAY,GAAG5C,OAAO,GAAG,IAAI,CAACtC,wBAAwB;IACtE,MAAMuF,UAAU,GAAGjD,OAAO,GAAG8C,SAAS,GAAG,IAAI,CAACpF,wBAAwB;IACtE,IAAIwF,cAAc,GAAG,CAAC;IAEtB,IAAID,UAAU,GAAG,CAAC,EAAE;MAClBC,cAAc,GAAGD,UAAU,GAAG,CAAC;IACjC,CAAC,MAAM,IAAID,OAAO,GAAG,CAAC,EAAE;MACtBE,cAAc,GAAG,CAACF,OAAO,GAAG,CAAC;IAC/B;IAEA,IAAIE,cAAc,EAAE;MAClB,MAAMC,SAAS,GAAG,IAAI,CAACrF,CAAC,CAACC,KAAK,CAACoF,SAAS;MACxC,IAAI,CAACrF,CAAC,CAACC,KAAK,CAACoF,SAAS,IAAID,cAAc;MACxC,MAAME,gBAAgB,GAAGD,SAAS,KAAK,IAAI,CAACrF,CAAC,CAACC,KAAK,CAACoF,SAAS;MAC7D,IAAIC,gBAAgB,EAAE;QACpB,IAAI,CAACT,kBAAkB,GAAG,IAAI;QAC9B;QACAU,UAAU,CAAC,MAAM,IAAI,CAACV,kBAAkB,GAAG,KAAK,EAAE,EAAE,CAAC;QACrD,IAAI,CAACW,cAAc,CAAC,CAAC;QACrB,OAAO,IAAI;MACb;IACF;EACF;EAEAlD,iBAAiBA,CAAA,EAAG;IAClB,MAAMwC,YAAY,GAAG,IAAI,CAAC9E,CAAC,CAAC+E,MAAM,CAACrD,qBAAqB,CAAC,CAAC,CAAC+C,MAAM;IACjE,MAAMO,SAAS,GAAG,IAAI,CAAChF,CAAC,CAACiF,MAAM,CAACvD,qBAAqB,CAAC,CAAC,CAACJ,GAAG;IAC3D,OAAO6C,KAAK,CAACC,IAAI,CAAC,IAAI,CAACpE,CAAC,CAACiB,KAAK,CAACoD,QAAQ,CAAC,CACrC9B,MAAM,CAAC3B,GAAG,IAAI;MACb,MAAMa,OAAO,GAAGb,GAAG,CAACc,qBAAqB,CAAC,CAAC;MAC3C,OAAOD,OAAO,CAACgD,MAAM,GAAGK,YAAY,IAAIrD,OAAO,CAACH,GAAG,GAAG0D,SAAS;IACjE,CAAC,CAAC;EACN;EAEArB,gBAAgBA,CAAA,EAAG;IACjB,IAAI,CAACb,eAAe,CAAC,UAAU,CAAC;IAChCqB,KAAK,CAACC,IAAI,CAAC,IAAI,CAACpE,CAAC,CAACiB,KAAK,CAACoD,QAAQ,CAAC,CAACoB,OAAO,CAAC7E,GAAG,IAAIA,GAAG,CAACkC,eAAe,CAAC,UAAU,CAAC,CAAC;EACnF;EAEAtC,OAAOA,CAACC,CAAC,EAAE;IACT,IAAI,IAAI,CAACpB,QAAQ,EAAE;MACjBoB,CAAC,CAACE,eAAe,CAAC,CAAC;MACnBF,CAAC,CAACC,cAAc,CAAC,CAAC;MAElB,MAAMgF,QAAQ,GAAGjF,CAAC,CAACqB,YAAY,CAAC6D,KAAK,IAAIxB,KAAK,CAACC,IAAI,CAAC3D,CAAC,CAACqB,YAAY,CAAC6D,KAAK,CAAC,CAACxC,GAAG,CAACE,IAAI,IAAI;QACpF,OAAO;UACLA,IAAI;UACJC,IAAI,EAAE7C,CAAC,CAACqB,YAAY,CAAC8D,OAAO,CAACvC,IAAI;QACnC,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACM,gBAAgB,CAAC,CAAC;MAEvB,MAAMZ,KAAK,GAAG,IAAIC,WAAW,CAAC,WAAW,EAAE;QACzC6C,OAAO,EAAEpF,CAAC,CAACoF,OAAO;QAClBC,UAAU,EAAErF,CAAC,CAACqF,UAAU;QACxB7C,MAAM,EAAE;UACN8C,cAAc,EAAE,IAAI,CAACjC,aAAa;UAClCkC,YAAY,EAAE,IAAI,CAACpC,aAAa;UAChC8B;QACF;MACF,CAAC,CAAC;MACF3C,KAAK,CAACU,aAAa,GAAGhD,CAAC;MACvB,IAAI,CAACiD,aAAa,CAACX,KAAK,CAAC;IAC3B;EACF;EAEAL,2BAA2BA,CAACP,IAAI,EAAE;IAChC,OAAOA,IAAI,CACRgB,GAAG,CAACvC,GAAG,IAAI;MACV,OAAOuD,KAAK,CAACC,IAAI,CAACxD,GAAG,CAACyD,QAAQ,CAAC,CAC5B9B,MAAM,CAAC0D,IAAI,IAAI,CAACA,IAAI,CAAC3B,MAAM,IAAI2B,IAAI,CAACrB,YAAY,CAAC,MAAM,CAAC,CAACsB,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CACxFC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACd,OAAOD,CAAC,CAACE,OAAO,CAACC,MAAM,GAAGF,CAAC,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;MACrD,CAAC,CAAC,CACDpD,GAAG,CAAC8C,IAAI,IAAIA,IAAI,CAACO,QAAQ,CAACC,WAAW,CAACC,IAAI,CAAC,CAAC,CAAC,CAC7CnE,MAAM,CAACoE,OAAO,IAAIA,OAAO,CAAC,CAC1BC,IAAI,CAAC,IAAI,CAAC;IACf,CAAC,CAAC,CACDA,IAAI,CAAC,IAAI,CAAC;EACf;EAEAC,sBAAsBA,CAACtH,aAAa,EAAEF,QAAQ,EAAEI,UAAU,EAAEE,UAAU,EAAE;IACtE,IAAI,CAACmH,iBAAiB,CAAC,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEA,iBAAiBA,CAAA,EAAG;IAClB3C,KAAK,CAACC,IAAI,CAAC,IAAI,CAACpE,CAAC,CAACiB,KAAK,CAACoD,QAAQ,CAAC,CAAC9B,MAAM,CAAC3B,GAAG,IAAI,CAACA,GAAG,CAAC0D,MAAM,CAAC,CAACmB,OAAO,CAClE7E,GAAG,IAAI;MACL,IAAI,CAACmG,kBAAkB,CAACnG,GAAG,EAAE,IAAI,CAAC4B,aAAa,CAAC5B,GAAG,CAAC,CAAC;IACvD,CACF,CAAC;EACH;EAEAmG,kBAAkBA,CAACnG,GAAG,EAAEoG,OAAO,EAAE;IAC/B,MAAMC,YAAY,GAAG,CAAC,IAAI,CAAC1H,aAAa,IAAK,IAAI,CAACE,UAAU,IAAI,CAAC,IAAI,CAACA,UAAU,CAACuH,OAAO,CAAE;IAC1F,MAAME,YAAY,GAAG,CAAC,IAAI,CAAC7H,QAAQ,IAAK,IAAI,CAACM,UAAU,IAAI,CAAC,IAAI,CAACA,UAAU,CAACqH,OAAO,CAAE;IAErF,MAAMG,iBAAiB,GAAGxF,MAAM,CAACC,QAAQ,GACrC,CAAChB,GAAG,CAAC,GACLuD,KAAK,CAACC,IAAI,CAACxD,GAAG,CAACyD,QAAQ,CAAC,CAAClB,GAAG,CAAC8C,IAAI,IAAIA,IAAI,CAACO,QAAQ,CAAC;IAEvDW,iBAAiB,CAAC1B,OAAO,CAAChF,CAAC,IAAI;MAC7B,IAAIwG,YAAY,EAAE;QAChBxG,CAAC,CAACqC,eAAe,CAAC,WAAW,CAAC;MAChC,CAAC,MAAM;QACLrC,CAAC,CAACkC,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC;MACnC;IACF,CAAC,CAAC;IAEF,IAAI,CAACzB,gBAAgB,CAAC,eAAe,EAAE+F,YAAY,EAAErG,GAAG,CAAC;IACzD,IAAI,CAACM,gBAAgB,CAAC,eAAe,EAAEgG,YAAY,EAAEtG,GAAG,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}