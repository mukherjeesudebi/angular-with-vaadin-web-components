{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { DelegateStateMixin } from '@vaadin/component-base/src/delegate-state-mixin.js';\nimport { InputMixin } from './input-mixin.js';\nimport { ValidateMixin } from './validate-mixin.js';\n\n/**\n * A mixin to combine multiple input validation constraints.\n *\n * @polymerMixin\n * @mixes DelegateStateMixin\n * @mixes InputMixin\n * @mixes ValidateMixin\n */\nexport const InputConstraintsMixin = dedupingMixin(superclass => class InputConstraintsMixinClass extends DelegateStateMixin(ValidateMixin(InputMixin(superclass))) {\n  /**\n   * An array of attributes which participate in the input validation.\n   * Changing these attributes will cause the input to re-validate.\n   *\n   * IMPORTANT: The attributes should be properly delegated to the input element\n   * from the host using `delegateAttrs` getter (see `DelegateStateMixin`).\n   * The `required` attribute is already delegated.\n   */\n  static get constraints() {\n    return ['required'];\n  }\n  static get delegateAttrs() {\n    return [...super.delegateAttrs, 'required'];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this._createConstraintsObserver();\n  }\n\n  /**\n   * Returns true if the current input value satisfies all constraints (if any).\n   * @return {boolean}\n   */\n  checkValidity() {\n    if (this.inputElement && this._hasValidConstraints(this.constructor.constraints.map(c => this[c]))) {\n      return this.inputElement.checkValidity();\n    }\n    return !this.invalid;\n  }\n\n  /**\n   * Returns true if some of the provided set of constraints are valid.\n   * @param {Array} constraints\n   * @return {boolean}\n   * @protected\n   */\n  _hasValidConstraints(constraints) {\n    return constraints.some(c => this.__isValidConstraint(c));\n  }\n\n  /**\n   * Override this method to customize setting up constraints observer.\n   * @protected\n   */\n  _createConstraintsObserver() {\n    // This complex observer needs to be added dynamically instead of using `static get observers()`\n    // to make it possible to tweak this behavior in classes that apply this mixin.\n    this._createMethodObserver(`_constraintsChanged(stateTarget, ${this.constructor.constraints.join(', ')})`);\n  }\n\n  /**\n   * Override this method to implement custom validation constraints.\n   * @param {HTMLElement | undefined} stateTarget\n   * @param {unknown[]} constraints\n   * @protected\n   */\n  _constraintsChanged(stateTarget, ...constraints) {\n    // The input element's validity cannot be determined until\n    // all the necessary constraint attributes aren't set on it.\n    if (!stateTarget) {\n      return;\n    }\n    const hasConstraints = this._hasValidConstraints(constraints);\n    const isLastConstraintRemoved = this.__previousHasConstraints && !hasConstraints;\n    if ((this._hasValue || this.invalid) && hasConstraints) {\n      this.validate();\n    } else if (isLastConstraintRemoved) {\n      this._setInvalid(false);\n    }\n    this.__previousHasConstraints = hasConstraints;\n  }\n\n  /**\n   * Override an event listener inherited from `InputMixin`\n   * to capture native `change` event and make sure that\n   * a new one is dispatched after validation runs.\n   * @param {Event} event\n   * @protected\n   * @override\n   */\n  _onChange(event) {\n    event.stopPropagation();\n    this.validate();\n    this.dispatchEvent(new CustomEvent('change', {\n      detail: {\n        sourceEvent: event\n      },\n      bubbles: event.bubbles,\n      cancelable: event.cancelable\n    }));\n  }\n\n  /** @private */\n  __isValidConstraint(constraint) {\n    // 0 is valid for `minlength` and `maxlength`\n    return Boolean(constraint) || constraint === 0;\n  }\n});","map":{"version":3,"names":["dedupingMixin","DelegateStateMixin","InputMixin","ValidateMixin","InputConstraintsMixin","superclass","InputConstraintsMixinClass","constraints","delegateAttrs","ready","_createConstraintsObserver","checkValidity","inputElement","_hasValidConstraints","constructor","map","c","invalid","some","__isValidConstraint","_createMethodObserver","join","_constraintsChanged","stateTarget","hasConstraints","isLastConstraintRemoved","__previousHasConstraints","_hasValue","validate","_setInvalid","_onChange","event","stopPropagation","dispatchEvent","CustomEvent","detail","sourceEvent","bubbles","cancelable","constraint","Boolean"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/field-base/src/input-constraints-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { DelegateStateMixin } from '@vaadin/component-base/src/delegate-state-mixin.js';\nimport { InputMixin } from './input-mixin.js';\nimport { ValidateMixin } from './validate-mixin.js';\n\n/**\n * A mixin to combine multiple input validation constraints.\n *\n * @polymerMixin\n * @mixes DelegateStateMixin\n * @mixes InputMixin\n * @mixes ValidateMixin\n */\nexport const InputConstraintsMixin = dedupingMixin(\n  (superclass) =>\n    class InputConstraintsMixinClass extends DelegateStateMixin(ValidateMixin(InputMixin(superclass))) {\n      /**\n       * An array of attributes which participate in the input validation.\n       * Changing these attributes will cause the input to re-validate.\n       *\n       * IMPORTANT: The attributes should be properly delegated to the input element\n       * from the host using `delegateAttrs` getter (see `DelegateStateMixin`).\n       * The `required` attribute is already delegated.\n       */\n      static get constraints() {\n        return ['required'];\n      }\n\n      static get delegateAttrs() {\n        return [...super.delegateAttrs, 'required'];\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this._createConstraintsObserver();\n      }\n\n      /**\n       * Returns true if the current input value satisfies all constraints (if any).\n       * @return {boolean}\n       */\n      checkValidity() {\n        if (this.inputElement && this._hasValidConstraints(this.constructor.constraints.map((c) => this[c]))) {\n          return this.inputElement.checkValidity();\n        }\n        return !this.invalid;\n      }\n\n      /**\n       * Returns true if some of the provided set of constraints are valid.\n       * @param {Array} constraints\n       * @return {boolean}\n       * @protected\n       */\n      _hasValidConstraints(constraints) {\n        return constraints.some((c) => this.__isValidConstraint(c));\n      }\n\n      /**\n       * Override this method to customize setting up constraints observer.\n       * @protected\n       */\n      _createConstraintsObserver() {\n        // This complex observer needs to be added dynamically instead of using `static get observers()`\n        // to make it possible to tweak this behavior in classes that apply this mixin.\n        this._createMethodObserver(`_constraintsChanged(stateTarget, ${this.constructor.constraints.join(', ')})`);\n      }\n\n      /**\n       * Override this method to implement custom validation constraints.\n       * @param {HTMLElement | undefined} stateTarget\n       * @param {unknown[]} constraints\n       * @protected\n       */\n      _constraintsChanged(stateTarget, ...constraints) {\n        // The input element's validity cannot be determined until\n        // all the necessary constraint attributes aren't set on it.\n        if (!stateTarget) {\n          return;\n        }\n\n        const hasConstraints = this._hasValidConstraints(constraints);\n        const isLastConstraintRemoved = this.__previousHasConstraints && !hasConstraints;\n\n        if ((this._hasValue || this.invalid) && hasConstraints) {\n          this.validate();\n        } else if (isLastConstraintRemoved) {\n          this._setInvalid(false);\n        }\n\n        this.__previousHasConstraints = hasConstraints;\n      }\n\n      /**\n       * Override an event listener inherited from `InputMixin`\n       * to capture native `change` event and make sure that\n       * a new one is dispatched after validation runs.\n       * @param {Event} event\n       * @protected\n       * @override\n       */\n      _onChange(event) {\n        event.stopPropagation();\n\n        this.validate();\n\n        this.dispatchEvent(\n          new CustomEvent('change', {\n            detail: {\n              sourceEvent: event,\n            },\n            bubbles: event.bubbles,\n            cancelable: event.cancelable,\n          }),\n        );\n      }\n\n      /** @private */\n      __isValidConstraint(constraint) {\n        // 0 is valid for `minlength` and `maxlength`\n        return Boolean(constraint) || constraint === 0;\n      }\n    },\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}