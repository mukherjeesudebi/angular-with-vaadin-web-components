{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { addListener } from '@vaadin/component-base/src/gestures.js';\nimport { DisabledMixin } from './disabled-mixin.js';\nimport { KeyboardMixin } from './keyboard-mixin.js';\n\n/**\n * A mixin to toggle the `active` attribute.\n *\n * The attribute is set whenever the user activates the element by a pointer\n * or presses an activation key on the element from the keyboard.\n *\n * The attribute is removed as soon as the element is deactivated\n * by the pointer or by releasing the activation key.\n *\n * @polymerMixin\n */\nexport const ActiveMixin = superclass => class ActiveMixinClass extends DisabledMixin(KeyboardMixin(superclass)) {\n  /**\n   * An array of activation keys.\n   *\n   * See possible values here:\n   * https://developer.mozilla.org/ru/docs/Web/API/KeyboardEvent/key/Key_Values\n   *\n   * @protected\n   * @return {!Array<!string>}\n   */\n  get _activeKeys() {\n    return [' '];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    addListener(this, 'down', event => {\n      if (this._shouldSetActive(event)) {\n        this._setActive(true);\n      }\n    });\n    addListener(this, 'up', () => {\n      this._setActive(false);\n    });\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    // When the element is disconnecting from the DOM at the moment being active,\n    // the `active` attribute needs to be manually removed from the element.\n    // Otherwise, it will preserve on the element until the element is activated once again.\n    // The case reproduces for `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\n    this._setActive(false);\n  }\n\n  /**\n   * @param {KeyboardEvent | MouseEvent} _event\n   * @protected\n   */\n  _shouldSetActive(_event) {\n    return !this.disabled;\n  }\n\n  /**\n   * Sets the `active` attribute on the element if an activation key is pressed.\n   *\n   * @param {KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    super._onKeyDown(event);\n    if (this._shouldSetActive(event) && this._activeKeys.includes(event.key)) {\n      this._setActive(true);\n\n      // Element can become hidden before the `keyup` event, e.g. on button click.\n      // Use document listener to ensure `active` attribute is removed correctly.\n      document.addEventListener('keyup', e => {\n        if (this._activeKeys.includes(e.key)) {\n          this._setActive(false);\n        }\n      }, {\n        once: true\n      });\n    }\n  }\n\n  /**\n   * Toggles the `active` attribute on the element.\n   *\n   * @param {boolean} active\n   * @protected\n   */\n  _setActive(active) {\n    this.toggleAttribute('active', active);\n  }\n};","map":{"version":3,"names":["addListener","DisabledMixin","KeyboardMixin","ActiveMixin","superclass","ActiveMixinClass","_activeKeys","ready","event","_shouldSetActive","_setActive","disconnectedCallback","_event","disabled","_onKeyDown","includes","key","document","addEventListener","e","once","active","toggleAttribute"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/a11y-base/src/active-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { addListener } from '@vaadin/component-base/src/gestures.js';\nimport { DisabledMixin } from './disabled-mixin.js';\nimport { KeyboardMixin } from './keyboard-mixin.js';\n\n/**\n * A mixin to toggle the `active` attribute.\n *\n * The attribute is set whenever the user activates the element by a pointer\n * or presses an activation key on the element from the keyboard.\n *\n * The attribute is removed as soon as the element is deactivated\n * by the pointer or by releasing the activation key.\n *\n * @polymerMixin\n */\nexport const ActiveMixin = (superclass) =>\n  class ActiveMixinClass extends DisabledMixin(KeyboardMixin(superclass)) {\n    /**\n     * An array of activation keys.\n     *\n     * See possible values here:\n     * https://developer.mozilla.org/ru/docs/Web/API/KeyboardEvent/key/Key_Values\n     *\n     * @protected\n     * @return {!Array<!string>}\n     */\n    get _activeKeys() {\n      return [' '];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      addListener(this, 'down', (event) => {\n        if (this._shouldSetActive(event)) {\n          this._setActive(true);\n        }\n      });\n\n      addListener(this, 'up', () => {\n        this._setActive(false);\n      });\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // When the element is disconnecting from the DOM at the moment being active,\n      // the `active` attribute needs to be manually removed from the element.\n      // Otherwise, it will preserve on the element until the element is activated once again.\n      // The case reproduces for `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\n      this._setActive(false);\n    }\n\n    /**\n     * @param {KeyboardEvent | MouseEvent} _event\n     * @protected\n     */\n    _shouldSetActive(_event) {\n      return !this.disabled;\n    }\n\n    /**\n     * Sets the `active` attribute on the element if an activation key is pressed.\n     *\n     * @param {KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyDown(event) {\n      super._onKeyDown(event);\n\n      if (this._shouldSetActive(event) && this._activeKeys.includes(event.key)) {\n        this._setActive(true);\n\n        // Element can become hidden before the `keyup` event, e.g. on button click.\n        // Use document listener to ensure `active` attribute is removed correctly.\n        document.addEventListener(\n          'keyup',\n          (e) => {\n            if (this._activeKeys.includes(e.key)) {\n              this._setActive(false);\n            }\n          },\n          { once: true },\n        );\n      }\n    }\n\n    /**\n     * Toggles the `active` attribute on the element.\n     *\n     * @param {boolean} active\n     * @protected\n     */\n    _setActive(active) {\n      this.toggleAttribute('active', active);\n    }\n  };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,wCAAwC;AACpE,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,aAAa,QAAQ,qBAAqB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,UAAU,IACpC,MAAMC,gBAAgB,SAASJ,aAAa,CAACC,aAAa,CAACE,UAAU,CAAC,CAAC,CAAC;EACtE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIE,WAAWA,CAAA,EAAG;IAChB,OAAO,CAAC,GAAG,CAAC;EACd;;EAEA;EACAC,KAAKA,CAAA,EAAG;IACN,KAAK,CAACA,KAAK,CAAC,CAAC;IAEbP,WAAW,CAAC,IAAI,EAAE,MAAM,EAAGQ,KAAK,IAAK;MACnC,IAAI,IAAI,CAACC,gBAAgB,CAACD,KAAK,CAAC,EAAE;QAChC,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC;MACvB;IACF,CAAC,CAAC;IAEFV,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM;MAC5B,IAAI,CAACU,UAAU,CAAC,KAAK,CAAC;IACxB,CAAC,CAAC;EACJ;;EAEA;EACAC,oBAAoBA,CAAA,EAAG;IACrB,KAAK,CAACA,oBAAoB,CAAC,CAAC;;IAE5B;IACA;IACA;IACA;IACA,IAAI,CAACD,UAAU,CAAC,KAAK,CAAC;EACxB;;EAEA;AACJ;AACA;AACA;EACID,gBAAgBA,CAACG,MAAM,EAAE;IACvB,OAAO,CAAC,IAAI,CAACC,QAAQ;EACvB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACN,KAAK,EAAE;IAChB,KAAK,CAACM,UAAU,CAACN,KAAK,CAAC;IAEvB,IAAI,IAAI,CAACC,gBAAgB,CAACD,KAAK,CAAC,IAAI,IAAI,CAACF,WAAW,CAACS,QAAQ,CAACP,KAAK,CAACQ,GAAG,CAAC,EAAE;MACxE,IAAI,CAACN,UAAU,CAAC,IAAI,CAAC;;MAErB;MACA;MACAO,QAAQ,CAACC,gBAAgB,CACvB,OAAO,EACNC,CAAC,IAAK;QACL,IAAI,IAAI,CAACb,WAAW,CAACS,QAAQ,CAACI,CAAC,CAACH,GAAG,CAAC,EAAE;UACpC,IAAI,CAACN,UAAU,CAAC,KAAK,CAAC;QACxB;MACF,CAAC,EACD;QAAEU,IAAI,EAAE;MAAK,CACf,CAAC;IACH;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIV,UAAUA,CAACW,MAAM,EAAE;IACjB,IAAI,CAACC,eAAe,CAAC,QAAQ,EAAED,MAAM,CAAC;EACxC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}