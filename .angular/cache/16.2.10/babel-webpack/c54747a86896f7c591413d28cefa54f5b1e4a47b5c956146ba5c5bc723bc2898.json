{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    this._value = nothing;\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n    }\n  }\n  render(value) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return this._value = value;\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    strings.raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: this.constructor.resultType,\n      strings,\n      values: []\n    };\n  }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);","map":{"version":3,"names":["nothing","noChange","directive","Directive","PartType","HTML_RESULT","UnsafeHTMLDirective","constructor","partInfo","_value","type","CHILD","Error","directiveName","render","value","_templateResult","undefined","strings","raw","resultType","values","unsafeHTML"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/lit-html/development/directives/unsafe-html.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        this._value = nothing;\n        if (partInfo.type !== PartType.CHILD) {\n            throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n        }\n    }\n    render(value) {\n        if (value === nothing || value == null) {\n            this._templateResult = undefined;\n            return (this._value = value);\n        }\n        if (value === noChange) {\n            return value;\n        }\n        if (typeof value != 'string') {\n            throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n        }\n        if (value === this._value) {\n            return this._templateResult;\n        }\n        this._value = value;\n        const strings = [value];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        strings.raw = strings;\n        // WARNING: impersonating a TemplateResult like this is extremely\n        // dangerous. Third-party directives should not do this.\n        return (this._templateResult = {\n            // Cast to a known set of integers that satisfy ResultType so that we\n            // don't have to export ResultType and possibly encourage this pattern.\n            // This property needs to remain unminified.\n            ['_$litType$']: this.constructor\n                .resultType,\n            strings,\n            values: [],\n        });\n    }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,gBAAgB;AAClD,SAASC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,iBAAiB;AAChE,MAAMC,WAAW,GAAG,CAAC;AACrB,OAAO,MAAMC,mBAAmB,SAASH,SAAS,CAAC;EAC/CI,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAACA,QAAQ,CAAC;IACf,IAAI,CAACC,MAAM,GAAGT,OAAO;IACrB,IAAIQ,QAAQ,CAACE,IAAI,KAAKN,QAAQ,CAACO,KAAK,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAE,GAAE,IAAI,CAACL,WAAW,CAACM,aAAc,uCAAsC,CAAC;IAC7F;EACJ;EACAC,MAAMA,CAACC,KAAK,EAAE;IACV,IAAIA,KAAK,KAAKf,OAAO,IAAIe,KAAK,IAAI,IAAI,EAAE;MACpC,IAAI,CAACC,eAAe,GAAGC,SAAS;MAChC,OAAQ,IAAI,CAACR,MAAM,GAAGM,KAAK;IAC/B;IACA,IAAIA,KAAK,KAAKd,QAAQ,EAAE;MACpB,OAAOc,KAAK;IAChB;IACA,IAAI,OAAOA,KAAK,IAAI,QAAQ,EAAE;MAC1B,MAAM,IAAIH,KAAK,CAAE,GAAE,IAAI,CAACL,WAAW,CAACM,aAAc,mCAAkC,CAAC;IACzF;IACA,IAAIE,KAAK,KAAK,IAAI,CAACN,MAAM,EAAE;MACvB,OAAO,IAAI,CAACO,eAAe;IAC/B;IACA,IAAI,CAACP,MAAM,GAAGM,KAAK;IACnB,MAAMG,OAAO,GAAG,CAACH,KAAK,CAAC;IACvB;IACAG,OAAO,CAACC,GAAG,GAAGD,OAAO;IACrB;IACA;IACA,OAAQ,IAAI,CAACF,eAAe,GAAG;MAC3B;MACA;MACA;MACA,CAAC,YAAY,GAAG,IAAI,CAACT,WAAW,CAC3Ba,UAAU;MACfF,OAAO;MACPG,MAAM,EAAE;IACZ,CAAC;EACL;AACJ;AACAf,mBAAmB,CAACO,aAAa,GAAG,YAAY;AAChDP,mBAAmB,CAACc,UAAU,GAAGf,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,UAAU,GAAGpB,SAAS,CAACI,mBAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}