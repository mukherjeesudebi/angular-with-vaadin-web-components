{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { iterateChildren, iterateRowCells, updateBooleanRowStates, updateStringRowStates } from './vaadin-grid-helpers.js';\nconst DropMode = {\n  BETWEEN: 'between',\n  ON_TOP: 'on-top',\n  ON_TOP_OR_BETWEEN: 'on-top-or-between',\n  ON_GRID: 'on-grid'\n};\nconst DropLocation = {\n  ON_TOP: 'on-top',\n  ABOVE: 'above',\n  BELOW: 'below',\n  EMPTY: 'empty'\n};\n\n// Detects if the browser doesn't support HTML5 Drag & Drop API (and falls back to the @vaadin/vaadin-mobile-drag-drop polyfill)\nconst usesDnDPolyfill = !('draggable' in document.createElement('div'));\n\n/**\n * @polymerMixin\n */\nexport const DragAndDropMixin = superClass => class DragAndDropMixin extends superClass {\n  static get properties() {\n    return {\n      /**\n       * Defines the locations within the Grid row where an element can be dropped.\n       *\n       * Possible values are:\n       * - `between`: The drop event can happen between Grid rows.\n       * - `on-top`: The drop event can happen on top of Grid rows.\n       * - `on-top-or-between`: The drop event can happen either on top of or between Grid rows.\n       * - `on-grid`: The drop event will not happen on any specific row, it will show the drop target outline around the whole grid.\n       * @attr {between|on-top|on-top-or-between|on-grid} drop-mode\n       * @type {GridDropMode | null | undefined}\n       */\n      dropMode: String,\n      /**\n       * Marks the grid's rows to be available for dragging.\n       * @attr {boolean} rows-draggable\n       */\n      rowsDraggable: Boolean,\n      /**\n       * A function that filters dragging of specific grid rows. The return value should be false\n       * if dragging of the row should be disabled.\n       *\n       * Receives one argument:\n       * - `model` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `model.index` The index of the item.\n       *   - `model.item` The item.\n       *   - `model.expanded` Sublevel toggle state.\n       *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `model.selected` Selected state.\n       *\n       * @type {GridDragAndDropFilter | null | undefined}\n       */\n      dragFilter: Function,\n      /**\n       * A function that filters dropping on specific grid rows. The return value should be false\n       * if dropping on the row should be disabled.\n       *\n       * Receives one argument:\n       * - `model` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `model.index` The index of the item.\n       *   - `model.item` The item.\n       *   - `model.expanded` Sublevel toggle state.\n       *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `model.selected` Selected state.\n       *\n       * @type {GridDragAndDropFilter | null | undefined}\n       */\n      dropFilter: Function,\n      /** @private */\n      __dndAutoScrollThreshold: {\n        value: 50\n      }\n    };\n  }\n  static get observers() {\n    return ['_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter, loading)'];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.$.table.addEventListener('dragstart', this._onDragStart.bind(this));\n    this.$.table.addEventListener('dragend', this._onDragEnd.bind(this));\n    this.$.table.addEventListener('dragover', this._onDragOver.bind(this));\n    this.$.table.addEventListener('dragleave', this._onDragLeave.bind(this));\n    this.$.table.addEventListener('drop', this._onDrop.bind(this));\n    this.$.table.addEventListener('dragenter', e => {\n      if (this.dropMode) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    });\n  }\n\n  /** @private */\n  _onDragStart(e) {\n    if (this.rowsDraggable) {\n      let row = e.target;\n      if (row.localName === 'vaadin-grid-cell-content') {\n        // The draggable node is the cell content element on browsers that support native shadow\n        row = row.assignedSlot.parentNode.parentNode;\n      }\n      if (row.parentNode !== this.$.items) {\n        return;\n      }\n      e.stopPropagation();\n      this.toggleAttribute('dragging-rows', true);\n      if (this._safari) {\n        // Safari doesn't position drag images from transformed\n        // elements properly so we need to switch to use top temporarily\n        const transform = row.style.transform;\n        row.style.top = /translateY\\((.*)\\)/u.exec(transform)[1];\n        row.style.transform = 'none';\n        requestAnimationFrame(() => {\n          row.style.top = '';\n          row.style.transform = transform;\n        });\n      }\n      const rowRect = row.getBoundingClientRect();\n      if (usesDnDPolyfill) {\n        // The polyfill drag image is automatically centered so there is no need to adjust the position\n        e.dataTransfer.setDragImage(row);\n      } else {\n        // The native drag image needs to be shifted manually to compensate for the touch position offset\n        e.dataTransfer.setDragImage(row, e.clientX - rowRect.left, e.clientY - rowRect.top);\n      }\n      let rows = [row];\n      if (this._isSelected(row._item)) {\n        rows = this.__getViewportRows().filter(row => this._isSelected(row._item)).filter(row => !this.dragFilter || this.dragFilter(this.__getRowModel(row)));\n      }\n\n      // Set the default transfer data\n      e.dataTransfer.setData('text', this.__formatDefaultTransferData(rows));\n      updateBooleanRowStates(row, {\n        dragstart: rows.length > 1 ? `${rows.length}` : ''\n      });\n      this.style.setProperty('--_grid-drag-start-x', `${e.clientX - rowRect.left + 20}px`);\n      this.style.setProperty('--_grid-drag-start-y', `${e.clientY - rowRect.top + 10}px`);\n      requestAnimationFrame(() => {\n        updateBooleanRowStates(row, {\n          dragstart: false\n        });\n        this.style.setProperty('--_grid-drag-start-x', '');\n        this.style.setProperty('--_grid-drag-start-y', '');\n      });\n      const event = new CustomEvent('grid-dragstart', {\n        detail: {\n          draggedItems: rows.map(row => row._item),\n          setDragData: (type, data) => e.dataTransfer.setData(type, data),\n          setDraggedItemsCount: count => row.setAttribute('dragstart', count)\n        }\n      });\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n  }\n\n  /** @private */\n  _onDragEnd(e) {\n    this.toggleAttribute('dragging-rows', false);\n    e.stopPropagation();\n    const event = new CustomEvent('grid-dragend');\n    event.originalEvent = e;\n    this.dispatchEvent(event);\n  }\n\n  /** @private */\n  _onDragLeave(e) {\n    e.stopPropagation();\n    this._clearDragStyles();\n  }\n\n  /** @private */\n  _onDragOver(e) {\n    if (this.dropMode) {\n      this._dropLocation = undefined;\n      this._dragOverItem = undefined;\n      if (this.__dndAutoScroll(e.clientY)) {\n        this._clearDragStyles();\n        return;\n      }\n      let row = e.composedPath().find(node => node.localName === 'tr');\n      if (!this._effectiveSize || this.dropMode === DropMode.ON_GRID) {\n        // The grid is empty or \"on-grid\" drop mode was used, always default to \"empty\"\n        this._dropLocation = DropLocation.EMPTY;\n      } else if (!row || row.parentNode !== this.$.items) {\n        // The dragover didn't occur on a body row but the grid has items\n        if (row) {\n          // The dragover occurred over a header/footer row\n          return;\n        } else if (this.dropMode === DropMode.BETWEEN || this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n          // The drop mode allows setting the last row as the drag over item\n          row = Array.from(this.$.items.children).filter(row => !row.hidden).pop();\n          this._dropLocation = DropLocation.BELOW;\n        } else {\n          // Drop mode on-top used but the dragover didn't occur over one of the existing rows\n          return;\n        }\n      } else {\n        // The dragover occurred on a body row, determine the drop location from coordinates\n        const rowRect = row.getBoundingClientRect();\n        this._dropLocation = DropLocation.ON_TOP;\n        if (this.dropMode === DropMode.BETWEEN) {\n          const dropAbove = e.clientY - rowRect.top < rowRect.bottom - e.clientY;\n          this._dropLocation = dropAbove ? DropLocation.ABOVE : DropLocation.BELOW;\n        } else if (this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n          if (e.clientY - rowRect.top < rowRect.height / 3) {\n            this._dropLocation = DropLocation.ABOVE;\n          } else if (e.clientY - rowRect.top > rowRect.height / 3 * 2) {\n            this._dropLocation = DropLocation.BELOW;\n          }\n        }\n      }\n      if (row && row.hasAttribute('drop-disabled')) {\n        this._dropLocation = undefined;\n        return;\n      }\n      e.stopPropagation();\n      e.preventDefault();\n      if (this._dropLocation === DropLocation.EMPTY) {\n        this.toggleAttribute('dragover', true);\n      } else if (row) {\n        this._dragOverItem = row._item;\n        if (row.getAttribute('dragover') !== this._dropLocation) {\n          updateStringRowStates(row, {\n            dragover: this._dropLocation\n          });\n        }\n      } else {\n        this._clearDragStyles();\n      }\n    }\n  }\n\n  /** @private */\n  __dndAutoScroll(clientY) {\n    if (this.__dndAutoScrolling) {\n      return true;\n    }\n    const headerBottom = this.$.header.getBoundingClientRect().bottom;\n    const footerTop = this.$.footer.getBoundingClientRect().top;\n    const topDiff = headerBottom - clientY + this.__dndAutoScrollThreshold;\n    const bottomDiff = clientY - footerTop + this.__dndAutoScrollThreshold;\n    let scrollTopDelta = 0;\n    if (bottomDiff > 0) {\n      scrollTopDelta = bottomDiff * 2;\n    } else if (topDiff > 0) {\n      scrollTopDelta = -topDiff * 2;\n    }\n    if (scrollTopDelta) {\n      const scrollTop = this.$.table.scrollTop;\n      this.$.table.scrollTop += scrollTopDelta;\n      const scrollTopChanged = scrollTop !== this.$.table.scrollTop;\n      if (scrollTopChanged) {\n        this.__dndAutoScrolling = true;\n        // Disallow more auto-scrolls within 20ms\n        setTimeout(() => {\n          this.__dndAutoScrolling = false;\n        }, 20);\n        return true;\n      }\n    }\n  }\n\n  /** @private */\n  __getViewportRows() {\n    const headerBottom = this.$.header.getBoundingClientRect().bottom;\n    const footerTop = this.$.footer.getBoundingClientRect().top;\n    return Array.from(this.$.items.children).filter(row => {\n      const rowRect = row.getBoundingClientRect();\n      return rowRect.bottom > headerBottom && rowRect.top < footerTop;\n    });\n  }\n\n  /** @protected */\n  _clearDragStyles() {\n    this.removeAttribute('dragover');\n    iterateChildren(this.$.items, row => {\n      updateStringRowStates(row, {\n        dragover: null\n      });\n    });\n  }\n\n  /** @private */\n  _onDrop(e) {\n    if (this.dropMode) {\n      e.stopPropagation();\n      e.preventDefault();\n      const dragData = e.dataTransfer.types && Array.from(e.dataTransfer.types).map(type => {\n        return {\n          type,\n          data: e.dataTransfer.getData(type)\n        };\n      });\n      this._clearDragStyles();\n      const event = new CustomEvent('grid-drop', {\n        bubbles: e.bubbles,\n        cancelable: e.cancelable,\n        detail: {\n          dropTargetItem: this._dragOverItem,\n          dropLocation: this._dropLocation,\n          dragData\n        }\n      });\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n  }\n\n  /** @private */\n  __formatDefaultTransferData(rows) {\n    return rows.map(row => {\n      return Array.from(row.children).filter(cell => !cell.hidden && cell.getAttribute('part').indexOf('details-cell') === -1).sort((a, b) => {\n        return a._column._order > b._column._order ? 1 : -1;\n      }).map(cell => cell._content.textContent.trim()).filter(content => content).join('\\t');\n    }).join('\\n');\n  }\n\n  /** @private */\n  _dragDropAccessChanged() {\n    this.filterDragAndDrop();\n  }\n\n  /**\n   * Runs the `dragFilter` and `dropFilter` hooks for the visible cells.\n   * If the filter depends on varying conditions, you may need to\n   * call this function manually in order to update the draggability when\n   * the conditions change.\n   */\n  filterDragAndDrop() {\n    iterateChildren(this.$.items, row => {\n      if (!row.hidden) {\n        this._filterDragAndDrop(row, this.__getRowModel(row));\n      }\n    });\n  }\n\n  /**\n   * @param {!HTMLElement} row\n   * @param {!GridItemModel} model\n   * @protected\n   */\n  _filterDragAndDrop(row, model) {\n    const loading = this.loading || row.hasAttribute('loading');\n    const dragDisabled = !this.rowsDraggable || loading || this.dragFilter && !this.dragFilter(model);\n    const dropDisabled = !this.dropMode || loading || this.dropFilter && !this.dropFilter(model);\n    iterateRowCells(row, cell => {\n      if (dragDisabled) {\n        cell._content.removeAttribute('draggable');\n      } else {\n        cell._content.setAttribute('draggable', true);\n      }\n    });\n    updateBooleanRowStates(row, {\n      'drag-disabled': !!dragDisabled,\n      'drop-disabled': !!dropDisabled\n    });\n  }\n\n  /**\n   * Fired when starting to drag grid rows.\n   *\n   * @event grid-dragstart\n   * @param {Object} originalEvent The native dragstart event\n   * @param {Object} detail\n   * @param {Object} detail.draggedItems the items in the visible viewport that are dragged\n   * @param {Function} detail.setDraggedItemsCount Overrides the default number shown in the drag image on multi row drag.\n   * Parameter is of type number.\n   * @param {Function} detail.setDragData Sets dataTransfer data for the drag operation.\n   * Note that \"text\" is the only data type supported by all the browsers the grid currently supports (including IE11).\n   * The function takes two parameters:\n   * - type:string The type of the data\n   * - data:string The data\n   */\n\n  /**\n   * Fired when the dragging of the rows ends.\n   *\n   * @event grid-dragend\n   * @param {Object} originalEvent The native dragend event\n   */\n\n  /**\n   * Fired when a drop occurs on top of the grid.\n   *\n   * @event grid-drop\n   * @param {Object} originalEvent The native drop event\n   * @param {Object} detail\n   * @param {Object} detail.dropTargetItem The item of the grid row on which the drop occurred.\n   * @param {string} detail.dropLocation The position at which the drop event took place relative to a row.\n   * Depending on the dropMode value, the drop location can be one of the following\n   * - `on-top`: when the drop occurred on top of the row\n   * - `above`: when the drop occurred above the row\n   * - `below`: when the drop occurred below the row\n   * - `empty`: when the drop occurred over the grid, not relative to any specific row\n   * @param {string} detail.dragData An array of items with the payload as a string representation as the\n   * `data` property and the type of the data as `type` property.\n   */\n};","map":{"version":3,"names":["iterateChildren","iterateRowCells","updateBooleanRowStates","updateStringRowStates","DropMode","BETWEEN","ON_TOP","ON_TOP_OR_BETWEEN","ON_GRID","DropLocation","ABOVE","BELOW","EMPTY","usesDnDPolyfill","document","createElement","DragAndDropMixin","superClass","properties","dropMode","String","rowsDraggable","Boolean","dragFilter","Function","dropFilter","__dndAutoScrollThreshold","value","observers","ready","$","table","addEventListener","_onDragStart","bind","_onDragEnd","_onDragOver","_onDragLeave","_onDrop","e","preventDefault","stopPropagation","row","target","localName","assignedSlot","parentNode","items","toggleAttribute","_safari","transform","style","top","exec","requestAnimationFrame","rowRect","getBoundingClientRect","dataTransfer","setDragImage","clientX","left","clientY","rows","_isSelected","_item","__getViewportRows","filter","__getRowModel","setData","__formatDefaultTransferData","dragstart","length","setProperty","event","CustomEvent","detail","draggedItems","map","setDragData","type","data","setDraggedItemsCount","count","setAttribute","originalEvent","dispatchEvent","_clearDragStyles","_dropLocation","undefined","_dragOverItem","__dndAutoScroll","composedPath","find","node","_effectiveSize","Array","from","children","hidden","pop","dropAbove","bottom","height","hasAttribute","getAttribute","dragover","__dndAutoScrolling","headerBottom","header","footerTop","footer","topDiff","bottomDiff","scrollTopDelta","scrollTop","scrollTopChanged","setTimeout","removeAttribute","dragData","types","getData","bubbles","cancelable","dropTargetItem","dropLocation","cell","indexOf","sort","a","b","_column","_order","_content","textContent","trim","content","join","_dragDropAccessChanged","filterDragAndDrop","_filterDragAndDrop","model","loading","dragDisabled","dropDisabled"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/grid/src/vaadin-grid-drag-and-drop-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport {\n  iterateChildren,\n  iterateRowCells,\n  updateBooleanRowStates,\n  updateStringRowStates,\n} from './vaadin-grid-helpers.js';\n\nconst DropMode = {\n  BETWEEN: 'between',\n  ON_TOP: 'on-top',\n  ON_TOP_OR_BETWEEN: 'on-top-or-between',\n  ON_GRID: 'on-grid',\n};\n\nconst DropLocation = {\n  ON_TOP: 'on-top',\n  ABOVE: 'above',\n  BELOW: 'below',\n  EMPTY: 'empty',\n};\n\n// Detects if the browser doesn't support HTML5 Drag & Drop API (and falls back to the @vaadin/vaadin-mobile-drag-drop polyfill)\nconst usesDnDPolyfill = !('draggable' in document.createElement('div'));\n\n/**\n * @polymerMixin\n */\nexport const DragAndDropMixin = (superClass) =>\n  class DragAndDropMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Defines the locations within the Grid row where an element can be dropped.\n         *\n         * Possible values are:\n         * - `between`: The drop event can happen between Grid rows.\n         * - `on-top`: The drop event can happen on top of Grid rows.\n         * - `on-top-or-between`: The drop event can happen either on top of or between Grid rows.\n         * - `on-grid`: The drop event will not happen on any specific row, it will show the drop target outline around the whole grid.\n         * @attr {between|on-top|on-top-or-between|on-grid} drop-mode\n         * @type {GridDropMode | null | undefined}\n         */\n        dropMode: String,\n\n        /**\n         * Marks the grid's rows to be available for dragging.\n         * @attr {boolean} rows-draggable\n         */\n        rowsDraggable: Boolean,\n\n        /**\n         * A function that filters dragging of specific grid rows. The return value should be false\n         * if dragging of the row should be disabled.\n         *\n         * Receives one argument:\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridDragAndDropFilter | null | undefined}\n         */\n        dragFilter: Function,\n\n        /**\n         * A function that filters dropping on specific grid rows. The return value should be false\n         * if dropping on the row should be disabled.\n         *\n         * Receives one argument:\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridDragAndDropFilter | null | undefined}\n         */\n        dropFilter: Function,\n\n        /** @private */\n        __dndAutoScrollThreshold: {\n          value: 50,\n        },\n      };\n    }\n\n    static get observers() {\n      return ['_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter, loading)'];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.$.table.addEventListener('dragstart', this._onDragStart.bind(this));\n      this.$.table.addEventListener('dragend', this._onDragEnd.bind(this));\n      this.$.table.addEventListener('dragover', this._onDragOver.bind(this));\n      this.$.table.addEventListener('dragleave', this._onDragLeave.bind(this));\n      this.$.table.addEventListener('drop', this._onDrop.bind(this));\n      this.$.table.addEventListener('dragenter', (e) => {\n        if (this.dropMode) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      });\n    }\n\n    /** @private */\n    _onDragStart(e) {\n      if (this.rowsDraggable) {\n        let row = e.target;\n        if (row.localName === 'vaadin-grid-cell-content') {\n          // The draggable node is the cell content element on browsers that support native shadow\n          row = row.assignedSlot.parentNode.parentNode;\n        }\n        if (row.parentNode !== this.$.items) {\n          return;\n        }\n\n        e.stopPropagation();\n        this.toggleAttribute('dragging-rows', true);\n\n        if (this._safari) {\n          // Safari doesn't position drag images from transformed\n          // elements properly so we need to switch to use top temporarily\n          const transform = row.style.transform;\n          row.style.top = /translateY\\((.*)\\)/u.exec(transform)[1];\n          row.style.transform = 'none';\n          requestAnimationFrame(() => {\n            row.style.top = '';\n            row.style.transform = transform;\n          });\n        }\n\n        const rowRect = row.getBoundingClientRect();\n\n        if (usesDnDPolyfill) {\n          // The polyfill drag image is automatically centered so there is no need to adjust the position\n          e.dataTransfer.setDragImage(row);\n        } else {\n          // The native drag image needs to be shifted manually to compensate for the touch position offset\n          e.dataTransfer.setDragImage(row, e.clientX - rowRect.left, e.clientY - rowRect.top);\n        }\n\n        let rows = [row];\n        if (this._isSelected(row._item)) {\n          rows = this.__getViewportRows()\n            .filter((row) => this._isSelected(row._item))\n            .filter((row) => !this.dragFilter || this.dragFilter(this.__getRowModel(row)));\n        }\n\n        // Set the default transfer data\n        e.dataTransfer.setData('text', this.__formatDefaultTransferData(rows));\n\n        updateBooleanRowStates(row, { dragstart: rows.length > 1 ? `${rows.length}` : '' });\n        this.style.setProperty('--_grid-drag-start-x', `${e.clientX - rowRect.left + 20}px`);\n        this.style.setProperty('--_grid-drag-start-y', `${e.clientY - rowRect.top + 10}px`);\n\n        requestAnimationFrame(() => {\n          updateBooleanRowStates(row, { dragstart: false });\n          this.style.setProperty('--_grid-drag-start-x', '');\n          this.style.setProperty('--_grid-drag-start-y', '');\n        });\n\n        const event = new CustomEvent('grid-dragstart', {\n          detail: {\n            draggedItems: rows.map((row) => row._item),\n            setDragData: (type, data) => e.dataTransfer.setData(type, data),\n            setDraggedItemsCount: (count) => row.setAttribute('dragstart', count),\n          },\n        });\n        event.originalEvent = e;\n        this.dispatchEvent(event);\n      }\n    }\n\n    /** @private */\n    _onDragEnd(e) {\n      this.toggleAttribute('dragging-rows', false);\n      e.stopPropagation();\n      const event = new CustomEvent('grid-dragend');\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n\n    /** @private */\n    _onDragLeave(e) {\n      e.stopPropagation();\n      this._clearDragStyles();\n    }\n\n    /** @private */\n    _onDragOver(e) {\n      if (this.dropMode) {\n        this._dropLocation = undefined;\n        this._dragOverItem = undefined;\n\n        if (this.__dndAutoScroll(e.clientY)) {\n          this._clearDragStyles();\n          return;\n        }\n\n        let row = e.composedPath().find((node) => node.localName === 'tr');\n\n        if (!this._effectiveSize || this.dropMode === DropMode.ON_GRID) {\n          // The grid is empty or \"on-grid\" drop mode was used, always default to \"empty\"\n          this._dropLocation = DropLocation.EMPTY;\n        } else if (!row || row.parentNode !== this.$.items) {\n          // The dragover didn't occur on a body row but the grid has items\n          if (row) {\n            // The dragover occurred over a header/footer row\n            return;\n          } else if (this.dropMode === DropMode.BETWEEN || this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n            // The drop mode allows setting the last row as the drag over item\n            row = Array.from(this.$.items.children)\n              .filter((row) => !row.hidden)\n              .pop();\n            this._dropLocation = DropLocation.BELOW;\n          } else {\n            // Drop mode on-top used but the dragover didn't occur over one of the existing rows\n            return;\n          }\n        } else {\n          // The dragover occurred on a body row, determine the drop location from coordinates\n          const rowRect = row.getBoundingClientRect();\n\n          this._dropLocation = DropLocation.ON_TOP;\n\n          if (this.dropMode === DropMode.BETWEEN) {\n            const dropAbove = e.clientY - rowRect.top < rowRect.bottom - e.clientY;\n            this._dropLocation = dropAbove ? DropLocation.ABOVE : DropLocation.BELOW;\n          } else if (this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n            if (e.clientY - rowRect.top < rowRect.height / 3) {\n              this._dropLocation = DropLocation.ABOVE;\n            } else if (e.clientY - rowRect.top > (rowRect.height / 3) * 2) {\n              this._dropLocation = DropLocation.BELOW;\n            }\n          }\n        }\n\n        if (row && row.hasAttribute('drop-disabled')) {\n          this._dropLocation = undefined;\n          return;\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (this._dropLocation === DropLocation.EMPTY) {\n          this.toggleAttribute('dragover', true);\n        } else if (row) {\n          this._dragOverItem = row._item;\n          if (row.getAttribute('dragover') !== this._dropLocation) {\n            updateStringRowStates(row, { dragover: this._dropLocation });\n          }\n        } else {\n          this._clearDragStyles();\n        }\n      }\n    }\n\n    /** @private */\n    __dndAutoScroll(clientY) {\n      if (this.__dndAutoScrolling) {\n        return true;\n      }\n\n      const headerBottom = this.$.header.getBoundingClientRect().bottom;\n      const footerTop = this.$.footer.getBoundingClientRect().top;\n      const topDiff = headerBottom - clientY + this.__dndAutoScrollThreshold;\n      const bottomDiff = clientY - footerTop + this.__dndAutoScrollThreshold;\n      let scrollTopDelta = 0;\n\n      if (bottomDiff > 0) {\n        scrollTopDelta = bottomDiff * 2;\n      } else if (topDiff > 0) {\n        scrollTopDelta = -topDiff * 2;\n      }\n\n      if (scrollTopDelta) {\n        const scrollTop = this.$.table.scrollTop;\n        this.$.table.scrollTop += scrollTopDelta;\n        const scrollTopChanged = scrollTop !== this.$.table.scrollTop;\n        if (scrollTopChanged) {\n          this.__dndAutoScrolling = true;\n          // Disallow more auto-scrolls within 20ms\n          setTimeout(() => {\n            this.__dndAutoScrolling = false;\n          }, 20);\n          return true;\n        }\n      }\n    }\n\n    /** @private */\n    __getViewportRows() {\n      const headerBottom = this.$.header.getBoundingClientRect().bottom;\n      const footerTop = this.$.footer.getBoundingClientRect().top;\n      return Array.from(this.$.items.children).filter((row) => {\n        const rowRect = row.getBoundingClientRect();\n        return rowRect.bottom > headerBottom && rowRect.top < footerTop;\n      });\n    }\n\n    /** @protected */\n    _clearDragStyles() {\n      this.removeAttribute('dragover');\n      iterateChildren(this.$.items, (row) => {\n        updateStringRowStates(row, { dragover: null });\n      });\n    }\n\n    /** @private */\n    _onDrop(e) {\n      if (this.dropMode) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const dragData =\n          e.dataTransfer.types &&\n          Array.from(e.dataTransfer.types).map((type) => {\n            return {\n              type,\n              data: e.dataTransfer.getData(type),\n            };\n          });\n\n        this._clearDragStyles();\n\n        const event = new CustomEvent('grid-drop', {\n          bubbles: e.bubbles,\n          cancelable: e.cancelable,\n          detail: {\n            dropTargetItem: this._dragOverItem,\n            dropLocation: this._dropLocation,\n            dragData,\n          },\n        });\n        event.originalEvent = e;\n        this.dispatchEvent(event);\n      }\n    }\n\n    /** @private */\n    __formatDefaultTransferData(rows) {\n      return rows\n        .map((row) => {\n          return Array.from(row.children)\n            .filter((cell) => !cell.hidden && cell.getAttribute('part').indexOf('details-cell') === -1)\n            .sort((a, b) => {\n              return a._column._order > b._column._order ? 1 : -1;\n            })\n            .map((cell) => cell._content.textContent.trim())\n            .filter((content) => content)\n            .join('\\t');\n        })\n        .join('\\n');\n    }\n\n    /** @private */\n    _dragDropAccessChanged() {\n      this.filterDragAndDrop();\n    }\n\n    /**\n     * Runs the `dragFilter` and `dropFilter` hooks for the visible cells.\n     * If the filter depends on varying conditions, you may need to\n     * call this function manually in order to update the draggability when\n     * the conditions change.\n     */\n    filterDragAndDrop() {\n      iterateChildren(this.$.items, (row) => {\n        if (!row.hidden) {\n          this._filterDragAndDrop(row, this.__getRowModel(row));\n        }\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {!GridItemModel} model\n     * @protected\n     */\n    _filterDragAndDrop(row, model) {\n      const loading = this.loading || row.hasAttribute('loading');\n      const dragDisabled = !this.rowsDraggable || loading || (this.dragFilter && !this.dragFilter(model));\n      const dropDisabled = !this.dropMode || loading || (this.dropFilter && !this.dropFilter(model));\n\n      iterateRowCells(row, (cell) => {\n        if (dragDisabled) {\n          cell._content.removeAttribute('draggable');\n        } else {\n          cell._content.setAttribute('draggable', true);\n        }\n      });\n\n      updateBooleanRowStates(row, {\n        'drag-disabled': !!dragDisabled,\n        'drop-disabled': !!dropDisabled,\n      });\n    }\n\n    /**\n     * Fired when starting to drag grid rows.\n     *\n     * @event grid-dragstart\n     * @param {Object} originalEvent The native dragstart event\n     * @param {Object} detail\n     * @param {Object} detail.draggedItems the items in the visible viewport that are dragged\n     * @param {Function} detail.setDraggedItemsCount Overrides the default number shown in the drag image on multi row drag.\n     * Parameter is of type number.\n     * @param {Function} detail.setDragData Sets dataTransfer data for the drag operation.\n     * Note that \"text\" is the only data type supported by all the browsers the grid currently supports (including IE11).\n     * The function takes two parameters:\n     * - type:string The type of the data\n     * - data:string The data\n     */\n\n    /**\n     * Fired when the dragging of the rows ends.\n     *\n     * @event grid-dragend\n     * @param {Object} originalEvent The native dragend event\n     */\n\n    /**\n     * Fired when a drop occurs on top of the grid.\n     *\n     * @event grid-drop\n     * @param {Object} originalEvent The native drop event\n     * @param {Object} detail\n     * @param {Object} detail.dropTargetItem The item of the grid row on which the drop occurred.\n     * @param {string} detail.dropLocation The position at which the drop event took place relative to a row.\n     * Depending on the dropMode value, the drop location can be one of the following\n     * - `on-top`: when the drop occurred on top of the row\n     * - `above`: when the drop occurred above the row\n     * - `below`: when the drop occurred below the row\n     * - `empty`: when the drop occurred over the grid, not relative to any specific row\n     * @param {string} detail.dragData An array of items with the payload as a string representation as the\n     * `data` property and the type of the data as `type` property.\n     */\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}