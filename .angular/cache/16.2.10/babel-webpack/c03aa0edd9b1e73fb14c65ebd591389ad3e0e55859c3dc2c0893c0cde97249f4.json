{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { calculateSplices } from '../utils/array-splice.js';\nimport { ElementMixin } from '../mixins/element-mixin.js';\n\n/**\n * Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array such that path changes to the\n * master array (at the host) element or elsewhere via data-binding) are\n * correctly propagated to items in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * @polymer\n * @mixinFunction\n * @appliesMixin ElementMixin\n * @summary Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array\n */\nlet ArraySelectorMixin = dedupingMixin(superClass => {\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @private\n   */\n  let elementBase = ElementMixin(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_ArraySelectorMixin}\n   * @unrestricted\n   */\n  class ArraySelectorMixin extends elementBase {\n    static get properties() {\n      return {\n        /**\n         * An array containing items from which selection will be made.\n         */\n        items: {\n          type: Array\n        },\n        /**\n         * When `true`, multiple items may be selected at once (in this case,\n         * `selected` is an array of currently selected items).  When `false`,\n         * only one item may be selected at a time.\n         */\n        multi: {\n          type: Boolean,\n          value: false\n        },\n        /**\n         * When `multi` is true, this is an array that contains any selected.\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object|?Array<!Object>}\n         */\n        selected: {\n          type: Object,\n          notify: true\n        },\n        /**\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object}\n         */\n        selectedItem: {\n          type: Object,\n          notify: true\n        },\n        /**\n         * When `true`, calling `select` on an item that is already selected\n         * will deselect the item.\n         */\n        toggle: {\n          type: Boolean,\n          value: false\n        }\n      };\n    }\n    static get observers() {\n      return ['__updateSelection(multi, items.*)'];\n    }\n    constructor() {\n      super();\n      this.__lastItems = null;\n      this.__lastMulti = null;\n      this.__selectedMap = null;\n    }\n    __updateSelection(multi, itemsInfo) {\n      let path = itemsInfo.path;\n      if (path == JSCompiler_renameProperty('items', this)) {\n        // Case 1 - items array changed, so diff against previous array and\n        // deselect any removed items and adjust selected indices\n        let newItems = itemsInfo.base || [];\n        let lastItems = this.__lastItems;\n        let lastMulti = this.__lastMulti;\n        if (multi !== lastMulti) {\n          this.clearSelection();\n        }\n        if (lastItems) {\n          let splices = calculateSplices(newItems, lastItems);\n          this.__applySplices(splices);\n        }\n        this.__lastItems = newItems;\n        this.__lastMulti = multi;\n      } else if (itemsInfo.path == `${JSCompiler_renameProperty('items', this)}.splices`) {\n        // Case 2 - got specific splice information describing the array mutation:\n        // deselect any removed items and adjust selected indices\n        this.__applySplices(itemsInfo.value.indexSplices);\n      } else {\n        // Case 3 - an array element was changed, so deselect the previous\n        // item for that index if it was previously selected\n        let part = path.slice(`${JSCompiler_renameProperty('items', this)}.`.length);\n        let idx = parseInt(part, 10);\n        if (part.indexOf('.') < 0 && part == idx) {\n          this.__deselectChangedIdx(idx);\n        }\n      }\n    }\n    __applySplices(splices) {\n      let selected = this.__selectedMap;\n      // Adjust selected indices and mark removals\n      for (let i = 0; i < splices.length; i++) {\n        let s = splices[i];\n        selected.forEach((idx, item) => {\n          if (idx < s.index) {\n            // no change\n          } else if (idx >= s.index + s.removed.length) {\n            // adjust index\n            selected.set(item, idx + s.addedCount - s.removed.length);\n          } else {\n            // remove index\n            selected.set(item, -1);\n          }\n        });\n        for (let j = 0; j < s.addedCount; j++) {\n          let idx = s.index + j;\n          if (selected.has(this.items[idx])) {\n            selected.set(this.items[idx], idx);\n          }\n        }\n      }\n      // Update linked paths\n      this.__updateLinks();\n      // Remove selected items that were removed from the items array\n      let sidx = 0;\n      selected.forEach((idx, item) => {\n        if (idx < 0) {\n          if (this.multi) {\n            this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n          selected.delete(item);\n        } else {\n          sidx++;\n        }\n      });\n    }\n    __updateLinks() {\n      this.__dataLinkedPaths = {};\n      if (this.multi) {\n        let sidx = 0;\n        this.__selectedMap.forEach(idx => {\n          if (idx >= 0) {\n            this.linkPaths(`${JSCompiler_renameProperty('items', this)}.${idx}`, `${JSCompiler_renameProperty('selected', this)}.${sidx++}`);\n          }\n        });\n      } else {\n        this.__selectedMap.forEach(idx => {\n          this.linkPaths(JSCompiler_renameProperty('selected', this), `${JSCompiler_renameProperty('items', this)}.${idx}`);\n          this.linkPaths(JSCompiler_renameProperty('selectedItem', this), `${JSCompiler_renameProperty('items', this)}.${idx}`);\n        });\n      }\n    }\n\n    /**\n     * Clears the selection state.\n     * @override\n     * @return {void}\n     */\n    clearSelection() {\n      // Unbind previous selection\n      this.__dataLinkedPaths = {};\n      // The selected map stores 3 pieces of information:\n      // key: items array object\n      // value: items array index\n      // order: selected array index\n      this.__selectedMap = new Map();\n      // Initialize selection\n      this.selected = this.multi ? [] : null;\n      this.selectedItem = null;\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isSelected(item) {\n      return this.__selectedMap.has(item);\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isIndexSelected(idx) {\n      return this.isSelected(this.items[idx]);\n    }\n    __deselectChangedIdx(idx) {\n      let sidx = this.__selectedIndexForItemIndex(idx);\n      if (sidx >= 0) {\n        let i = 0;\n        this.__selectedMap.forEach((idx, item) => {\n          if (sidx == i++) {\n            this.deselect(item);\n          }\n        });\n      }\n    }\n    __selectedIndexForItemIndex(idx) {\n      let selected = this.__dataLinkedPaths[`${JSCompiler_renameProperty('items', this)}.${idx}`];\n      if (selected) {\n        return parseInt(selected.slice(`${JSCompiler_renameProperty('selected', this)}.`.length), 10);\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to deselect\n     * @return {void}\n     */\n    deselect(item) {\n      let idx = this.__selectedMap.get(item);\n      if (idx >= 0) {\n        this.__selectedMap.delete(item);\n        let sidx;\n        if (this.multi) {\n          sidx = this.__selectedIndexForItemIndex(idx);\n        }\n        this.__updateLinks();\n        if (this.multi) {\n          this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n        } else {\n          this.selected = this.selectedItem = null;\n        }\n      }\n    }\n\n    /**\n     * Deselects the given index if it is already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to deselect\n     * @return {void}\n     */\n    deselectIndex(idx) {\n      this.deselect(this.items[idx]);\n    }\n\n    /**\n     * Selects the given item.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to select\n     * @return {void}\n     */\n    select(item) {\n      this.selectIndex(this.items.indexOf(item));\n    }\n\n    /**\n     * Selects the given index.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to select\n     * @return {void}\n     */\n    selectIndex(idx) {\n      let item = this.items[idx];\n      if (!this.isSelected(item)) {\n        if (!this.multi) {\n          this.__selectedMap.clear();\n        }\n        this.__selectedMap.set(item, idx);\n        this.__updateLinks();\n        if (this.multi) {\n          this.push(JSCompiler_renameProperty('selected', this), item);\n        } else {\n          this.selected = this.selectedItem = item;\n        }\n      } else if (this.toggle) {\n        this.deselectIndex(idx);\n      }\n    }\n  }\n  return ArraySelectorMixin;\n});\n\n// export mixin\nexport { ArraySelectorMixin };\n\n/**\n * @constructor\n * @extends {PolymerElement}\n * @implements {Polymer_ArraySelectorMixin}\n * @private\n */\nlet baseArraySelector = ArraySelectorMixin(PolymerElement);\n\n/**\n * Element implementing the `ArraySelector` mixin, which records\n * dynamic associations between item paths in a master `items` array and a\n * `selected` array such that path changes to the master array (at the host)\n * element or elsewhere via data-binding) are correctly propagated to items\n * in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * Example:\n *\n * ```js\n * import {PolymerElement} from '@polymer/polymer';\n * import '@polymer/polymer/lib/elements/array-selector.js';\n *\n * class EmployeeList extends PolymerElement {\n *   static get _template() {\n *     return html`\n *         <div> Employee list: </div>\n *         <dom-repeat id=\"employeeList\" items=\"{{employees}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *               <div>Last name: <span>{{item.last}}</span></div>\n *               <button on-click=\"toggleSelection\">Select</button>\n *           </template>\n *         </dom-repeat>\n *\n *         <array-selector id=\"selector\"\n *                         items=\"{{employees}}\"\n *                         selected=\"{{selected}}\"\n *                         multi toggle></array-selector>\n *\n *         <div> Selected employees: </div>\n *         <dom-repeat items=\"{{selected}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *             <div>Last name: <span>{{item.last}}</span></div>\n *           </template>\n *         </dom-repeat>`;\n *   }\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n *   toggleSelection(e) {\n *     const item = this.$.employeeList.itemForElement(e.target);\n *     this.$.selector.select(item);\n *   }\n * }\n * ```\n *\n * @polymer\n * @customElement\n * @extends {baseArraySelector}\n * @appliesMixin ArraySelectorMixin\n * @summary Custom element that links paths between an input `items` array and\n *   an output `selected` item or array based on calls to its selection API.\n */\nclass ArraySelector extends baseArraySelector {\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() {\n    return 'array-selector';\n  }\n  static get template() {\n    return null;\n  }\n}\ncustomElements.define(ArraySelector.is, ArraySelector);\nexport { ArraySelector };","map":{"version":3,"names":["PolymerElement","dedupingMixin","calculateSplices","ElementMixin","ArraySelectorMixin","superClass","elementBase","properties","items","type","Array","multi","Boolean","value","selected","Object","notify","selectedItem","toggle","observers","constructor","__lastItems","__lastMulti","__selectedMap","__updateSelection","itemsInfo","path","JSCompiler_renameProperty","newItems","base","lastItems","lastMulti","clearSelection","splices","__applySplices","indexSplices","part","slice","length","idx","parseInt","indexOf","__deselectChangedIdx","i","s","forEach","item","index","removed","set","addedCount","j","has","__updateLinks","sidx","splice","delete","__dataLinkedPaths","linkPaths","Map","isSelected","isIndexSelected","__selectedIndexForItemIndex","deselect","get","deselectIndex","select","selectIndex","clear","push","baseArraySelector","ArraySelector","is","template","customElements","define"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@polymer/polymer/lib/elements/array-selector.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { calculateSplices } from '../utils/array-splice.js';\nimport { ElementMixin } from '../mixins/element-mixin.js';\n\n/**\n * Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array such that path changes to the\n * master array (at the host) element or elsewhere via data-binding) are\n * correctly propagated to items in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * @polymer\n * @mixinFunction\n * @appliesMixin ElementMixin\n * @summary Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array\n */\nlet ArraySelectorMixin = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @private\n   */\n  let elementBase = ElementMixin(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_ArraySelectorMixin}\n   * @unrestricted\n   */\n  class ArraySelectorMixin extends elementBase {\n\n    static get properties() {\n      return {\n\n        /**\n         * An array containing items from which selection will be made.\n         */\n        items: {\n          type: Array,\n        },\n\n        /**\n         * When `true`, multiple items may be selected at once (in this case,\n         * `selected` is an array of currently selected items).  When `false`,\n         * only one item may be selected at a time.\n         */\n        multi: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When `multi` is true, this is an array that contains any selected.\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object|?Array<!Object>}\n         */\n        selected: {type: Object, notify: true},\n\n        /**\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object}\n         */\n        selectedItem: {type: Object, notify: true},\n\n        /**\n         * When `true`, calling `select` on an item that is already selected\n         * will deselect the item.\n         */\n        toggle: {type: Boolean, value: false}\n\n      };\n    }\n\n    static get observers() {\n      return ['__updateSelection(multi, items.*)'];\n    }\n\n    constructor() {\n      super();\n      this.__lastItems = null;\n      this.__lastMulti = null;\n      this.__selectedMap = null;\n    }\n\n    __updateSelection(multi, itemsInfo) {\n      let path = itemsInfo.path;\n      if (path == JSCompiler_renameProperty('items', this)) {\n        // Case 1 - items array changed, so diff against previous array and\n        // deselect any removed items and adjust selected indices\n        let newItems = itemsInfo.base || [];\n        let lastItems = this.__lastItems;\n        let lastMulti = this.__lastMulti;\n        if (multi !== lastMulti) {\n          this.clearSelection();\n        }\n        if (lastItems) {\n          let splices = calculateSplices(newItems, lastItems);\n          this.__applySplices(splices);\n        }\n        this.__lastItems = newItems;\n        this.__lastMulti = multi;\n      } else if (itemsInfo.path == `${JSCompiler_renameProperty('items', this)}.splices`) {\n        // Case 2 - got specific splice information describing the array mutation:\n        // deselect any removed items and adjust selected indices\n        this.__applySplices(itemsInfo.value.indexSplices);\n      } else {\n        // Case 3 - an array element was changed, so deselect the previous\n        // item for that index if it was previously selected\n        let part = path.slice(`${JSCompiler_renameProperty('items', this)}.`.length);\n        let idx = parseInt(part, 10);\n        if ((part.indexOf('.') < 0) && part == idx) {\n          this.__deselectChangedIdx(idx);\n        }\n      }\n    }\n\n    __applySplices(splices) {\n      let selected = this.__selectedMap;\n      // Adjust selected indices and mark removals\n      for (let i=0; i<splices.length; i++) {\n        let s = splices[i];\n        selected.forEach((idx, item) => {\n          if (idx < s.index) {\n            // no change\n          } else if (idx >= s.index + s.removed.length) {\n            // adjust index\n            selected.set(item, idx + s.addedCount - s.removed.length);\n          } else {\n            // remove index\n            selected.set(item, -1);\n          }\n        });\n        for (let j=0; j<s.addedCount; j++) {\n          let idx = s.index + j;\n          if (selected.has(this.items[idx])) {\n            selected.set(this.items[idx], idx);\n          }\n        }\n      }\n      // Update linked paths\n      this.__updateLinks();\n      // Remove selected items that were removed from the items array\n      let sidx = 0;\n      selected.forEach((idx, item) => {\n        if (idx < 0) {\n          if (this.multi) {\n            this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n          selected.delete(item);\n        } else {\n          sidx++;\n        }\n      });\n    }\n\n    __updateLinks() {\n      this.__dataLinkedPaths = {};\n      if (this.multi) {\n        let sidx = 0;\n        this.__selectedMap.forEach(idx => {\n          if (idx >= 0) {\n            this.linkPaths(\n                `${JSCompiler_renameProperty('items', this)}.${idx}`,\n                `${JSCompiler_renameProperty('selected', this)}.${sidx++}`);\n          }\n        });\n      } else {\n        this.__selectedMap.forEach(idx => {\n          this.linkPaths(\n              JSCompiler_renameProperty('selected', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n          this.linkPaths(\n              JSCompiler_renameProperty('selectedItem', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n        });\n      }\n    }\n\n    /**\n     * Clears the selection state.\n     * @override\n     * @return {void}\n     */\n    clearSelection() {\n      // Unbind previous selection\n      this.__dataLinkedPaths = {};\n      // The selected map stores 3 pieces of information:\n      // key: items array object\n      // value: items array index\n      // order: selected array index\n      this.__selectedMap = new Map();\n      // Initialize selection\n      this.selected = this.multi ? [] : null;\n      this.selectedItem = null;\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isSelected(item) {\n      return this.__selectedMap.has(item);\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isIndexSelected(idx) {\n      return this.isSelected(this.items[idx]);\n    }\n\n    __deselectChangedIdx(idx) {\n      let sidx = this.__selectedIndexForItemIndex(idx);\n      if (sidx >= 0) {\n        let i = 0;\n        this.__selectedMap.forEach((idx, item) => {\n          if (sidx == i++) {\n            this.deselect(item);\n          }\n        });\n      }\n    }\n\n    __selectedIndexForItemIndex(idx) {\n      let selected = this.__dataLinkedPaths[`${JSCompiler_renameProperty('items', this)}.${idx}`];\n      if (selected) {\n        return parseInt(selected.slice(`${JSCompiler_renameProperty('selected', this)}.`.length), 10);\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to deselect\n     * @return {void}\n     */\n    deselect(item) {\n      let idx = this.__selectedMap.get(item);\n      if (idx >= 0) {\n        this.__selectedMap.delete(item);\n        let sidx;\n        if (this.multi) {\n          sidx = this.__selectedIndexForItemIndex(idx);\n        }\n        this.__updateLinks();\n        if (this.multi) {\n          this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n        } else {\n          this.selected = this.selectedItem = null;\n        }\n      }\n    }\n\n    /**\n     * Deselects the given index if it is already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to deselect\n     * @return {void}\n     */\n    deselectIndex(idx) {\n      this.deselect(this.items[idx]);\n    }\n\n    /**\n     * Selects the given item.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to select\n     * @return {void}\n     */\n    select(item) {\n      this.selectIndex(this.items.indexOf(item));\n    }\n\n    /**\n     * Selects the given index.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to select\n     * @return {void}\n     */\n    selectIndex(idx) {\n      let item = this.items[idx];\n      if (!this.isSelected(item)) {\n        if (!this.multi) {\n          this.__selectedMap.clear();\n        }\n        this.__selectedMap.set(item, idx);\n        this.__updateLinks();\n        if (this.multi) {\n          this.push(JSCompiler_renameProperty('selected', this), item);\n        } else {\n          this.selected = this.selectedItem = item;\n        }\n      } else if (this.toggle) {\n        this.deselectIndex(idx);\n      }\n    }\n\n  }\n\n  return ArraySelectorMixin;\n\n});\n\n// export mixin\nexport { ArraySelectorMixin };\n\n/**\n * @constructor\n * @extends {PolymerElement}\n * @implements {Polymer_ArraySelectorMixin}\n * @private\n */\nlet baseArraySelector = ArraySelectorMixin(PolymerElement);\n\n/**\n * Element implementing the `ArraySelector` mixin, which records\n * dynamic associations between item paths in a master `items` array and a\n * `selected` array such that path changes to the master array (at the host)\n * element or elsewhere via data-binding) are correctly propagated to items\n * in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * Example:\n *\n * ```js\n * import {PolymerElement} from '@polymer/polymer';\n * import '@polymer/polymer/lib/elements/array-selector.js';\n *\n * class EmployeeList extends PolymerElement {\n *   static get _template() {\n *     return html`\n *         <div> Employee list: </div>\n *         <dom-repeat id=\"employeeList\" items=\"{{employees}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *               <div>Last name: <span>{{item.last}}</span></div>\n *               <button on-click=\"toggleSelection\">Select</button>\n *           </template>\n *         </dom-repeat>\n *\n *         <array-selector id=\"selector\"\n *                         items=\"{{employees}}\"\n *                         selected=\"{{selected}}\"\n *                         multi toggle></array-selector>\n *\n *         <div> Selected employees: </div>\n *         <dom-repeat items=\"{{selected}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *             <div>Last name: <span>{{item.last}}</span></div>\n *           </template>\n *         </dom-repeat>`;\n *   }\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n *   toggleSelection(e) {\n *     const item = this.$.employeeList.itemForElement(e.target);\n *     this.$.selector.select(item);\n *   }\n * }\n * ```\n *\n * @polymer\n * @customElement\n * @extends {baseArraySelector}\n * @appliesMixin ArraySelectorMixin\n * @summary Custom element that links paths between an input `items` array and\n *   an output `selected` item or array based on calls to its selection API.\n */\nclass ArraySelector extends baseArraySelector {\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'array-selector'; }\n  static get template() { return null; }\n}\ncustomElements.define(ArraySelector.is, ArraySelector);\nexport { ArraySelector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}