{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\n\n/**\n * A controller that manages the helper node content.\n */\nexport class HelperController extends SlotChildObserveController {\n  constructor(host) {\n    // Do not provide tag name, as we create helper lazily.\n    super(host, 'helper', null);\n  }\n\n  /**\n   * Set helper text based on corresponding host property.\n   *\n   * @param {string} helperText\n   */\n  setHelperText(helperText) {\n    this.helperText = helperText;\n\n    // Restore the default helper, if needed.\n    const helperNode = this.getSlotChild();\n    if (!helperNode) {\n      this.restoreDefaultNode();\n    }\n\n    // When default helper is used, update it.\n    if (this.node === this.defaultNode) {\n      this.updateDefaultNode(this.node);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to create the default helper element lazily as needed.\n   *\n   * @param {Node | undefined} node\n   * @protected\n   * @override\n   */\n  restoreDefaultNode() {\n    const {\n      helperText\n    } = this;\n\n    // No helper yet, create one.\n    if (helperText && helperText.trim() !== '') {\n      this.tagName = 'div';\n      const helperNode = this.attachDefaultNode();\n\n      // Observe the default node.\n      this.observeNode(helperNode);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to update the default helper element text content.\n   *\n   * @param {Node | undefined} node\n   * @protected\n   * @override\n   */\n  updateDefaultNode(node) {\n    if (node) {\n      node.textContent = this.helperText;\n    }\n\n    // Notify the host after update.\n    super.updateDefaultNode(node);\n  }\n\n  /**\n   * Override to observe the newly added custom node.\n   *\n   * @param {Node} node\n   * @protected\n   * @override\n   */\n  initCustomNode(node) {\n    // Notify the host about a custom slotted helper.\n    super.initCustomNode(node);\n    this.observeNode(node);\n  }\n}","map":{"version":3,"names":["SlotChildObserveController","HelperController","constructor","host","setHelperText","helperText","helperNode","getSlotChild","restoreDefaultNode","node","defaultNode","updateDefaultNode","trim","tagName","attachDefaultNode","observeNode","textContent","initCustomNode"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/field-base/src/helper-controller.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotChildObserveController } from '@vaadin/component-base/src/slot-child-observe-controller.js';\n\n/**\n * A controller that manages the helper node content.\n */\nexport class HelperController extends SlotChildObserveController {\n  constructor(host) {\n    // Do not provide tag name, as we create helper lazily.\n    super(host, 'helper', null);\n  }\n\n  /**\n   * Set helper text based on corresponding host property.\n   *\n   * @param {string} helperText\n   */\n  setHelperText(helperText) {\n    this.helperText = helperText;\n\n    // Restore the default helper, if needed.\n    const helperNode = this.getSlotChild();\n    if (!helperNode) {\n      this.restoreDefaultNode();\n    }\n\n    // When default helper is used, update it.\n    if (this.node === this.defaultNode) {\n      this.updateDefaultNode(this.node);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to create the default helper element lazily as needed.\n   *\n   * @param {Node | undefined} node\n   * @protected\n   * @override\n   */\n  restoreDefaultNode() {\n    const { helperText } = this;\n\n    // No helper yet, create one.\n    if (helperText && helperText.trim() !== '') {\n      this.tagName = 'div';\n\n      const helperNode = this.attachDefaultNode();\n\n      // Observe the default node.\n      this.observeNode(helperNode);\n    }\n  }\n\n  /**\n   * Override method inherited from `SlotChildObserveController`\n   * to update the default helper element text content.\n   *\n   * @param {Node | undefined} node\n   * @protected\n   * @override\n   */\n  updateDefaultNode(node) {\n    if (node) {\n      node.textContent = this.helperText;\n    }\n\n    // Notify the host after update.\n    super.updateDefaultNode(node);\n  }\n\n  /**\n   * Override to observe the newly added custom node.\n   *\n   * @param {Node} node\n   * @protected\n   * @override\n   */\n  initCustomNode(node) {\n    // Notify the host about a custom slotted helper.\n    super.initCustomNode(node);\n\n    this.observeNode(node);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,0BAA0B,QAAQ,6DAA6D;;AAExG;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,SAASD,0BAA0B,CAAC;EAC/DE,WAAWA,CAACC,IAAI,EAAE;IAChB;IACA,KAAK,CAACA,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEC,aAAaA,CAACC,UAAU,EAAE;IACxB,IAAI,CAACA,UAAU,GAAGA,UAAU;;IAE5B;IACA,MAAMC,UAAU,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IACtC,IAAI,CAACD,UAAU,EAAE;MACf,IAAI,CAACE,kBAAkB,CAAC,CAAC;IAC3B;;IAEA;IACA,IAAI,IAAI,CAACC,IAAI,KAAK,IAAI,CAACC,WAAW,EAAE;MAClC,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACF,IAAI,CAAC;IACnC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACED,kBAAkBA,CAAA,EAAG;IACnB,MAAM;MAAEH;IAAW,CAAC,GAAG,IAAI;;IAE3B;IACA,IAAIA,UAAU,IAAIA,UAAU,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1C,IAAI,CAACC,OAAO,GAAG,KAAK;MAEpB,MAAMP,UAAU,GAAG,IAAI,CAACQ,iBAAiB,CAAC,CAAC;;MAE3C;MACA,IAAI,CAACC,WAAW,CAACT,UAAU,CAAC;IAC9B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,iBAAiBA,CAACF,IAAI,EAAE;IACtB,IAAIA,IAAI,EAAE;MACRA,IAAI,CAACO,WAAW,GAAG,IAAI,CAACX,UAAU;IACpC;;IAEA;IACA,KAAK,CAACM,iBAAiB,CAACF,IAAI,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEQ,cAAcA,CAACR,IAAI,EAAE;IACnB;IACA,KAAK,CAACQ,cAAc,CAACR,IAAI,CAAC;IAE1B,IAAI,CAACM,WAAW,CAACN,IAAI,CAAC;EACxB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}