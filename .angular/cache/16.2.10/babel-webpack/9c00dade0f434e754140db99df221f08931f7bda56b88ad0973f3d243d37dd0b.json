{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isEmptyTextNode } from './dom-utils.js';\nimport { SlotObserver } from './slot-observer.js';\nimport { generateUniqueId } from './unique-id-utils.js';\n\n/**\n * A controller for providing content to slot element and observing changes.\n */\nexport class SlotController extends EventTarget {\n  /**\n   * Ensure that every instance has unique ID.\n   *\n   * @param {HTMLElement} host\n   * @param {string} slotName\n   * @return {string}\n   * @protected\n   */\n  static generateId(host, slotName) {\n    const prefix = slotName || 'default';\n    return `${prefix}-${host.localName}-${generateUniqueId()}`;\n  }\n  constructor(host, slotName, tagName, config = {}) {\n    super();\n    const {\n      initializer,\n      multiple,\n      observe,\n      useUniqueId\n    } = config;\n    this.host = host;\n    this.slotName = slotName;\n    this.tagName = tagName;\n    this.observe = typeof observe === 'boolean' ? observe : true;\n    this.multiple = typeof multiple === 'boolean' ? multiple : false;\n    this.slotInitializer = initializer;\n    if (multiple) {\n      this.nodes = [];\n    }\n\n    // Only generate the default ID if requested by the controller.\n    if (useUniqueId) {\n      this.defaultId = this.constructor.generateId(host, slotName);\n    }\n  }\n  hostConnected() {\n    if (!this.initialized) {\n      if (this.multiple) {\n        this.initMultiple();\n      } else {\n        this.initSingle();\n      }\n      if (this.observe) {\n        this.observeSlot();\n      }\n      this.initialized = true;\n    }\n  }\n\n  /** @protected */\n  initSingle() {\n    let node = this.getSlotChild();\n    if (!node) {\n      node = this.attachDefaultNode();\n      this.initNode(node);\n    } else {\n      this.node = node;\n      this.initAddedNode(node);\n    }\n  }\n\n  /** @protected */\n  initMultiple() {\n    const children = this.getSlotChildren();\n    if (children.length === 0) {\n      const defaultNode = this.attachDefaultNode();\n      if (defaultNode) {\n        this.nodes = [defaultNode];\n        this.initNode(defaultNode);\n      }\n    } else {\n      this.nodes = children;\n      children.forEach(node => {\n        this.initAddedNode(node);\n      });\n    }\n  }\n\n  /**\n   * Create and attach default node using the provided tag name, if any.\n   * @return {Node | undefined}\n   * @protected\n   */\n  attachDefaultNode() {\n    const {\n      host,\n      slotName,\n      tagName\n    } = this;\n\n    // Check if the node was created previously and if so, reuse it.\n    let node = this.defaultNode;\n\n    // Tag name is optional, sometimes we don't init default content.\n    if (!node && tagName) {\n      node = document.createElement(tagName);\n      if (node instanceof Element) {\n        if (slotName !== '') {\n          node.setAttribute('slot', slotName);\n        }\n        this.node = node;\n        this.defaultNode = node;\n      }\n    }\n    if (node) {\n      host.appendChild(node);\n    }\n    return node;\n  }\n\n  /**\n   * Return the list of nodes matching the slot managed by the controller.\n   * @return {Node}\n   */\n  getSlotChildren() {\n    const {\n      slotName\n    } = this;\n    return Array.from(this.host.childNodes).filter(node => {\n      // Either an element (any slot) or a text node (only un-named slot).\n      return node.nodeType === Node.ELEMENT_NODE && node.slot === slotName || node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '';\n    });\n  }\n\n  /**\n   * Return a reference to the node managed by the controller.\n   * @return {Node}\n   */\n  getSlotChild() {\n    return this.getSlotChildren()[0];\n  }\n\n  /**\n   * Run `slotInitializer` for the node managed by the controller.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  initNode(node) {\n    const {\n      slotInitializer\n    } = this;\n    // Don't try to bind `this` to initializer (normally it's arrow function).\n    // Instead, pass the host as a first argument to access component's state.\n    if (slotInitializer) {\n      slotInitializer(node, this.host);\n    }\n  }\n\n  /**\n   * Override to initialize the newly added custom node.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  initCustomNode(_node) {}\n\n  /**\n   * Override to teardown slotted node when it's removed.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  teardownNode(_node) {}\n\n  /**\n   * Run both `initCustomNode` and `initNode` for a custom slotted node.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  initAddedNode(node) {\n    if (node !== this.defaultNode) {\n      this.initCustomNode(node);\n      this.initNode(node);\n    }\n  }\n\n  /**\n   * Setup the observer to manage slot content changes.\n   * @protected\n   */\n  observeSlot() {\n    const {\n      slotName\n    } = this;\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\n    const slot = this.host.shadowRoot.querySelector(selector);\n    this.__slotObserver = new SlotObserver(slot, ({\n      addedNodes,\n      removedNodes\n    }) => {\n      const current = this.multiple ? this.nodes : [this.node];\n\n      // Calling `slot.assignedNodes()` includes whitespace text nodes in case of default slot:\n      // unlike comment nodes, they are not filtered out. So we need to manually ignore them.\n      const newNodes = addedNodes.filter(node => !isEmptyTextNode(node) && !current.includes(node));\n      if (removedNodes.length) {\n        this.nodes = current.filter(node => !removedNodes.includes(node));\n        removedNodes.forEach(node => {\n          this.teardownNode(node);\n        });\n      }\n      if (newNodes && newNodes.length > 0) {\n        if (this.multiple) {\n          // Remove default node if exists\n          if (this.defaultNode) {\n            this.defaultNode.remove();\n          }\n          this.nodes = [...current, ...newNodes].filter(node => node !== this.defaultNode);\n          newNodes.forEach(node => {\n            this.initAddedNode(node);\n          });\n        } else {\n          // Remove previous node if exists\n          if (this.node) {\n            this.node.remove();\n          }\n          this.node = newNodes[0];\n          this.initAddedNode(this.node);\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["isEmptyTextNode","SlotObserver","generateUniqueId","SlotController","EventTarget","generateId","host","slotName","prefix","localName","constructor","tagName","config","initializer","multiple","observe","useUniqueId","slotInitializer","nodes","defaultId","hostConnected","initialized","initMultiple","initSingle","observeSlot","node","getSlotChild","attachDefaultNode","initNode","initAddedNode","children","getSlotChildren","length","defaultNode","forEach","document","createElement","Element","setAttribute","appendChild","Array","from","childNodes","filter","nodeType","Node","ELEMENT_NODE","slot","TEXT_NODE","textContent","trim","initCustomNode","_node","teardownNode","selector","shadowRoot","querySelector","__slotObserver","addedNodes","removedNodes","current","newNodes","includes","remove"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/component-base/src/slot-controller.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isEmptyTextNode } from './dom-utils.js';\nimport { SlotObserver } from './slot-observer.js';\nimport { generateUniqueId } from './unique-id-utils.js';\n\n/**\n * A controller for providing content to slot element and observing changes.\n */\nexport class SlotController extends EventTarget {\n  /**\n   * Ensure that every instance has unique ID.\n   *\n   * @param {HTMLElement} host\n   * @param {string} slotName\n   * @return {string}\n   * @protected\n   */\n  static generateId(host, slotName) {\n    const prefix = slotName || 'default';\n    return `${prefix}-${host.localName}-${generateUniqueId()}`;\n  }\n\n  constructor(host, slotName, tagName, config = {}) {\n    super();\n\n    const { initializer, multiple, observe, useUniqueId } = config;\n\n    this.host = host;\n    this.slotName = slotName;\n    this.tagName = tagName;\n    this.observe = typeof observe === 'boolean' ? observe : true;\n    this.multiple = typeof multiple === 'boolean' ? multiple : false;\n    this.slotInitializer = initializer;\n\n    if (multiple) {\n      this.nodes = [];\n    }\n\n    // Only generate the default ID if requested by the controller.\n    if (useUniqueId) {\n      this.defaultId = this.constructor.generateId(host, slotName);\n    }\n  }\n\n  hostConnected() {\n    if (!this.initialized) {\n      if (this.multiple) {\n        this.initMultiple();\n      } else {\n        this.initSingle();\n      }\n\n      if (this.observe) {\n        this.observeSlot();\n      }\n\n      this.initialized = true;\n    }\n  }\n\n  /** @protected */\n  initSingle() {\n    let node = this.getSlotChild();\n\n    if (!node) {\n      node = this.attachDefaultNode();\n      this.initNode(node);\n    } else {\n      this.node = node;\n      this.initAddedNode(node);\n    }\n  }\n\n  /** @protected */\n  initMultiple() {\n    const children = this.getSlotChildren();\n\n    if (children.length === 0) {\n      const defaultNode = this.attachDefaultNode();\n      if (defaultNode) {\n        this.nodes = [defaultNode];\n        this.initNode(defaultNode);\n      }\n    } else {\n      this.nodes = children;\n      children.forEach((node) => {\n        this.initAddedNode(node);\n      });\n    }\n  }\n\n  /**\n   * Create and attach default node using the provided tag name, if any.\n   * @return {Node | undefined}\n   * @protected\n   */\n  attachDefaultNode() {\n    const { host, slotName, tagName } = this;\n\n    // Check if the node was created previously and if so, reuse it.\n    let node = this.defaultNode;\n\n    // Tag name is optional, sometimes we don't init default content.\n    if (!node && tagName) {\n      node = document.createElement(tagName);\n      if (node instanceof Element) {\n        if (slotName !== '') {\n          node.setAttribute('slot', slotName);\n        }\n        this.node = node;\n        this.defaultNode = node;\n      }\n    }\n\n    if (node) {\n      host.appendChild(node);\n    }\n\n    return node;\n  }\n\n  /**\n   * Return the list of nodes matching the slot managed by the controller.\n   * @return {Node}\n   */\n  getSlotChildren() {\n    const { slotName } = this;\n    return Array.from(this.host.childNodes).filter((node) => {\n      // Either an element (any slot) or a text node (only un-named slot).\n      return (\n        (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) ||\n        (node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '')\n      );\n    });\n  }\n\n  /**\n   * Return a reference to the node managed by the controller.\n   * @return {Node}\n   */\n  getSlotChild() {\n    return this.getSlotChildren()[0];\n  }\n\n  /**\n   * Run `slotInitializer` for the node managed by the controller.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  initNode(node) {\n    const { slotInitializer } = this;\n    // Don't try to bind `this` to initializer (normally it's arrow function).\n    // Instead, pass the host as a first argument to access component's state.\n    if (slotInitializer) {\n      slotInitializer(node, this.host);\n    }\n  }\n\n  /**\n   * Override to initialize the newly added custom node.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  initCustomNode(_node) {}\n\n  /**\n   * Override to teardown slotted node when it's removed.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  teardownNode(_node) {}\n\n  /**\n   * Run both `initCustomNode` and `initNode` for a custom slotted node.\n   *\n   * @param {Node} node\n   * @protected\n   */\n  initAddedNode(node) {\n    if (node !== this.defaultNode) {\n      this.initCustomNode(node);\n      this.initNode(node);\n    }\n  }\n\n  /**\n   * Setup the observer to manage slot content changes.\n   * @protected\n   */\n  observeSlot() {\n    const { slotName } = this;\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\n    const slot = this.host.shadowRoot.querySelector(selector);\n\n    this.__slotObserver = new SlotObserver(slot, ({ addedNodes, removedNodes }) => {\n      const current = this.multiple ? this.nodes : [this.node];\n\n      // Calling `slot.assignedNodes()` includes whitespace text nodes in case of default slot:\n      // unlike comment nodes, they are not filtered out. So we need to manually ignore them.\n      const newNodes = addedNodes.filter((node) => !isEmptyTextNode(node) && !current.includes(node));\n\n      if (removedNodes.length) {\n        this.nodes = current.filter((node) => !removedNodes.includes(node));\n\n        removedNodes.forEach((node) => {\n          this.teardownNode(node);\n        });\n      }\n\n      if (newNodes && newNodes.length > 0) {\n        if (this.multiple) {\n          // Remove default node if exists\n          if (this.defaultNode) {\n            this.defaultNode.remove();\n          }\n          this.nodes = [...current, ...newNodes].filter((node) => node !== this.defaultNode);\n          newNodes.forEach((node) => {\n            this.initAddedNode(node);\n          });\n        } else {\n          // Remove previous node if exists\n          if (this.node) {\n            this.node.remove();\n          }\n          this.node = newNodes[0];\n          this.initAddedNode(this.node);\n        }\n      }\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}