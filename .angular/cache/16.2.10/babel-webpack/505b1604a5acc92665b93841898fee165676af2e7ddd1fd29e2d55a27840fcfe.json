{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { cloneSvgNode } from './vaadin-icon-svg.js';\nconst iconsetRegistry = {};\nconst attachedIcons = new Set();\nfunction getIconId(id, name) {\n  return (id || '').replace(`${name}:`, '');\n}\nfunction getIconsetName(icon) {\n  if (!icon) {\n    return;\n  }\n  const parts = icon.split(':');\n\n  // Use \"vaadin\" as a fallback\n  return parts[0] || 'vaadin';\n}\nfunction initIconsMap(iconset, name) {\n  iconset._icons = [...iconset.querySelectorAll('[id]')].reduce((map, svg) => {\n    const key = getIconId(svg.id, name);\n    map[key] = svg;\n    return map;\n  }, {});\n}\n\n/**\n * `<vaadin-iconset>` is a Web Component for creating SVG icon collections.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ElementMixin\n */\nclass Iconset extends ElementMixin(PolymerElement) {\n  static get template() {\n    return null;\n  }\n  static get is() {\n    return 'vaadin-iconset';\n  }\n  static get properties() {\n    return {\n      /**\n       * The name of the iconset. Every iconset is required to have its own unique name.\n       * All the SVG icons in the iconset must have IDs conforming to its name.\n       *\n       * See also [`name`](#/elements/vaadin-icon#property-name) property of `vaadin-icon`.\n       */\n      name: {\n        type: String,\n        observer: '__nameChanged'\n      },\n      /**\n       * The size of an individual icon. Note that icons must be square.\n       *\n       * When using `vaadin-icon`, the size of the iconset will take precedence\n       * over the size defined by the user to ensure correct appearance.\n       */\n      size: {\n        type: Number,\n        value: 24\n      }\n    };\n  }\n\n  /**\n   * Set of the `vaadin-icon` instances in the DOM.\n   *\n   * @return {Set<Icon>}\n   */\n  static get attachedIcons() {\n    return attachedIcons;\n  }\n\n  /**\n   * Returns an instance of the iconset by its name.\n   *\n   * @param {string} name\n   * @return {Iconset}\n   */\n  static getIconset(name) {\n    return iconsetRegistry[name];\n  }\n\n  /**\n   * Returns SVGTemplateResult for the `icon` ID matching `name` of the\n   * iconset, or `nothing` literal if there is no matching icon found.\n   *\n   * @param {string} icon\n   * @param {?string} name\n   */\n  static getIconSvg(icon, name) {\n    const iconsetName = name || getIconsetName(icon);\n    const iconset = this.getIconset(iconsetName);\n    if (!icon || !iconset) {\n      // Missing icon, return `nothing` literal.\n      return {\n        svg: cloneSvgNode(null)\n      };\n    }\n    const iconId = getIconId(icon, iconsetName);\n    const iconSvg = iconset._icons[iconId];\n    return {\n      preserveAspectRatio: iconSvg ? iconSvg.getAttribute('preserveAspectRatio') : null,\n      svg: cloneSvgNode(iconSvg),\n      size: iconset.size,\n      viewBox: iconSvg ? iconSvg.getAttribute('viewBox') : null\n    };\n  }\n\n  /**\n   * Register an iconset without adding to the DOM.\n   *\n   * @param {string} name\n   * @param {number} size\n   * @param {?HTMLTemplateElement} template\n   */\n  static register(name, size, template) {\n    if (!iconsetRegistry[name]) {\n      const iconset = document.createElement('vaadin-iconset');\n      iconset.appendChild(template.content.cloneNode(true));\n      iconsetRegistry[name] = iconset;\n      initIconsMap(iconset, name);\n      iconset.size = size;\n      iconset.name = name;\n\n      // Call this function manually instead of using observer\n      // to make it work without appending element to the DOM.\n      iconset.__nameChanged(name);\n    }\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n    this.style.display = 'none';\n\n    // Store reference and init icons.\n    const {\n      name\n    } = this;\n    iconsetRegistry[name] = this;\n    initIconsMap(this, name);\n    this.__updateIcons(name);\n  }\n\n  /**\n   * Update all the icons instances in the DOM.\n   *\n   * @param {string} name\n   * @private\n   */\n  __updateIcons(name) {\n    attachedIcons.forEach(element => {\n      if (name === getIconsetName(element.icon)) {\n        element._applyIcon();\n      }\n    });\n  }\n\n  /** @private */\n  __nameChanged(name, oldName) {\n    if (oldName) {\n      iconsetRegistry[name] = iconsetRegistry[oldName];\n      delete iconsetRegistry[oldName];\n    }\n    if (name) {\n      this.__updateIcons(name);\n    }\n  }\n}\ndefineCustomElement(Iconset);\nexport { Iconset };","map":{"version":3,"names":["PolymerElement","defineCustomElement","ElementMixin","cloneSvgNode","iconsetRegistry","attachedIcons","Set","getIconId","id","name","replace","getIconsetName","icon","parts","split","initIconsMap","iconset","_icons","querySelectorAll","reduce","map","svg","key","Iconset","template","is","properties","type","String","observer","size","Number","value","getIconset","getIconSvg","iconsetName","iconId","iconSvg","preserveAspectRatio","getAttribute","viewBox","register","document","createElement","appendChild","content","cloneNode","__nameChanged","connectedCallback","style","display","__updateIcons","forEach","element","_applyIcon","oldName"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/icon/src/vaadin-iconset.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { cloneSvgNode } from './vaadin-icon-svg.js';\n\nconst iconsetRegistry = {};\n\nconst attachedIcons = new Set();\n\nfunction getIconId(id, name) {\n  return (id || '').replace(`${name}:`, '');\n}\n\nfunction getIconsetName(icon) {\n  if (!icon) {\n    return;\n  }\n\n  const parts = icon.split(':');\n\n  // Use \"vaadin\" as a fallback\n  return parts[0] || 'vaadin';\n}\n\nfunction initIconsMap(iconset, name) {\n  iconset._icons = [...iconset.querySelectorAll('[id]')].reduce((map, svg) => {\n    const key = getIconId(svg.id, name);\n    map[key] = svg;\n    return map;\n  }, {});\n}\n\n/**\n * `<vaadin-iconset>` is a Web Component for creating SVG icon collections.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ElementMixin\n */\nclass Iconset extends ElementMixin(PolymerElement) {\n  static get template() {\n    return null;\n  }\n\n  static get is() {\n    return 'vaadin-iconset';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the iconset. Every iconset is required to have its own unique name.\n       * All the SVG icons in the iconset must have IDs conforming to its name.\n       *\n       * See also [`name`](#/elements/vaadin-icon#property-name) property of `vaadin-icon`.\n       */\n      name: {\n        type: String,\n        observer: '__nameChanged',\n      },\n\n      /**\n       * The size of an individual icon. Note that icons must be square.\n       *\n       * When using `vaadin-icon`, the size of the iconset will take precedence\n       * over the size defined by the user to ensure correct appearance.\n       */\n      size: {\n        type: Number,\n        value: 24,\n      },\n    };\n  }\n\n  /**\n   * Set of the `vaadin-icon` instances in the DOM.\n   *\n   * @return {Set<Icon>}\n   */\n  static get attachedIcons() {\n    return attachedIcons;\n  }\n\n  /**\n   * Returns an instance of the iconset by its name.\n   *\n   * @param {string} name\n   * @return {Iconset}\n   */\n  static getIconset(name) {\n    return iconsetRegistry[name];\n  }\n\n  /**\n   * Returns SVGTemplateResult for the `icon` ID matching `name` of the\n   * iconset, or `nothing` literal if there is no matching icon found.\n   *\n   * @param {string} icon\n   * @param {?string} name\n   */\n  static getIconSvg(icon, name) {\n    const iconsetName = name || getIconsetName(icon);\n    const iconset = this.getIconset(iconsetName);\n\n    if (!icon || !iconset) {\n      // Missing icon, return `nothing` literal.\n      return { svg: cloneSvgNode(null) };\n    }\n\n    const iconId = getIconId(icon, iconsetName);\n    const iconSvg = iconset._icons[iconId];\n\n    return {\n      preserveAspectRatio: iconSvg ? iconSvg.getAttribute('preserveAspectRatio') : null,\n      svg: cloneSvgNode(iconSvg),\n      size: iconset.size,\n      viewBox: iconSvg ? iconSvg.getAttribute('viewBox') : null,\n    };\n  }\n\n  /**\n   * Register an iconset without adding to the DOM.\n   *\n   * @param {string} name\n   * @param {number} size\n   * @param {?HTMLTemplateElement} template\n   */\n  static register(name, size, template) {\n    if (!iconsetRegistry[name]) {\n      const iconset = document.createElement('vaadin-iconset');\n      iconset.appendChild(template.content.cloneNode(true));\n      iconsetRegistry[name] = iconset;\n\n      initIconsMap(iconset, name);\n\n      iconset.size = size;\n      iconset.name = name;\n\n      // Call this function manually instead of using observer\n      // to make it work without appending element to the DOM.\n      iconset.__nameChanged(name);\n    }\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.style.display = 'none';\n\n    // Store reference and init icons.\n    const { name } = this;\n    iconsetRegistry[name] = this;\n    initIconsMap(this, name);\n    this.__updateIcons(name);\n  }\n\n  /**\n   * Update all the icons instances in the DOM.\n   *\n   * @param {string} name\n   * @private\n   */\n  __updateIcons(name) {\n    attachedIcons.forEach((element) => {\n      if (name === getIconsetName(element.icon)) {\n        element._applyIcon();\n      }\n    });\n  }\n\n  /** @private */\n  __nameChanged(name, oldName) {\n    if (oldName) {\n      iconsetRegistry[name] = iconsetRegistry[oldName];\n      delete iconsetRegistry[oldName];\n    }\n    if (name) {\n      this.__updateIcons(name);\n    }\n  }\n}\n\ndefineCustomElement(Iconset);\n\nexport { Iconset };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}