{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n  // \"Deletion\" columns\n  let rowCount = oldEnd - oldStart + 1;\n  let columnCount = currentEnd - currentStart + 1;\n  let distances = new Array(rowCount);\n\n  // \"Addition\" rows. Initialize null column.\n  for (let i = 0; i < rowCount; i++) {\n    distances[i] = new Array(columnCount);\n    distances[i][0] = i;\n  }\n\n  // Initialize null row\n  for (let j = 0; j < columnCount; j++) distances[0][j] = j;\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < columnCount; j++) {\n      if (equals(current[currentStart + j - 1], old[oldStart + i - 1])) distances[i][j] = distances[i - 1][j - 1];else {\n        let north = distances[i - 1][j] + 1;\n        let west = distances[i][j - 1] + 1;\n        distances[i][j] = north < west ? north : west;\n      }\n    }\n  }\n  return distances;\n}\n\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n  let i = distances.length - 1;\n  let j = distances[0].length - 1;\n  let current = distances[i][j];\n  let edits = [];\n  while (i > 0 || j > 0) {\n    if (i == 0) {\n      edits.push(EDIT_ADD);\n      j--;\n      continue;\n    }\n    if (j == 0) {\n      edits.push(EDIT_DELETE);\n      i--;\n      continue;\n    }\n    let northWest = distances[i - 1][j - 1];\n    let west = distances[i - 1][j];\n    let north = distances[i][j - 1];\n    let min;\n    if (west < north) min = west < northWest ? west : northWest;else min = north < northWest ? north : northWest;\n    if (min == northWest) {\n      if (northWest == current) {\n        edits.push(EDIT_LEAVE);\n      } else {\n        edits.push(EDIT_UPDATE);\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else if (min == west) {\n      edits.push(EDIT_DELETE);\n      i--;\n      current = west;\n    } else {\n      edits.push(EDIT_ADD);\n      j--;\n      current = north;\n    }\n  }\n  edits.reverse();\n  return edits;\n}\n\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n\n/**\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n *\n * @param {!Array} current The current \"changed\" array for which to\n * calculate splices.\n * @param {number} currentStart Starting index in the `current` array for\n * which splices are calculated.\n * @param {number} currentEnd Ending index in the `current` array for\n * which splices are calculated.\n * @param {!Array} old The original \"unchanged\" array to compare `current`\n * against to determine splices.\n * @param {number} oldStart Starting index in the `old` array for\n * which splices are calculated.\n * @param {number} oldEnd Ending index in the `old` array for\n * which splices are calculated.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nfunction calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n  let prefixCount = 0;\n  let suffixCount = 0;\n  let splice;\n  let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n  if (currentStart == 0 && oldStart == 0) prefixCount = sharedPrefix(current, old, minLength);\n  if (currentEnd == current.length && oldEnd == old.length) suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n  currentStart += prefixCount;\n  oldStart += prefixCount;\n  currentEnd -= suffixCount;\n  oldEnd -= suffixCount;\n  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0) return [];\n  if (currentStart == currentEnd) {\n    splice = newSplice(currentStart, [], 0);\n    while (oldStart < oldEnd) splice.removed.push(old[oldStart++]);\n    return [splice];\n  } else if (oldStart == oldEnd) return [newSplice(currentStart, [], currentEnd - currentStart)];\n  let ops = spliceOperationsFromEditDistances(calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));\n  splice = undefined;\n  let splices = [];\n  let index = currentStart;\n  let oldIndex = oldStart;\n  for (let i = 0; i < ops.length; i++) {\n    switch (ops[i]) {\n      case EDIT_LEAVE:\n        if (splice) {\n          splices.push(splice);\n          splice = undefined;\n        }\n        index++;\n        oldIndex++;\n        break;\n      case EDIT_UPDATE:\n        if (!splice) splice = newSplice(index, [], 0);\n        splice.addedCount++;\n        index++;\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n      case EDIT_ADD:\n        if (!splice) splice = newSplice(index, [], 0);\n        splice.addedCount++;\n        index++;\n        break;\n      case EDIT_DELETE:\n        if (!splice) splice = newSplice(index, [], 0);\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n    }\n  }\n  if (splice) {\n    splices.push(splice);\n  }\n  return splices;\n}\nfunction sharedPrefix(current, old, searchLength) {\n  for (let i = 0; i < searchLength; i++) if (!equals(current[i], old[i])) return i;\n  return searchLength;\n}\nfunction sharedSuffix(current, old, searchLength) {\n  let index1 = current.length;\n  let index2 = old.length;\n  let count = 0;\n  while (count < searchLength && equals(current[--index1], old[--index2])) count++;\n  return count;\n}\n\n/**\n * Returns an array of splice records indicating the minimum edits required\n * to transform the `previous` array into the `current` array.\n *\n * Splice records are ordered by index and contain the following fields:\n * - `index`: index where edit started\n * - `removed`: array of removed items from this index\n * - `addedCount`: number of items added at this index\n *\n * This function is based on the Levenshtein \"minimum edit distance\"\n * algorithm. Note that updates are treated as removal followed by addition.\n *\n * The worst-case time complexity of this algorithm is `O(l * p)`\n *   l: The length of the current array\n *   p: The length of the previous array\n *\n * However, the worst-case complexity is reduced by an `O(n)` optimization\n * to detect any shared prefix & suffix between the two arrays and only\n * perform the more expensive minimum edit distance calculation over the\n * non-shared portions of the arrays.\n *\n * @function\n * @param {!Array} current The \"changed\" array for which splices will be\n * calculated.\n * @param {!Array} previous The \"unchanged\" original array to compare\n * `current` against to determine the splices.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nexport function calculateSplices(current, previous) {\n  return calcSplices(current, 0, current.length, previous, 0, previous.length);\n}\nfunction equals(currentValue, previousValue) {\n  return currentValue === previousValue;\n}","map":{"version":3,"names":["newSplice","index","removed","addedCount","EDIT_LEAVE","EDIT_UPDATE","EDIT_ADD","EDIT_DELETE","calcEditDistances","current","currentStart","currentEnd","old","oldStart","oldEnd","rowCount","columnCount","distances","Array","i","j","equals","north","west","spliceOperationsFromEditDistances","length","edits","push","northWest","min","reverse","calcSplices","prefixCount","suffixCount","splice","minLength","Math","sharedPrefix","sharedSuffix","ops","undefined","splices","oldIndex","searchLength","index1","index2","count","calculateSplices","previous","currentValue","previousValue"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@polymer/polymer/lib/utils/array-splice.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd,\n                            old, oldStart, oldEnd) {\n  // \"Deletion\" columns\n  let rowCount = oldEnd - oldStart + 1;\n  let columnCount = currentEnd - currentStart + 1;\n  let distances = new Array(rowCount);\n\n  // \"Addition\" rows. Initialize null column.\n  for (let i = 0; i < rowCount; i++) {\n    distances[i] = new Array(columnCount);\n    distances[i][0] = i;\n  }\n\n  // Initialize null row\n  for (let j = 0; j < columnCount; j++)\n    distances[0][j] = j;\n\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < columnCount; j++) {\n      if (equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n        distances[i][j] = distances[i - 1][j - 1];\n      else {\n        let north = distances[i - 1][j] + 1;\n        let west = distances[i][j - 1] + 1;\n        distances[i][j] = north < west ? north : west;\n      }\n    }\n  }\n\n  return distances;\n}\n\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n  let i = distances.length - 1;\n  let j = distances[0].length - 1;\n  let current = distances[i][j];\n  let edits = [];\n  while (i > 0 || j > 0) {\n    if (i == 0) {\n      edits.push(EDIT_ADD);\n      j--;\n      continue;\n    }\n    if (j == 0) {\n      edits.push(EDIT_DELETE);\n      i--;\n      continue;\n    }\n    let northWest = distances[i - 1][j - 1];\n    let west = distances[i - 1][j];\n    let north = distances[i][j - 1];\n\n    let min;\n    if (west < north)\n      min = west < northWest ? west : northWest;\n    else\n      min = north < northWest ? north : northWest;\n\n    if (min == northWest) {\n      if (northWest == current) {\n        edits.push(EDIT_LEAVE);\n      } else {\n        edits.push(EDIT_UPDATE);\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else if (min == west) {\n      edits.push(EDIT_DELETE);\n      i--;\n      current = west;\n    } else {\n      edits.push(EDIT_ADD);\n      j--;\n      current = north;\n    }\n  }\n\n  edits.reverse();\n  return edits;\n}\n\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n\n/**\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n *\n * @param {!Array} current The current \"changed\" array for which to\n * calculate splices.\n * @param {number} currentStart Starting index in the `current` array for\n * which splices are calculated.\n * @param {number} currentEnd Ending index in the `current` array for\n * which splices are calculated.\n * @param {!Array} old The original \"unchanged\" array to compare `current`\n * against to determine splices.\n * @param {number} oldStart Starting index in the `old` array for\n * which splices are calculated.\n * @param {number} oldEnd Ending index in the `old` array for\n * which splices are calculated.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nfunction calcSplices(current, currentStart, currentEnd,\n                      old, oldStart, oldEnd) {\n  let prefixCount = 0;\n  let suffixCount = 0;\n  let splice;\n\n  let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n  if (currentStart == 0 && oldStart == 0)\n    prefixCount = sharedPrefix(current, old, minLength);\n\n  if (currentEnd == current.length && oldEnd == old.length)\n    suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n  currentStart += prefixCount;\n  oldStart += prefixCount;\n  currentEnd -= suffixCount;\n  oldEnd -= suffixCount;\n\n  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n    return [];\n\n  if (currentStart == currentEnd) {\n    splice = newSplice(currentStart, [], 0);\n    while (oldStart < oldEnd)\n      splice.removed.push(old[oldStart++]);\n\n    return [ splice ];\n  } else if (oldStart == oldEnd)\n    return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n  let ops = spliceOperationsFromEditDistances(\n      calcEditDistances(current, currentStart, currentEnd,\n                             old, oldStart, oldEnd));\n\n  splice = undefined;\n  let splices = [];\n  let index = currentStart;\n  let oldIndex = oldStart;\n  for (let i = 0; i < ops.length; i++) {\n    switch(ops[i]) {\n      case EDIT_LEAVE:\n        if (splice) {\n          splices.push(splice);\n          splice = undefined;\n        }\n\n        index++;\n        oldIndex++;\n        break;\n      case EDIT_UPDATE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n      case EDIT_ADD:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n        break;\n      case EDIT_DELETE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n    }\n  }\n\n  if (splice) {\n    splices.push(splice);\n  }\n  return splices;\n}\n\nfunction sharedPrefix(current, old, searchLength) {\n  for (let i = 0; i < searchLength; i++)\n    if (!equals(current[i], old[i]))\n      return i;\n  return searchLength;\n}\n\nfunction sharedSuffix(current, old, searchLength) {\n  let index1 = current.length;\n  let index2 = old.length;\n  let count = 0;\n  while (count < searchLength && equals(current[--index1], old[--index2]))\n    count++;\n\n  return count;\n}\n\n/**\n * Returns an array of splice records indicating the minimum edits required\n * to transform the `previous` array into the `current` array.\n *\n * Splice records are ordered by index and contain the following fields:\n * - `index`: index where edit started\n * - `removed`: array of removed items from this index\n * - `addedCount`: number of items added at this index\n *\n * This function is based on the Levenshtein \"minimum edit distance\"\n * algorithm. Note that updates are treated as removal followed by addition.\n *\n * The worst-case time complexity of this algorithm is `O(l * p)`\n *   l: The length of the current array\n *   p: The length of the previous array\n *\n * However, the worst-case complexity is reduced by an `O(n)` optimization\n * to detect any shared prefix & suffix between the two arrays and only\n * perform the more expensive minimum edit distance calculation over the\n * non-shared portions of the arrays.\n *\n * @function\n * @param {!Array} current The \"changed\" array for which splices will be\n * calculated.\n * @param {!Array} previous The \"unchanged\" original array to compare\n * `current` against to determine the splices.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nexport function calculateSplices(current, previous) {\n  return calcSplices(current, 0, current.length, previous, 0,\n                          previous.length);\n}\n\nfunction equals(currentValue, previousValue) {\n  return currentValue === previousValue;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}