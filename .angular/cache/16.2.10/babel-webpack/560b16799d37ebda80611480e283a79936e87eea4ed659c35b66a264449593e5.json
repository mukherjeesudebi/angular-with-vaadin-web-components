{"ast":null,"code":"/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport { PropertyAccessors } from './property-accessors.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nconst HOST_DIR = /:host\\(:dir\\((ltr|rtl)\\)\\)/g;\nconst HOST_DIR_REPLACMENT = ':host([dir=\"$1\"])';\nconst EL_DIR = /([\\s\\w-#\\.\\[\\]\\*]*):dir\\((ltr|rtl)\\)/g;\nconst EL_DIR_REPLACMENT = ':host([dir=\"$2\"]) $1';\nconst DIR_CHECK = /:dir\\((?:ltr|rtl)\\)/;\nconst SHIM_SHADOW = Boolean(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n\n/**\n * @type {!Array<!Polymer_DirMixin>}\n */\nconst DIR_INSTANCES = [];\n\n/** @type {?MutationObserver} */\nlet observer = null;\nlet DOCUMENT_DIR = '';\nfunction getRTL() {\n  DOCUMENT_DIR = document.documentElement.getAttribute('dir');\n}\n\n/**\n * @param {!Polymer_DirMixin} instance Instance to set RTL status on\n */\nfunction setRTL(instance) {\n  if (!instance.__autoDirOptOut) {\n    const el = /** @type {!HTMLElement} */instance;\n    el.setAttribute('dir', DOCUMENT_DIR);\n  }\n}\nfunction updateDirection() {\n  getRTL();\n  DOCUMENT_DIR = document.documentElement.getAttribute('dir');\n  for (let i = 0; i < DIR_INSTANCES.length; i++) {\n    setRTL(DIR_INSTANCES[i]);\n  }\n}\nfunction takeRecords() {\n  if (observer && observer.takeRecords().length) {\n    updateDirection();\n  }\n}\n\n/**\n * Element class mixin that allows elements to use the `:dir` CSS Selector to\n * have text direction specific styling.\n *\n * With this mixin, any stylesheet provided in the template will transform\n * `:dir` into `:host([dir])` and sync direction with the page via the\n * element's `dir` attribute.\n *\n * Elements can opt out of the global page text direction by setting the `dir`\n * attribute directly in `ready()` or in HTML.\n *\n * Caveats:\n * - Applications must set `<html dir=\"ltr\">` or `<html dir=\"rtl\">` to sync\n *   direction\n * - Automatic left-to-right or right-to-left styling is sync'd with the\n *   `<html>` element only.\n * - Changing `dir` at runtime is supported.\n * - Opting out of the global direction styling is permanent\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyAccessors\n */\nexport const DirMixin = dedupingMixin(base => {\n  if (!SHIM_SHADOW) {\n    if (!observer) {\n      getRTL();\n      observer = new MutationObserver(updateDirection);\n      observer.observe(document.documentElement, {\n        attributes: true,\n        attributeFilter: ['dir']\n      });\n    }\n  }\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @private\n   */\n  const elementBase = PropertyAccessors(base);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_DirMixin}\n   */\n  class Dir extends elementBase {\n    /**\n     * @param {string} cssText .\n     * @param {string} baseURI .\n     * @return {string} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _processStyleText(cssText, baseURI) {\n      cssText = super._processStyleText(cssText, baseURI);\n      if (!SHIM_SHADOW && DIR_CHECK.test(cssText)) {\n        cssText = this._replaceDirInCssText(cssText);\n        this.__activateDir = true;\n      }\n      return cssText;\n    }\n\n    /**\n     * Replace `:dir` in the given CSS text\n     *\n     * @param {string} text CSS text to replace DIR\n     * @return {string} Modified CSS\n     */\n    static _replaceDirInCssText(text) {\n      let replacedText = text;\n      replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT);\n      replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT);\n      return replacedText;\n    }\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__autoDirOptOut = false;\n    }\n\n    /**\n     * @override\n     * @suppress {invalidCasts} Closure doesn't understand that `this` is an\n     *     HTMLElement\n     * @return {void}\n     */\n    ready() {\n      super.ready();\n      this.__autoDirOptOut = /** @type {!HTMLElement} */this.hasAttribute('dir');\n    }\n\n    /**\n     * @override\n     * @suppress {missingProperties} If it exists on elementBase, it can be\n     *   super'd\n     * @return {void}\n     */\n    connectedCallback() {\n      if (elementBase.prototype.connectedCallback) {\n        super.connectedCallback();\n      }\n      if (this.constructor.__activateDir) {\n        takeRecords();\n        DIR_INSTANCES.push(this);\n        setRTL(this);\n      }\n    }\n\n    /**\n     * @override\n     * @suppress {missingProperties} If it exists on elementBase, it can be\n     *   super'd\n     * @return {void}\n     */\n    disconnectedCallback() {\n      if (elementBase.prototype.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n      if (this.constructor.__activateDir) {\n        const idx = DIR_INSTANCES.indexOf(this);\n        if (idx > -1) {\n          DIR_INSTANCES.splice(idx, 1);\n        }\n      }\n    }\n  }\n  Dir.__activateDir = false;\n  return Dir;\n});","map":{"version":3,"names":["PropertyAccessors","dedupingMixin","HOST_DIR","HOST_DIR_REPLACMENT","EL_DIR","EL_DIR_REPLACMENT","DIR_CHECK","SHIM_SHADOW","Boolean","window","DIR_INSTANCES","observer","DOCUMENT_DIR","getRTL","document","documentElement","getAttribute","setRTL","instance","__autoDirOptOut","el","setAttribute","updateDirection","i","length","takeRecords","DirMixin","base","MutationObserver","observe","attributes","attributeFilter","elementBase","Dir","_processStyleText","cssText","baseURI","test","_replaceDirInCssText","__activateDir","text","replacedText","replace","constructor","ready","hasAttribute","connectedCallback","prototype","push","disconnectedCallback","idx","indexOf","splice"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@polymer/polymer/lib/mixins/dir-mixin.js"],"sourcesContent":["/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport { PropertyAccessors } from './property-accessors.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\nconst HOST_DIR = /:host\\(:dir\\((ltr|rtl)\\)\\)/g;\nconst HOST_DIR_REPLACMENT = ':host([dir=\"$1\"])';\n\nconst EL_DIR = /([\\s\\w-#\\.\\[\\]\\*]*):dir\\((ltr|rtl)\\)/g;\nconst EL_DIR_REPLACMENT = ':host([dir=\"$2\"]) $1';\n\nconst DIR_CHECK = /:dir\\((?:ltr|rtl)\\)/;\n\nconst SHIM_SHADOW = Boolean(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n\n/**\n * @type {!Array<!Polymer_DirMixin>}\n */\nconst DIR_INSTANCES = [];\n\n/** @type {?MutationObserver} */\nlet observer = null;\n\nlet DOCUMENT_DIR = '';\n\nfunction getRTL() {\n  DOCUMENT_DIR = document.documentElement.getAttribute('dir');\n}\n\n/**\n * @param {!Polymer_DirMixin} instance Instance to set RTL status on\n */\nfunction setRTL(instance) {\n  if (!instance.__autoDirOptOut) {\n    const el = /** @type {!HTMLElement} */(instance);\n    el.setAttribute('dir', DOCUMENT_DIR);\n  }\n}\n\nfunction updateDirection() {\n  getRTL();\n  DOCUMENT_DIR = document.documentElement.getAttribute('dir');\n  for (let i = 0; i < DIR_INSTANCES.length; i++) {\n    setRTL(DIR_INSTANCES[i]);\n  }\n}\n\nfunction takeRecords() {\n  if (observer && observer.takeRecords().length) {\n    updateDirection();\n  }\n}\n\n/**\n * Element class mixin that allows elements to use the `:dir` CSS Selector to\n * have text direction specific styling.\n *\n * With this mixin, any stylesheet provided in the template will transform\n * `:dir` into `:host([dir])` and sync direction with the page via the\n * element's `dir` attribute.\n *\n * Elements can opt out of the global page text direction by setting the `dir`\n * attribute directly in `ready()` or in HTML.\n *\n * Caveats:\n * - Applications must set `<html dir=\"ltr\">` or `<html dir=\"rtl\">` to sync\n *   direction\n * - Automatic left-to-right or right-to-left styling is sync'd with the\n *   `<html>` element only.\n * - Changing `dir` at runtime is supported.\n * - Opting out of the global direction styling is permanent\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyAccessors\n */\nexport const DirMixin = dedupingMixin((base) => {\n\n  if (!SHIM_SHADOW) {\n    if (!observer) {\n      getRTL();\n      observer = new MutationObserver(updateDirection);\n      observer.observe(document.documentElement, {attributes: true, attributeFilter: ['dir']});\n    }\n  }\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @private\n   */\n  const elementBase = PropertyAccessors(base);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_DirMixin}\n   */\n  class Dir extends elementBase {\n\n    /**\n     * @param {string} cssText .\n     * @param {string} baseURI .\n     * @return {string} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _processStyleText(cssText, baseURI) {\n      cssText = super._processStyleText(cssText, baseURI);\n      if (!SHIM_SHADOW && DIR_CHECK.test(cssText)) {\n        cssText = this._replaceDirInCssText(cssText);\n        this.__activateDir = true;\n      }\n      return cssText;\n    }\n\n    /**\n     * Replace `:dir` in the given CSS text\n     *\n     * @param {string} text CSS text to replace DIR\n     * @return {string} Modified CSS\n     */\n    static _replaceDirInCssText(text) {\n      let replacedText = text;\n      replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT);\n      replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT);\n      return replacedText;\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__autoDirOptOut = false;\n    }\n\n    /**\n     * @override\n     * @suppress {invalidCasts} Closure doesn't understand that `this` is an\n     *     HTMLElement\n     * @return {void}\n     */\n    ready() {\n      super.ready();\n      this.__autoDirOptOut = /** @type {!HTMLElement} */(this).hasAttribute('dir');\n    }\n\n    /**\n     * @override\n     * @suppress {missingProperties} If it exists on elementBase, it can be\n     *   super'd\n     * @return {void}\n     */\n    connectedCallback() {\n      if (elementBase.prototype.connectedCallback) {\n        super.connectedCallback();\n      }\n      if (this.constructor.__activateDir) {\n        takeRecords();\n        DIR_INSTANCES.push(this);\n        setRTL(this);\n      }\n    }\n\n    /**\n     * @override\n     * @suppress {missingProperties} If it exists on elementBase, it can be\n     *   super'd\n     * @return {void}\n     */\n    disconnectedCallback() {\n      if (elementBase.prototype.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n      if (this.constructor.__activateDir) {\n        const idx = DIR_INSTANCES.indexOf(this);\n        if (idx > -1) {\n          DIR_INSTANCES.splice(idx, 1);\n        }\n      }\n    }\n  }\n\n  Dir.__activateDir = false;\n\n  return Dir;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}