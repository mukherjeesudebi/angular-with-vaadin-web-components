{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @param {!Element} target\n * @return {boolean}\n * @protected\n */\nexport const isFocusable = target => {\n  if (!target.parentNode) {\n    return false;\n  }\n  const focusables = Array.from(target.parentNode.querySelectorAll('[tabindex], button, input, select, textarea, object, iframe, a[href], area[href]')).filter(element => {\n    const part = element.getAttribute('part');\n    return !(part && part.includes('body-cell'));\n  });\n  const isFocusableElement = focusables.includes(target);\n  return !target.disabled && isFocusableElement && target.offsetParent && getComputedStyle(target).visibility !== 'hidden';\n};\n\n/**\n * @polymerMixin\n */\nexport const ActiveItemMixin = superClass => class ActiveItemMixin extends superClass {\n  static get properties() {\n    return {\n      /**\n       * The item user has last interacted with. Turns to `null` after user deactivates\n       * the item by re-interacting with the currently active item.\n       * @type {GridItem}\n       */\n      activeItem: {\n        type: Object,\n        notify: true,\n        value: null\n      }\n    };\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.$.scroller.addEventListener('click', this._onClick.bind(this));\n    this.addEventListener('cell-activate', this._activateItem.bind(this));\n    this.addEventListener('row-activate', this._activateItem.bind(this));\n  }\n\n  /** @private */\n  _activateItem(e) {\n    const model = e.detail.model;\n    const clickedItem = model ? model.item : null;\n    if (clickedItem) {\n      this.activeItem = !this._itemsEqual(this.activeItem, clickedItem) ? clickedItem : null;\n    }\n  }\n\n  /**\n   * We need to listen to click instead of tap because on mobile safari, the\n   * document.activeElement has not been updated (focus has not been shifted)\n   * yet at the point when tap event is being executed.\n   * @param {!MouseEvent} e\n   * @protected\n   */\n  _onClick(e) {\n    if (e.defaultPrevented) {\n      // Something has handled this click already, e. g., <vaadin-grid-sorter>\n      return;\n    }\n    const path = e.composedPath();\n    const cell = path[path.indexOf(this.$.table) - 3];\n    if (!cell || cell.getAttribute('part').indexOf('details-cell') > -1) {\n      return;\n    }\n    const cellContent = cell._content;\n    const activeElement = this.getRootNode().activeElement;\n    const cellContentHasFocus = cellContent.contains(activeElement);\n    if (!cellContentHasFocus && !this._isFocusable(e.target) && !(e.target instanceof HTMLLabelElement)) {\n      this.dispatchEvent(new CustomEvent('cell-activate', {\n        detail: {\n          model: this.__getRowModel(cell.parentElement)\n        }\n      }));\n    }\n  }\n\n  /**\n   * @param {!Element} target\n   * @return {boolean}\n   * @protected\n   */\n  _isFocusable(target) {\n    return isFocusable(target);\n  }\n\n  /**\n   * Fired when the `activeItem` property changes.\n   *\n   * @event active-item-changed\n   */\n\n  /**\n   * Fired when the cell is activated with click or keyboard.\n   *\n   * @event cell-activate\n   */\n};","map":{"version":3,"names":["isFocusable","target","parentNode","focusables","Array","from","querySelectorAll","filter","element","part","getAttribute","includes","isFocusableElement","disabled","offsetParent","getComputedStyle","visibility","ActiveItemMixin","superClass","properties","activeItem","type","Object","notify","value","ready","$","scroller","addEventListener","_onClick","bind","_activateItem","e","model","detail","clickedItem","item","_itemsEqual","defaultPrevented","path","composedPath","cell","indexOf","table","cellContent","_content","activeElement","getRootNode","cellContentHasFocus","contains","_isFocusable","HTMLLabelElement","dispatchEvent","CustomEvent","__getRowModel","parentElement"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/grid/src/vaadin-grid-active-item-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @param {!Element} target\n * @return {boolean}\n * @protected\n */\nexport const isFocusable = (target) => {\n  if (!target.parentNode) {\n    return false;\n  }\n  const focusables = Array.from(\n    target.parentNode.querySelectorAll(\n      '[tabindex], button, input, select, textarea, object, iframe, a[href], area[href]',\n    ),\n  ).filter((element) => {\n    const part = element.getAttribute('part');\n    return !(part && part.includes('body-cell'));\n  });\n\n  const isFocusableElement = focusables.includes(target);\n  return (\n    !target.disabled && isFocusableElement && target.offsetParent && getComputedStyle(target).visibility !== 'hidden'\n  );\n};\n\n/**\n * @polymerMixin\n */\nexport const ActiveItemMixin = (superClass) =>\n  class ActiveItemMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * The item user has last interacted with. Turns to `null` after user deactivates\n         * the item by re-interacting with the currently active item.\n         * @type {GridItem}\n         */\n        activeItem: {\n          type: Object,\n          notify: true,\n          value: null,\n        },\n      };\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.$.scroller.addEventListener('click', this._onClick.bind(this));\n      this.addEventListener('cell-activate', this._activateItem.bind(this));\n      this.addEventListener('row-activate', this._activateItem.bind(this));\n    }\n\n    /** @private */\n    _activateItem(e) {\n      const model = e.detail.model;\n      const clickedItem = model ? model.item : null;\n\n      if (clickedItem) {\n        this.activeItem = !this._itemsEqual(this.activeItem, clickedItem) ? clickedItem : null;\n      }\n    }\n\n    /**\n     * We need to listen to click instead of tap because on mobile safari, the\n     * document.activeElement has not been updated (focus has not been shifted)\n     * yet at the point when tap event is being executed.\n     * @param {!MouseEvent} e\n     * @protected\n     */\n    _onClick(e) {\n      if (e.defaultPrevented) {\n        // Something has handled this click already, e. g., <vaadin-grid-sorter>\n        return;\n      }\n\n      const path = e.composedPath();\n      const cell = path[path.indexOf(this.$.table) - 3];\n      if (!cell || cell.getAttribute('part').indexOf('details-cell') > -1) {\n        return;\n      }\n      const cellContent = cell._content;\n\n      const activeElement = this.getRootNode().activeElement;\n      const cellContentHasFocus = cellContent.contains(activeElement);\n      if (!cellContentHasFocus && !this._isFocusable(e.target) && !(e.target instanceof HTMLLabelElement)) {\n        this.dispatchEvent(\n          new CustomEvent('cell-activate', {\n            detail: {\n              model: this.__getRowModel(cell.parentElement),\n            },\n          }),\n        );\n      }\n    }\n\n    /**\n     * @param {!Element} target\n     * @return {boolean}\n     * @protected\n     */\n    _isFocusable(target) {\n      return isFocusable(target);\n    }\n\n    /**\n     * Fired when the `activeItem` property changes.\n     *\n     * @event active-item-changed\n     */\n\n    /**\n     * Fired when the cell is activated with click or keyboard.\n     *\n     * @event cell-activate\n     */\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}