{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\nimport { wrap } from './wrap.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {!Node} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return node.localName === 'slot';\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * An example:\n * ```js\n * class TestSelfObserve extends PolymerElement {\n *   static get is() { return 'test-self-observe';}\n *   connectedCallback() {\n *     super.connectedCallback();\n *     this._observer = new FlattenedNodesObserver(this, (info) => {\n *       this.info = info;\n *     });\n *   }\n *   disconnectedCallback() {\n *     super.disconnectedCallback();\n *     this._observer.disconnect();\n *   }\n * }\n * customElements.define(TestSelfObserve.is, TestSelfObserve);\n * ```\n *\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n * @implements {PolymerDomApi.ObserveHandle}\n */\nexport let FlattenedNodesObserver = class {\n  /**\n   * Returns the list of flattened nodes for the given `node`.\n   * This list consists of a node's children and, for any children\n   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to\n   *      return the list of flattened nodes.\n   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.\n   * @nocollapse See https://github.com/google/closure-compiler/issues/2763\n   */\n  // eslint-disable-next-line\n  static getFlattenedNodes(node) {\n    const wrapped = wrap(node);\n    if (isSlot(node)) {\n      node = /** @type {!HTMLSlotElement} */node; // eslint-disable-line no-self-assign\n      return wrapped.assignedNodes({\n        flatten: true\n      });\n    } else {\n      return Array.from(wrapped.childNodes).map(node => {\n        if (isSlot(node)) {\n          node = /** @type {!HTMLSlotElement} */node; // eslint-disable-line no-self-assign\n          return wrap(node).assignedNodes({\n            flatten: true\n          });\n        } else {\n          return [node];\n        }\n      }).reduce((a, b) => a.concat(b), []);\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} target Node on which to listen for changes.\n   * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   */\n  // eslint-disable-next-line\n  constructor(target, callback) {\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._shadyChildrenObserver = null;\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    /**\n     * @type {!HTMLElement}\n     * @private\n     */\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /**\n     * @type {function()}\n     * @private\n     */\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   *\n   * @return {void}\n   */\n  connect() {\n    if (isSlot(this._target)) {\n      this._listenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._listenSlots( /** @type {!NodeList<!Node>} */wrap(this._target).children);\n      if (window.ShadyDOM) {\n        this._shadyChildrenObserver = window.ShadyDOM.observeChildren(this._target, mutations => {\n          this._processMutations(mutations);\n        });\n      } else {\n        this._nativeChildrenObserver = new MutationObserver(mutations => {\n          this._processMutations(mutations);\n        });\n        this._nativeChildrenObserver.observe(this._target, {\n          childList: true\n        });\n      }\n    }\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the flattened nodes observer. After calling this method\n   * the observer callback will not be called when changes to flattened nodes\n   * occur. The `connect` method may be subsequently called to reactivate\n   * the observer.\n   *\n   * @return {void}\n   * @override\n   */\n  disconnect() {\n    if (isSlot(this._target)) {\n      this._unlistenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._unlistenSlots( /** @type {!NodeList<!Node>} */wrap(this._target).children);\n      if (window.ShadyDOM && this._shadyChildrenObserver) {\n        window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n        this._shadyChildrenObserver = null;\n      } else if (this._nativeChildrenObserver) {\n        this._nativeChildrenObserver.disconnect();\n        this._nativeChildrenObserver = null;\n      }\n    }\n    this._connected = false;\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      microTask.run(() => this.flush());\n    }\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processMutations(mutations) {\n    this._processSlotMutations(mutations);\n    this.flush();\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processSlotMutations(mutations) {\n    if (mutations) {\n      for (let i = 0; i < mutations.length; i++) {\n        let mutation = mutations[i];\n        if (mutation.addedNodes) {\n          this._listenSlots(mutation.addedNodes);\n        }\n        if (mutation.removedNodes) {\n          this._unlistenSlots(mutation.removedNodes);\n        }\n      }\n    }\n  }\n\n  /**\n   * Flushes the observer causing any pending changes to be immediately\n   * delivered the observer callback. By default these changes are delivered\n   * asynchronously at the next microtask checkpoint.\n   *\n   * @return {boolean} Returns true if any pending changes caused the observer\n   * callback to run.\n   */\n  flush() {\n    if (!this._connected) {\n      return false;\n    }\n    if (window.ShadyDOM) {\n      ShadyDOM.flush();\n    }\n    if (this._nativeChildrenObserver) {\n      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n    } else if (this._shadyChildrenObserver) {\n      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n    }\n    this._scheduled = false;\n    let info = {\n      target: this._target,\n      addedNodes: [],\n      removedNodes: []\n    };\n    let newNodes = this.constructor.getFlattenedNodes(this._target);\n    let splices = calculateSplices(newNodes, this._effectiveNodes);\n    // process removals\n    for (let i = 0, s; i < splices.length && (s = splices[i]); i++) {\n      for (let j = 0, n; j < s.removed.length && (n = s.removed[j]); j++) {\n        info.removedNodes.push(n);\n      }\n    }\n    // process adds\n    for (let i = 0, s; i < splices.length && (s = splices[i]); i++) {\n      for (let j = s.index; j < s.index + s.addedCount; j++) {\n        info.addedNodes.push(newNodes[j]);\n      }\n    }\n    // update cache\n    this._effectiveNodes = newNodes;\n    let didFlush = false;\n    if (info.addedNodes.length || info.removedNodes.length) {\n      didFlush = true;\n      this.callback.call(this._target, info);\n    }\n    return didFlush;\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _listenSlots(nodeList) {\n    for (let i = 0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.addEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _unlistenSlots(nodeList) {\n    for (let i = 0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.removeEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n};","map":{"version":3,"names":["calculateSplices","microTask","wrap","isSlot","node","localName","FlattenedNodesObserver","getFlattenedNodes","wrapped","assignedNodes","flatten","Array","from","childNodes","map","reduce","a","b","concat","constructor","target","callback","_shadyChildrenObserver","_nativeChildrenObserver","_connected","_target","_effectiveNodes","_observer","_scheduled","_boundSchedule","_schedule","connect","_listenSlots","children","window","ShadyDOM","observeChildren","mutations","_processMutations","MutationObserver","observe","childList","disconnect","_unlistenSlots","unobserveChildren","run","flush","_processSlotMutations","i","length","mutation","addedNodes","removedNodes","takeRecords","info","newNodes","splices","s","j","n","removed","push","index","addedCount","didFlush","call","nodeList","addEventListener","removeEventListener"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@polymer/polymer/lib/utils/flattened-nodes-observer.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\nimport { wrap } from './wrap.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {!Node} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return (node.localName === 'slot');\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * An example:\n * ```js\n * class TestSelfObserve extends PolymerElement {\n *   static get is() { return 'test-self-observe';}\n *   connectedCallback() {\n *     super.connectedCallback();\n *     this._observer = new FlattenedNodesObserver(this, (info) => {\n *       this.info = info;\n *     });\n *   }\n *   disconnectedCallback() {\n *     super.disconnectedCallback();\n *     this._observer.disconnect();\n *   }\n * }\n * customElements.define(TestSelfObserve.is, TestSelfObserve);\n * ```\n *\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n * @implements {PolymerDomApi.ObserveHandle}\n */\nexport let FlattenedNodesObserver = class {\n\n  /**\n   * Returns the list of flattened nodes for the given `node`.\n   * This list consists of a node's children and, for any children\n   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to\n   *      return the list of flattened nodes.\n   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.\n   * @nocollapse See https://github.com/google/closure-compiler/issues/2763\n   */\n  // eslint-disable-next-line\n  static getFlattenedNodes(node) {\n    const wrapped = wrap(node);\n    if (isSlot(node)) {\n      node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n      return wrapped.assignedNodes({flatten: true});\n    } else {\n      return Array.from(wrapped.childNodes).map((node) => {\n        if (isSlot(node)) {\n          node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n          return wrap(node).assignedNodes({flatten: true});\n        } else {\n          return [node];\n        }\n      }).reduce((a, b) => a.concat(b), []);\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} target Node on which to listen for changes.\n   * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   */\n  // eslint-disable-next-line\n  constructor(target, callback) {\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._shadyChildrenObserver = null;\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    /**\n     * @type {!HTMLElement}\n     * @private\n     */\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /**\n     * @type {function()}\n     * @private\n     */\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   *\n   * @return {void}\n   */\n  connect() {\n    if (isSlot(this._target)) {\n      this._listenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._listenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM) {\n        this._shadyChildrenObserver =\n          window.ShadyDOM.observeChildren(this._target, (mutations) => {\n            this._processMutations(mutations);\n          });\n      } else {\n        this._nativeChildrenObserver =\n          new MutationObserver((mutations) => {\n            this._processMutations(mutations);\n          });\n        this._nativeChildrenObserver.observe(this._target, {childList: true});\n      }\n    }\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the flattened nodes observer. After calling this method\n   * the observer callback will not be called when changes to flattened nodes\n   * occur. The `connect` method may be subsequently called to reactivate\n   * the observer.\n   *\n   * @return {void}\n   * @override\n   */\n  disconnect() {\n    if (isSlot(this._target)) {\n      this._unlistenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._unlistenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM && this._shadyChildrenObserver) {\n        window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n        this._shadyChildrenObserver = null;\n      } else if (this._nativeChildrenObserver) {\n        this._nativeChildrenObserver.disconnect();\n        this._nativeChildrenObserver = null;\n      }\n    }\n    this._connected = false;\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      microTask.run(() => this.flush());\n    }\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processMutations(mutations) {\n    this._processSlotMutations(mutations);\n    this.flush();\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processSlotMutations(mutations) {\n    if (mutations) {\n      for (let i=0; i < mutations.length; i++) {\n        let mutation = mutations[i];\n        if (mutation.addedNodes) {\n          this._listenSlots(mutation.addedNodes);\n        }\n        if (mutation.removedNodes) {\n          this._unlistenSlots(mutation.removedNodes);\n        }\n      }\n    }\n  }\n\n  /**\n   * Flushes the observer causing any pending changes to be immediately\n   * delivered the observer callback. By default these changes are delivered\n   * asynchronously at the next microtask checkpoint.\n   *\n   * @return {boolean} Returns true if any pending changes caused the observer\n   * callback to run.\n   */\n  flush() {\n    if (!this._connected) {\n      return false;\n    }\n    if (window.ShadyDOM) {\n      ShadyDOM.flush();\n    }\n    if (this._nativeChildrenObserver) {\n      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n    } else if (this._shadyChildrenObserver) {\n      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n    }\n    this._scheduled = false;\n    let info = {\n      target: this._target,\n      addedNodes: [],\n      removedNodes: []\n    };\n    let newNodes = this.constructor.getFlattenedNodes(this._target);\n    let splices = calculateSplices(newNodes,\n      this._effectiveNodes);\n    // process removals\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        info.removedNodes.push(n);\n      }\n    }\n    // process adds\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=s.index; j < s.index + s.addedCount; j++) {\n        info.addedNodes.push(newNodes[j]);\n      }\n    }\n    // update cache\n    this._effectiveNodes = newNodes;\n    let didFlush = false;\n    if (info.addedNodes.length || info.removedNodes.length) {\n      didFlush = true;\n      this.callback.call(this._target, info);\n    }\n    return didFlush;\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _listenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.addEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _unlistenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.removeEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}