{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FieldAriaController } from '@vaadin/a11y-base/src/field-aria-controller.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { ErrorController } from './error-controller.js';\nimport { HelperController } from './helper-controller.js';\nimport { LabelMixin } from './label-mixin.js';\nimport { ValidateMixin } from './validate-mixin.js';\n\n/**\n * A mixin to provide common field logic: label, error message and helper text.\n *\n * @polymerMixin\n * @mixes ControllerMixin\n * @mixes LabelMixin\n * @mixes ValidateMixin\n */\nexport const FieldMixin = superclass => class FieldMixinClass extends ValidateMixin(LabelMixin(ControllerMixin(superclass))) {\n  static get properties() {\n    return {\n      /**\n       * A target element to which ARIA attributes are set.\n       * @protected\n       */\n      ariaTarget: {\n        type: Object,\n        observer: '_ariaTargetChanged'\n      },\n      /**\n       * Error to show when the field is invalid.\n       *\n       * @attr {string} error-message\n       */\n      errorMessage: {\n        type: String,\n        observer: '_errorMessageChanged'\n      },\n      /**\n       * String used for the helper text.\n       * @attr {string} helper-text\n       */\n      helperText: {\n        type: String,\n        observer: '_helperTextChanged'\n      },\n      /**\n       * String used to label the component to screen reader users.\n       * @attr {string} accessible-name\n       */\n      accessibleName: {\n        type: String,\n        observer: '_accessibleNameChanged'\n      },\n      /**\n       * Id of the element used as label of the component to screen reader users.\n       * @attr {string} accessible-name-ref\n       */\n      accessibleNameRef: {\n        type: String,\n        observer: '_accessibleNameRefChanged'\n      }\n    };\n  }\n  static get observers() {\n    return ['_invalidChanged(invalid)', '_requiredChanged(required)'];\n  }\n  constructor() {\n    super();\n    this._fieldAriaController = new FieldAriaController(this);\n    this._helperController = new HelperController(this);\n    this._errorController = new ErrorController(this);\n    this._errorController.addEventListener('slot-content-changed', event => {\n      this.toggleAttribute('has-error-message', event.detail.hasContent);\n    });\n    this._labelController.addEventListener('slot-content-changed', event => {\n      const {\n        hasContent,\n        node\n      } = event.detail;\n      this.__labelChanged(hasContent, node);\n    });\n    this._helperController.addEventListener('slot-content-changed', event => {\n      const {\n        hasContent,\n        node\n      } = event.detail;\n      this.toggleAttribute('has-helper', hasContent);\n      this.__helperChanged(hasContent, node);\n    });\n  }\n\n  /**\n   * @protected\n   * @return {HTMLElement}\n   */\n  get _errorNode() {\n    return this._errorController.node;\n  }\n\n  /**\n   * @protected\n   * @return {HTMLElement}\n   */\n  get _helperNode() {\n    return this._helperController.node;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.addController(this._fieldAriaController);\n    this.addController(this._helperController);\n    this.addController(this._errorController);\n  }\n\n  /** @private */\n  __helperChanged(hasHelper, helperNode) {\n    if (hasHelper) {\n      this._fieldAriaController.setHelperId(helperNode.id);\n    } else {\n      this._fieldAriaController.setHelperId(null);\n    }\n  }\n\n  /** @protected */\n  _accessibleNameChanged(accessibleName) {\n    this._fieldAriaController.setAriaLabel(accessibleName);\n  }\n\n  /** @protected */\n  _accessibleNameRefChanged(accessibleNameRef) {\n    this._fieldAriaController.setLabelId(accessibleNameRef, true);\n  }\n\n  /** @private */\n  __labelChanged(hasLabel, labelNode) {\n    // Label ID should be only added when the label content is present.\n    // Otherwise, it may conflict with an `aria-label` attribute possibly added by the user.\n    if (hasLabel) {\n      this._fieldAriaController.setLabelId(labelNode.id);\n    } else {\n      this._fieldAriaController.setLabelId(null);\n    }\n  }\n\n  /**\n   * @param {string | null | undefined} errorMessage\n   * @protected\n   */\n  _errorMessageChanged(errorMessage) {\n    this._errorController.setErrorMessage(errorMessage);\n  }\n\n  /**\n   * @param {string} helperText\n   * @protected\n   */\n  _helperTextChanged(helperText) {\n    this._helperController.setHelperText(helperText);\n  }\n\n  /**\n   * @param {HTMLElement | null | undefined} target\n   * @protected\n   */\n  _ariaTargetChanged(target) {\n    if (target) {\n      this._fieldAriaController.setTarget(target);\n    }\n  }\n\n  /**\n   * @param {boolean} required\n   * @protected\n   */\n  _requiredChanged(required) {\n    this._fieldAriaController.setRequired(required);\n  }\n\n  /**\n   * @param {boolean} invalid\n   * @protected\n   */\n  _invalidChanged(invalid) {\n    this._errorController.setInvalid(invalid);\n\n    // This timeout is needed to prevent NVDA from announcing the error message twice:\n    // 1. Once adding the `[role=alert]` attribute when updating `has-error-message` (OK).\n    // 2. Once linking the error ID with the ARIA target here (unwanted).\n    // Related issue: https://github.com/vaadin/web-components/issues/3061.\n    setTimeout(() => {\n      // Error message ID needs to be dynamically added / removed based on the validity\n      // Otherwise assistive technologies would announce the error, even if we hide it.\n      if (invalid) {\n        const node = this._errorNode;\n        this._fieldAriaController.setErrorId(node && node.id);\n      } else {\n        this._fieldAriaController.setErrorId(null);\n      }\n    });\n  }\n};","map":{"version":3,"names":["FieldAriaController","ControllerMixin","ErrorController","HelperController","LabelMixin","ValidateMixin","FieldMixin","superclass","FieldMixinClass","properties","ariaTarget","type","Object","observer","errorMessage","String","helperText","accessibleName","accessibleNameRef","observers","constructor","_fieldAriaController","_helperController","_errorController","addEventListener","event","toggleAttribute","detail","hasContent","_labelController","node","__labelChanged","__helperChanged","_errorNode","_helperNode","ready","addController","hasHelper","helperNode","setHelperId","id","_accessibleNameChanged","setAriaLabel","_accessibleNameRefChanged","setLabelId","hasLabel","labelNode","_errorMessageChanged","setErrorMessage","_helperTextChanged","setHelperText","_ariaTargetChanged","target","setTarget","_requiredChanged","required","setRequired","_invalidChanged","invalid","setInvalid","setTimeout","setErrorId"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/field-base/src/field-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FieldAriaController } from '@vaadin/a11y-base/src/field-aria-controller.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { ErrorController } from './error-controller.js';\nimport { HelperController } from './helper-controller.js';\nimport { LabelMixin } from './label-mixin.js';\nimport { ValidateMixin } from './validate-mixin.js';\n\n/**\n * A mixin to provide common field logic: label, error message and helper text.\n *\n * @polymerMixin\n * @mixes ControllerMixin\n * @mixes LabelMixin\n * @mixes ValidateMixin\n */\nexport const FieldMixin = (superclass) =>\n  class FieldMixinClass extends ValidateMixin(LabelMixin(ControllerMixin(superclass))) {\n    static get properties() {\n      return {\n        /**\n         * A target element to which ARIA attributes are set.\n         * @protected\n         */\n        ariaTarget: {\n          type: Object,\n          observer: '_ariaTargetChanged',\n        },\n\n        /**\n         * Error to show when the field is invalid.\n         *\n         * @attr {string} error-message\n         */\n        errorMessage: {\n          type: String,\n          observer: '_errorMessageChanged',\n        },\n\n        /**\n         * String used for the helper text.\n         * @attr {string} helper-text\n         */\n        helperText: {\n          type: String,\n          observer: '_helperTextChanged',\n        },\n\n        /**\n         * String used to label the component to screen reader users.\n         * @attr {string} accessible-name\n         */\n        accessibleName: {\n          type: String,\n          observer: '_accessibleNameChanged',\n        },\n\n        /**\n         * Id of the element used as label of the component to screen reader users.\n         * @attr {string} accessible-name-ref\n         */\n        accessibleNameRef: {\n          type: String,\n          observer: '_accessibleNameRefChanged',\n        },\n      };\n    }\n\n    static get observers() {\n      return ['_invalidChanged(invalid)', '_requiredChanged(required)'];\n    }\n\n    constructor() {\n      super();\n\n      this._fieldAriaController = new FieldAriaController(this);\n      this._helperController = new HelperController(this);\n      this._errorController = new ErrorController(this);\n\n      this._errorController.addEventListener('slot-content-changed', (event) => {\n        this.toggleAttribute('has-error-message', event.detail.hasContent);\n      });\n\n      this._labelController.addEventListener('slot-content-changed', (event) => {\n        const { hasContent, node } = event.detail;\n        this.__labelChanged(hasContent, node);\n      });\n\n      this._helperController.addEventListener('slot-content-changed', (event) => {\n        const { hasContent, node } = event.detail;\n        this.toggleAttribute('has-helper', hasContent);\n        this.__helperChanged(hasContent, node);\n      });\n    }\n\n    /**\n     * @protected\n     * @return {HTMLElement}\n     */\n    get _errorNode() {\n      return this._errorController.node;\n    }\n\n    /**\n     * @protected\n     * @return {HTMLElement}\n     */\n    get _helperNode() {\n      return this._helperController.node;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.addController(this._fieldAriaController);\n      this.addController(this._helperController);\n      this.addController(this._errorController);\n    }\n\n    /** @private */\n    __helperChanged(hasHelper, helperNode) {\n      if (hasHelper) {\n        this._fieldAriaController.setHelperId(helperNode.id);\n      } else {\n        this._fieldAriaController.setHelperId(null);\n      }\n    }\n\n    /** @protected */\n    _accessibleNameChanged(accessibleName) {\n      this._fieldAriaController.setAriaLabel(accessibleName);\n    }\n\n    /** @protected */\n    _accessibleNameRefChanged(accessibleNameRef) {\n      this._fieldAriaController.setLabelId(accessibleNameRef, true);\n    }\n\n    /** @private */\n    __labelChanged(hasLabel, labelNode) {\n      // Label ID should be only added when the label content is present.\n      // Otherwise, it may conflict with an `aria-label` attribute possibly added by the user.\n      if (hasLabel) {\n        this._fieldAriaController.setLabelId(labelNode.id);\n      } else {\n        this._fieldAriaController.setLabelId(null);\n      }\n    }\n\n    /**\n     * @param {string | null | undefined} errorMessage\n     * @protected\n     */\n    _errorMessageChanged(errorMessage) {\n      this._errorController.setErrorMessage(errorMessage);\n    }\n\n    /**\n     * @param {string} helperText\n     * @protected\n     */\n    _helperTextChanged(helperText) {\n      this._helperController.setHelperText(helperText);\n    }\n\n    /**\n     * @param {HTMLElement | null | undefined} target\n     * @protected\n     */\n    _ariaTargetChanged(target) {\n      if (target) {\n        this._fieldAriaController.setTarget(target);\n      }\n    }\n\n    /**\n     * @param {boolean} required\n     * @protected\n     */\n    _requiredChanged(required) {\n      this._fieldAriaController.setRequired(required);\n    }\n\n    /**\n     * @param {boolean} invalid\n     * @protected\n     */\n    _invalidChanged(invalid) {\n      this._errorController.setInvalid(invalid);\n\n      // This timeout is needed to prevent NVDA from announcing the error message twice:\n      // 1. Once adding the `[role=alert]` attribute when updating `has-error-message` (OK).\n      // 2. Once linking the error ID with the ARIA target here (unwanted).\n      // Related issue: https://github.com/vaadin/web-components/issues/3061.\n      setTimeout(() => {\n        // Error message ID needs to be dynamically added / removed based on the validity\n        // Otherwise assistive technologies would announce the error, even if we hide it.\n        if (invalid) {\n          const node = this._errorNode;\n          this._fieldAriaController.setErrorId(node && node.id);\n        } else {\n          this._fieldAriaController.setErrorId(null);\n        }\n      });\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}