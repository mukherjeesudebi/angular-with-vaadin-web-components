{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { InputMixin } from './input-mixin.js';\n\n/**\n * A mixin that manages the clear button.\n *\n * @polymerMixin\n * @mixes InputMixin\n * @mixes KeyboardMixin\n */\nexport const ClearButtonMixin = superclass => class ClearButtonMixinClass extends InputMixin(KeyboardMixin(superclass)) {\n  static get properties() {\n    return {\n      /**\n       * Set to true to display the clear icon which clears the input.\n       *\n       * It is up to the component to choose where to place the clear icon:\n       * in the Shadow DOM or in the light DOM. In any way, a reference to\n       * the clear icon element should be provided via the `clearElement` getter.\n       *\n       * @attr {boolean} clear-button-visible\n       */\n      clearButtonVisible: {\n        type: Boolean,\n        reflectToAttribute: true,\n        value: false\n      }\n    };\n  }\n\n  /**\n   * Any element extending this mixin is required to implement this getter.\n   * It returns the reference to the clear button element.\n   *\n   * @protected\n   * @return {Element | null | undefined}\n   */\n  get clearElement() {\n    console.warn(`Please implement the 'clearElement' property in <${this.localName}>`);\n    return null;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    if (this.clearElement) {\n      this.clearElement.addEventListener('mousedown', event => this._onClearButtonMouseDown(event));\n      this.clearElement.addEventListener('click', event => this._onClearButtonClick(event));\n    }\n  }\n\n  /**\n   * @param {Event} event\n   * @protected\n   */\n  _onClearButtonClick(event) {\n    event.preventDefault();\n    this._onClearAction();\n  }\n\n  /**\n   * @param {MouseEvent} event\n   * @protected\n   */\n  _onClearButtonMouseDown(event) {\n    event.preventDefault();\n    if (!isTouch) {\n      this.inputElement.focus();\n    }\n  }\n\n  /**\n   * Override an event listener inherited from `KeydownMixin` to clear on Esc.\n   * Components that extend this mixin can prevent this behavior by overriding\n   * this method without calling `super._onEscape` to provide custom logic.\n   *\n   * @param {KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onEscape(event) {\n    super._onEscape(event);\n    if (this.clearButtonVisible && !!this.value) {\n      event.stopPropagation();\n      this._onClearAction();\n    }\n  }\n\n  /**\n   * Clears the value and dispatches `input` and `change` events\n   * on the input element. This method should be called\n   * when the clear action originates from the user.\n   *\n   * @protected\n   */\n  _onClearAction() {\n    this.clear();\n    // Note, according to the HTML spec, the native change event isn't composed\n    // while the input event is composed.\n    this.inputElement.dispatchEvent(new Event('input', {\n      bubbles: true,\n      composed: true\n    }));\n    this.inputElement.dispatchEvent(new Event('change', {\n      bubbles: true\n    }));\n  }\n};","map":{"version":3,"names":["KeyboardMixin","isTouch","InputMixin","ClearButtonMixin","superclass","ClearButtonMixinClass","properties","clearButtonVisible","type","Boolean","reflectToAttribute","value","clearElement","console","warn","localName","ready","addEventListener","event","_onClearButtonMouseDown","_onClearButtonClick","preventDefault","_onClearAction","inputElement","focus","_onEscape","stopPropagation","clear","dispatchEvent","Event","bubbles","composed"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/field-base/src/clear-button-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { InputMixin } from './input-mixin.js';\n\n/**\n * A mixin that manages the clear button.\n *\n * @polymerMixin\n * @mixes InputMixin\n * @mixes KeyboardMixin\n */\nexport const ClearButtonMixin = (superclass) =>\n  class ClearButtonMixinClass extends InputMixin(KeyboardMixin(superclass)) {\n    static get properties() {\n      return {\n        /**\n         * Set to true to display the clear icon which clears the input.\n         *\n         * It is up to the component to choose where to place the clear icon:\n         * in the Shadow DOM or in the light DOM. In any way, a reference to\n         * the clear icon element should be provided via the `clearElement` getter.\n         *\n         * @attr {boolean} clear-button-visible\n         */\n        clearButtonVisible: {\n          type: Boolean,\n          reflectToAttribute: true,\n          value: false,\n        },\n      };\n    }\n\n    /**\n     * Any element extending this mixin is required to implement this getter.\n     * It returns the reference to the clear button element.\n     *\n     * @protected\n     * @return {Element | null | undefined}\n     */\n    get clearElement() {\n      console.warn(`Please implement the 'clearElement' property in <${this.localName}>`);\n      return null;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      if (this.clearElement) {\n        this.clearElement.addEventListener('mousedown', (event) => this._onClearButtonMouseDown(event));\n        this.clearElement.addEventListener('click', (event) => this._onClearButtonClick(event));\n      }\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _onClearButtonClick(event) {\n      event.preventDefault();\n      this._onClearAction();\n    }\n\n    /**\n     * @param {MouseEvent} event\n     * @protected\n     */\n    _onClearButtonMouseDown(event) {\n      event.preventDefault();\n      if (!isTouch) {\n        this.inputElement.focus();\n      }\n    }\n\n    /**\n     * Override an event listener inherited from `KeydownMixin` to clear on Esc.\n     * Components that extend this mixin can prevent this behavior by overriding\n     * this method without calling `super._onEscape` to provide custom logic.\n     *\n     * @param {KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onEscape(event) {\n      super._onEscape(event);\n\n      if (this.clearButtonVisible && !!this.value) {\n        event.stopPropagation();\n        this._onClearAction();\n      }\n    }\n\n    /**\n     * Clears the value and dispatches `input` and `change` events\n     * on the input element. This method should be called\n     * when the clear action originates from the user.\n     *\n     * @protected\n     */\n    _onClearAction() {\n      this.clear();\n      // Note, according to the HTML spec, the native change event isn't composed\n      // while the input event is composed.\n      this.inputElement.dispatchEvent(new Event('input', { bubbles: true, composed: true }));\n      this.inputElement.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n  };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,yCAAyC;AACvE,SAASC,OAAO,QAAQ,6CAA6C;AACrE,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAIC,UAAU,IACzC,MAAMC,qBAAqB,SAASH,UAAU,CAACF,aAAa,CAACI,UAAU,CAAC,CAAC,CAAC;EACxE,WAAWE,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACQC,kBAAkB,EAAE;QAClBC,IAAI,EAAEC,OAAO;QACbC,kBAAkB,EAAE,IAAI;QACxBC,KAAK,EAAE;MACT;IACF,CAAC;EACH;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,YAAYA,CAAA,EAAG;IACjBC,OAAO,CAACC,IAAI,CAAE,oDAAmD,IAAI,CAACC,SAAU,GAAE,CAAC;IACnF,OAAO,IAAI;EACb;;EAEA;EACAC,KAAKA,CAAA,EAAG;IACN,KAAK,CAACA,KAAK,CAAC,CAAC;IAEb,IAAI,IAAI,CAACJ,YAAY,EAAE;MACrB,IAAI,CAACA,YAAY,CAACK,gBAAgB,CAAC,WAAW,EAAGC,KAAK,IAAK,IAAI,CAACC,uBAAuB,CAACD,KAAK,CAAC,CAAC;MAC/F,IAAI,CAACN,YAAY,CAACK,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK,IAAI,CAACE,mBAAmB,CAACF,KAAK,CAAC,CAAC;IACzF;EACF;;EAEA;AACJ;AACA;AACA;EACIE,mBAAmBA,CAACF,KAAK,EAAE;IACzBA,KAAK,CAACG,cAAc,CAAC,CAAC;IACtB,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB;;EAEA;AACJ;AACA;AACA;EACIH,uBAAuBA,CAACD,KAAK,EAAE;IAC7BA,KAAK,CAACG,cAAc,CAAC,CAAC;IACtB,IAAI,CAACpB,OAAO,EAAE;MACZ,IAAI,CAACsB,YAAY,CAACC,KAAK,CAAC,CAAC;IAC3B;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAASA,CAACP,KAAK,EAAE;IACf,KAAK,CAACO,SAAS,CAACP,KAAK,CAAC;IAEtB,IAAI,IAAI,CAACX,kBAAkB,IAAI,CAAC,CAAC,IAAI,CAACI,KAAK,EAAE;MAC3CO,KAAK,CAACQ,eAAe,CAAC,CAAC;MACvB,IAAI,CAACJ,cAAc,CAAC,CAAC;IACvB;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIA,cAAcA,CAAA,EAAG;IACf,IAAI,CAACK,KAAK,CAAC,CAAC;IACZ;IACA;IACA,IAAI,CAACJ,YAAY,CAACK,aAAa,CAAC,IAAIC,KAAK,CAAC,OAAO,EAAE;MAAEC,OAAO,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC;IACtF,IAAI,CAACR,YAAY,CAACK,aAAa,CAAC,IAAIC,KAAK,CAAC,QAAQ,EAAE;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC,CAAC;EACzE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}