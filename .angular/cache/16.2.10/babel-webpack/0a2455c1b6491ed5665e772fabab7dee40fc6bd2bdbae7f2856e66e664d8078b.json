{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * @typedef ReactiveController\n * @type {import('lit').ReactiveController}\n */\n\n/**\n * A mixin for connecting controllers to the element.\n *\n * @polymerMixin\n */\nexport const ControllerMixin = dedupingMixin(superClass => {\n  // If the superclass extends from LitElement,\n  // use its own controllers implementation.\n  if (typeof superClass.prototype.addController === 'function') {\n    return superClass;\n  }\n  return class ControllerMixinClass extends superClass {\n    constructor() {\n      super();\n\n      /**\n       * @type {Set<ReactiveController>}\n       */\n      this.__controllers = new Set();\n    }\n\n    /** @protected */\n    connectedCallback() {\n      super.connectedCallback();\n      this.__controllers.forEach(c => {\n        if (c.hostConnected) {\n          c.hostConnected();\n        }\n      });\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__controllers.forEach(c => {\n        if (c.hostDisconnected) {\n          c.hostDisconnected();\n        }\n      });\n    }\n\n    /**\n     * Registers a controller to participate in the element update cycle.\n     *\n     * @param {ReactiveController} controller\n     * @protected\n     */\n    addController(controller) {\n      this.__controllers.add(controller);\n      // Call hostConnected if a controller is added after the element is attached.\n      if (this.$ !== undefined && this.isConnected && controller.hostConnected) {\n        controller.hostConnected();\n      }\n    }\n\n    /**\n     * Removes a controller from the element.\n     *\n     * @param {ReactiveController} controller\n     * @protected\n     */\n    removeController(controller) {\n      this.__controllers.delete(controller);\n    }\n  };\n});","map":{"version":3,"names":["dedupingMixin","ControllerMixin","superClass","prototype","addController","ControllerMixinClass","constructor","__controllers","Set","connectedCallback","forEach","c","hostConnected","disconnectedCallback","hostDisconnected","controller","add","$","undefined","isConnected","removeController","delete"],"sources":["C:/Users/Sudebi/Vaadin/Workspace/Angular/AngluarVaadin/using-web-components-in-angular/node_modules/@vaadin/component-base/src/controller-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * @typedef ReactiveController\n * @type {import('lit').ReactiveController}\n */\n\n/**\n * A mixin for connecting controllers to the element.\n *\n * @polymerMixin\n */\nexport const ControllerMixin = dedupingMixin((superClass) => {\n  // If the superclass extends from LitElement,\n  // use its own controllers implementation.\n  if (typeof superClass.prototype.addController === 'function') {\n    return superClass;\n  }\n\n  return class ControllerMixinClass extends superClass {\n    constructor() {\n      super();\n\n      /**\n       * @type {Set<ReactiveController>}\n       */\n      this.__controllers = new Set();\n    }\n\n    /** @protected */\n    connectedCallback() {\n      super.connectedCallback();\n\n      this.__controllers.forEach((c) => {\n        if (c.hostConnected) {\n          c.hostConnected();\n        }\n      });\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      this.__controllers.forEach((c) => {\n        if (c.hostDisconnected) {\n          c.hostDisconnected();\n        }\n      });\n    }\n\n    /**\n     * Registers a controller to participate in the element update cycle.\n     *\n     * @param {ReactiveController} controller\n     * @protected\n     */\n    addController(controller) {\n      this.__controllers.add(controller);\n      // Call hostConnected if a controller is added after the element is attached.\n      if (this.$ !== undefined && this.isConnected && controller.hostConnected) {\n        controller.hostConnected();\n      }\n    }\n\n    /**\n     * Removes a controller from the element.\n     *\n     * @param {ReactiveController} controller\n     * @protected\n     */\n    removeController(controller) {\n      this.__controllers.delete(controller);\n    }\n  };\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,qCAAqC;;AAEnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGD,aAAa,CAAEE,UAAU,IAAK;EAC3D;EACA;EACA,IAAI,OAAOA,UAAU,CAACC,SAAS,CAACC,aAAa,KAAK,UAAU,EAAE;IAC5D,OAAOF,UAAU;EACnB;EAEA,OAAO,MAAMG,oBAAoB,SAASH,UAAU,CAAC;IACnDI,WAAWA,CAAA,EAAG;MACZ,KAAK,CAAC,CAAC;;MAEP;AACN;AACA;MACM,IAAI,CAACC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAChC;;IAEA;IACAC,iBAAiBA,CAAA,EAAG;MAClB,KAAK,CAACA,iBAAiB,CAAC,CAAC;MAEzB,IAAI,CAACF,aAAa,CAACG,OAAO,CAAEC,CAAC,IAAK;QAChC,IAAIA,CAAC,CAACC,aAAa,EAAE;UACnBD,CAAC,CAACC,aAAa,CAAC,CAAC;QACnB;MACF,CAAC,CAAC;IACJ;;IAEA;IACAC,oBAAoBA,CAAA,EAAG;MACrB,KAAK,CAACA,oBAAoB,CAAC,CAAC;MAE5B,IAAI,CAACN,aAAa,CAACG,OAAO,CAAEC,CAAC,IAAK;QAChC,IAAIA,CAAC,CAACG,gBAAgB,EAAE;UACtBH,CAAC,CAACG,gBAAgB,CAAC,CAAC;QACtB;MACF,CAAC,CAAC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIV,aAAaA,CAACW,UAAU,EAAE;MACxB,IAAI,CAACR,aAAa,CAACS,GAAG,CAACD,UAAU,CAAC;MAClC;MACA,IAAI,IAAI,CAACE,CAAC,KAAKC,SAAS,IAAI,IAAI,CAACC,WAAW,IAAIJ,UAAU,CAACH,aAAa,EAAE;QACxEG,UAAU,CAACH,aAAa,CAAC,CAAC;MAC5B;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACIQ,gBAAgBA,CAACL,UAAU,EAAE;MAC3B,IAAI,CAACR,aAAa,CAACc,MAAM,CAACN,UAAU,CAAC;IACvC;EACF,CAAC;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}